<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>golang（入门）初始化</title>
      <link href="/GO/golang%EF%BC%88%E5%85%A5%E9%97%A8%EF%BC%89%E5%88%9D%E5%A7%8B%E5%8C%96/"/>
      <url>/GO/golang%EF%BC%88%E5%85%A5%E9%97%A8%EF%BC%89%E5%88%9D%E5%A7%8B%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<p>在 Go 语言中，我们常用的数据结构有在 Go 语言中，你可以初始化数据结构，例如数组、切片、结构体、指针、map 等。以下是这些数据结构初始化的实例：</p><ol><li>数组初始化</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> arr [<span class="number">5</span>]<span class="type">int</span> = [<span class="number">5</span>]<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125; fmt.Println(arr)</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><ol><li>切片初始化：</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main </span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span> </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123; </span><br><span class="line">    <span class="keyword">var</span> s []<span class="type">int</span> = []<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125; fmt.Println(s) </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><ol><li>结构体初始化： </li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main </span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span> </span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">    Name <span class="type">string</span></span><br><span class="line">    Age <span class="type">int</span></span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"> <span class="keyword">var</span> p Person = Person&#123;<span class="string">&quot;John Doe&quot;</span>, <span class="number">30</span>&#125; fmt.Println(p)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>指针初始化：</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> x <span class="type">int</span> = <span class="number">10</span></span><br><span class="line">    <span class="keyword">var</span> p *<span class="type">int</span> = &amp;x</span><br><span class="line">    fmt.Println(*p)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>Map 初始化：</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> m <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span> = <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span>&#123;<span class="string">&quot;one&quot;</span>: <span class="number">1</span>, <span class="string">&quot;two&quot;</span>: <span class="number">2</span>&#125;</span><br><span class="line">    fmt.Println(m)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请注意，这些示例都使用了 var 关键字进行初始化，但在 Go 语言中，你还可以使用 “:=” 操作符进行简短声明和初始化，例如： </p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s := []<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125; </span><br><span class="line">p := Person&#123;<span class="string">&quot;John Doe&quot;</span>, <span class="number">30</span>&#125; </span><br><span class="line">m := <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span>&#123;<span class="string">&quot;one&quot;</span>: <span class="number">1</span>, <span class="string">&quot;two&quot;</span>: <span class="number">2</span>&#125; </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> GO </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis实践</title>
      <link href="/redis/redis%E5%AE%9E%E8%B7%B5/"/>
      <url>/redis/redis%E5%AE%9E%E8%B7%B5/</url>
      
        <content type="html"><![CDATA[<h2 id="Redis-最佳场景-小容量、热数据"><a href="#Redis-最佳场景-小容量、热数据" class="headerlink" title="Redis 最佳场景 小容量、热数据"></a>Redis 最佳场景 小容量、热数据</h2><h2 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h2><p>选择合适的数据结构</p><p>杜绝BigKey HotKey</p><p>避免复杂操作</p><p>不要过度使用</p>]]></content>
      
      
      <categories>
          
          <category> redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>golang(入门)struct &amp; interface &amp; 类型断言</title>
      <link href="/GO/golang(%E5%85%A5%E9%97%A8)struct%20&amp;%20interface%20&amp;%20%E7%B1%BB%E5%9E%8B%E6%96%AD%E8%A8%80/"/>
      <url>/GO/golang(%E5%85%A5%E9%97%A8)struct%20&amp;%20interface%20&amp;%20%E7%B1%BB%E5%9E%8B%E6%96%AD%E8%A8%80/</url>
      
        <content type="html"><![CDATA[<h1 id="GoLang入门"><a href="#GoLang入门" class="headerlink" title="GoLang入门"></a>GoLang入门</h1><h2 id="一、-struct"><a href="#一、-struct" class="headerlink" title="一、 struct"></a>一、 struct</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> person <span class="keyword">struct</span> &#123;</span><br><span class="line">name <span class="type">string</span></span><br><span class="line">age  <span class="type">uint</span></span><br><span class="line">addr address</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> address <span class="keyword">struct</span> &#123;</span><br><span class="line">province <span class="type">string</span></span><br><span class="line">city     <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">per := person&#123;</span><br><span class="line">age:  <span class="number">12</span>,</span><br><span class="line">name: <span class="string">&quot;zuolong&quot;</span>,</span><br><span class="line">addr: address&#123;</span><br><span class="line">province: <span class="string">&quot;beijing&quot;</span>,</span><br><span class="line">city:     <span class="string">&quot;beijing&quot;</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(per)</span><br><span class="line">fmt.Println(per.addr.province)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="二、-interface-接口"><a href="#二、-interface-接口" class="headerlink" title="二、 interface 接口"></a>二、 interface 接口</h2><p>Golang 中的接口是一种抽象数据类型，Golang 中接口定义了对象的行为规范，只定义规范 不实现。接口中定义的规范由具体的对象来实现。</p><p>通俗的讲接口就一个标准，它是对一个对象的行为和规范进行约定，约定实现接口的对象必 须得按照接口的规范。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 定义电脑usb接口</span></span><br><span class="line"><span class="keyword">type</span> Usber2 <span class="keyword">interface</span> &#123;</span><br><span class="line">start()</span><br><span class="line">stop()</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 定义电脑结构体</span></span><br><span class="line"><span class="keyword">type</span> Computer <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 定义电脑usb工作方式</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c Computer)</span></span> Work(u Usber2) &#123;</span><br><span class="line">u.start()</span><br><span class="line">u.stop()</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 定义手机</span></span><br><span class="line"><span class="keyword">type</span> Phone2 <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p Phone2)</span></span> start() &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;手机连接成功&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p Phone2)</span></span> stop() &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;手机断开连接&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 定义相机</span></span><br><span class="line"><span class="keyword">type</span> Cermail <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c Cermail)</span></span> start() &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;相机连接成功&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c Cermail)</span></span> stop() &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;相机断开连接&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 分别定义变量</span></span><br><span class="line">p1 := Phone2&#123;&#125;</span><br><span class="line">c := Cermail&#123;&#125;</span><br><span class="line">computer := Computer&#123;&#125;</span><br><span class="line"><span class="comment">// 手机连接电脑</span></span><br><span class="line">computer.Work(p1) <span class="comment">// 手机连接成功 手机连接成功</span></span><br><span class="line"><span class="comment">// 相机连接电脑</span></span><br><span class="line">computer.Work(c) <span class="comment">// 相机连接成功 相机断开连接</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="空接口"><a href="#空接口" class="headerlink" title="空接口"></a>空接口</h3><p>Golang 中的接口可以不定义任何方法，没有定义任何方法的接口就是空接口。</p><p>空接口表示没有任何约束，因此任何类型变量都可以实现空接口。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a <span class="keyword">interface</span>&#123;&#125; <span class="comment">// 定义变量a为空接口</span></span><br><span class="line">a = <span class="string">&quot;你好 golang&quot;</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;值：%v 类型：%T\n&quot;</span>, a, a) <span class="comment">// 值：你好 golang 类型：string</span></span><br><span class="line"></span><br><span class="line">a = <span class="number">10</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;值：%v 类型：%T\n&quot;</span>, a, a) <span class="comment">// 值：10 类型：int</span></span><br><span class="line"></span><br><span class="line">a = <span class="literal">true</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;值：%v 类型：%T\n&quot;</span>, a, a) <span class="comment">// 值：true 类型：bool</span></span><br></pre></td></tr></table></figure><h4 id="空接口做函数参数"><a href="#空接口做函数参数" class="headerlink" title="空接口做函数参数"></a>空接口做函数参数</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 空接口作为函数参数，代表该函数接收任意参数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">(i <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;值：%v 类型：%T\n&quot;</span>, i, i)</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 随意传入参数</span></span><br><span class="line">test(<span class="number">1</span>)     <span class="comment">// 值：1 类型：int</span></span><br><span class="line">test(<span class="string">&quot;阿西吧&quot;</span>) <span class="comment">// 值：1 类型：int</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>)</span><br><span class="line">b[<span class="string">&quot;哈哈&quot;</span>] = <span class="string">&quot;嘻嘻&quot;</span></span><br><span class="line">test(b) <span class="comment">// 值：map[哈哈:嘻嘻] 类型：map[string]string</span></span><br><span class="line"><span class="keyword">var</span> c = []<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">test(c) <span class="comment">// 值：[1 2 3] 类型：[]int</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="map值实现空接口"><a href="#map值实现空接口" class="headerlink" title="map值实现空接口"></a>map值实现空接口</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">// 空接口作为map，代表可以保存任意值</span></span><br><span class="line"><span class="keyword">var</span> e = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;&#125;)</span><br><span class="line">e[<span class="string">&quot;username&quot;</span>] = <span class="string">&quot;张三&quot;</span></span><br><span class="line">e[<span class="string">&quot;age&quot;</span>] = <span class="number">12</span></span><br><span class="line">fmt.Println(e) <span class="comment">// map[age:12 username:张三]</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">var</span> f = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">interface</span>&#123;&#125;]<span class="keyword">interface</span>&#123;&#125;)</span><br><span class="line">f[<span class="number">123</span>] = <span class="number">456</span></span><br><span class="line">f[<span class="string">&quot;test&quot;</span>] = <span class="number">123</span></span><br><span class="line">f[<span class="string">&quot;fdas&quot;</span>] = <span class="string">&quot;ghu&quot;</span></span><br><span class="line">fmt.Println(f) <span class="comment">// map[123:456 fdas:ghu test:123]</span></span><br></pre></td></tr></table></figure><h4 id="切片实现空接口"><a href="#切片实现空接口" class="headerlink" title="切片实现空接口"></a>切片实现空接口</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 切片空接口</span></span><br><span class="line"><span class="keyword">var</span> g = []<span class="keyword">interface</span>&#123;&#125;&#123;<span class="number">1</span>, <span class="string">&quot;张三&quot;</span>, <span class="literal">true</span>&#125;</span><br><span class="line">fmt.Println(g) <span class="comment">// [1 张三 true]</span></span><br></pre></td></tr></table></figure><h2 id="类型断言"><a href="#类型断言" class="headerlink" title="类型断言"></a>类型断言</h2><p>一个接口的值（简称接口值）是由一个具体类型和具体类型的值两部分组成的。这两部分分别称为接口的动态类型和动态值。</p><p>如果我们想要判断空接口中值的类型，那么这个时候就可以使用类型断言，其语法格式：x.(T)</p><p>其中： x : 表示类型为 interface{} 的变量  T : 表示断言 x 可能是的类型。</p><p>该语法返回两个参数，第一个参数是 x 转化为 T 类型后的变量，第二个值是一个布尔值，若为 true 则表示断言成功，为 false 则表示断言失败。</p><h4 id="1-断言的基础使用"><a href="#1-断言的基础使用" class="headerlink" title="1. 断言的基础使用"></a>1. 断言的基础使用</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 断言基础使用</span></span><br><span class="line"><span class="keyword">var</span> h <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">h = <span class="string">&quot;张三&quot;</span></span><br><span class="line">v, ok := h.(<span class="type">string</span>)</span><br><span class="line"><span class="keyword">if</span> ok &#123;</span><br><span class="line">fmt.Println(v) <span class="comment">// 张三</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;不是string类型&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-多次断言配合-swtich-使用"><a href="#2-多次断言配合-swtich-使用" class="headerlink" title="2. 多次断言配合 swtich 使用"></a>2. 多次断言配合 swtich 使用</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 多次断言配合switch使用，另外类型.(type)只能配合switch使用</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">vifType</span><span class="params">(s <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line"><span class="keyword">switch</span> s.(<span class="keyword">type</span>) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="type">string</span>:</span><br><span class="line">fmt.Println(<span class="string">&quot;string&quot;</span>)</span><br><span class="line"><span class="keyword">case</span> <span class="type">int</span>:</span><br><span class="line">fmt.Println(<span class="string">&quot;int&quot;</span>)</span><br><span class="line"><span class="keyword">case</span> <span class="type">bool</span>:</span><br><span class="line">fmt.Println(<span class="string">&quot;bool&quot;</span>)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">fmt.Println(<span class="string">&quot;no search&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 多次断言配合switch使用</span></span><br><span class="line">vifType(<span class="string">&quot;abcd&quot;</span>)     <span class="comment">// string</span></span><br><span class="line">vifType(<span class="number">123</span>)        <span class="comment">// int</span></span><br><span class="line">vifType(<span class="literal">true</span>)       <span class="comment">// bool</span></span><br><span class="line">vifType(<span class="type">int64</span>(<span class="number">123</span>)) <span class="comment">// no search</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-注意"><a href="#3-注意" class="headerlink" title="3. 注意"></a>3. 注意</h4><p>因为空接口可以存储任意类型值的特点，所以空接口在 Go 语言中的使用十分广泛。</p><p>关于接口需要注意的是：只有当有两个或两个以上的具体类型必须以相同的方式进行处理时才需要定义接口。不要为了接口而写接口，那样只会增加不必要的抽象，导致不必要的运行时损耗。</p>]]></content>
      
      
      <categories>
          
          <category> GO </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>分布式锁</title>
      <link href="/%E5%AE%9E%E9%99%85%E5%BC%80%E5%8F%91/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/"/>
      <url>/%E5%AE%9E%E9%99%85%E5%BC%80%E5%8F%91/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/</url>
      
        <content type="html"><![CDATA[<h1 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h1><p>分布式锁实践—待总结</p><h1 id="基于Redis-Cluster-模式下的分布式锁的实现"><a href="#基于Redis-Cluster-模式下的分布式锁的实现" class="headerlink" title="基于Redis Cluster 模式下的分布式锁的实现"></a>基于Redis Cluster 模式下的分布式锁的实现</h1><h2 id="基于setnx锁实现"><a href="#基于setnx锁实现" class="headerlink" title="基于setnx锁实现"></a>基于setnx锁实现</h2><p><strong>加锁</strong><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setnx k v</span><br></pre></td></tr></table></figure><br>key做为锁的唯一标识,当setnx返回1时,说明原本key不存在,该线程成功得到了锁;如果返回的结果为0,则说明key已经存在,线程获取失败</p><p><strong>解锁</strong><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">del key</span><br></pre></td></tr></table></figure></p><p><strong>通过制定key的过期时间,让锁到期后自动释放</strong><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; set key value [EX seconds] [PX milliseconds] [NX|XX]</span><br></pre></td></tr></table></figure><br>EX seconds：设置键key的过期时间，单位时秒;</p><p>PX milliseconds：设置键key的过期时间，单位时毫秒;</p><p>NX：只有键key不存在的时候才会设置key的值；</p><p>XX：只有键key存在的时候才会设置key的值。</p><pre><code>通过 set (key, value, EX a,NX） 取代setnx 来实现原子加锁(自动释放锁)操作。</code></pre><h2 id="基于Redis实现分布式锁的一些问题"><a href="#基于Redis实现分布式锁的一些问题" class="headerlink" title="基于Redis实现分布式锁的一些问题"></a>基于Redis实现分布式锁的一些问题</h2><p>在高并发下的分布式锁实现中，key的过期肯定不能设置的太长，否则会影响后续线程持有该锁；</p><p>但是如果设置过期时间很短，直到key过期，持有该锁的线程还未执行完任务；接着下一个线程获取到该锁，这时候前一个线程执行完成后触发del释放该锁，而这把锁这个时候其实是另外一个线程持有；</p><p>获取锁是非阻塞的，无论成功还是失败就直接返回；</p><p>锁公平问题，所有等待线程同时发起获取锁命令操作。</p><pre><code>针对上述问题需要另外服务来保证实现：</code></pre><p>守护线程：如果某个线程在expire时间内，还未执行完成，守护线程自动expire一个新过期时间，直到该线程执行完成或释放；</p><p>释放验证：线程加锁前通过线程ID和Key Value匹配，释放前通过两者判断是否一致，一致再释放该锁，避免错误释放其他线程执行时持有相同的锁(原子性可以通过lua脚本来实现)；</p><p>阻塞锁： 通过while true之类的机制去阻塞代码实现；</p><p>公平锁：可以通过将所有等待线程放入同一个队列来实现。</p><p>可重入性</p><p>  Java中的Lock对象以及Synchronized关键字语块都可具有可重入性，可以实现同一个线程中共用同一把锁；避免死锁发生的可能。</p><p>  而在Redis上述实现中则没有相应的功能，如果业务上需要，则需在业务代码中实现其逻辑。</p><p> 安全性</p><p>  Redis Cluster 在master异常情况下，会发生主从切换，而主从是异步复制，极大可能导致数据丢失，从而导致锁的失效。这块安全性方面Redis Cluster 无法保证。</p><p>  但是Redis 作者实现了基于多节点的高可用分布式锁的算法 RedLock。有兴趣的可以了解一下。</p>]]></content>
      
      
      <categories>
          
          <category> 实际开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 实际开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring循环依赖</title>
      <link href="/%E5%AE%9E%E9%99%85%E5%BC%80%E5%8F%91/Spring%E5%BE%AA%E7%8E%AF%E4%BE%9D%E8%B5%96/"/>
      <url>/%E5%AE%9E%E9%99%85%E5%BC%80%E5%8F%91/Spring%E5%BE%AA%E7%8E%AF%E4%BE%9D%E8%B5%96/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring循环依赖"><a href="#Spring循环依赖" class="headerlink" title="Spring循环依赖"></a>Spring循环依赖</h1><p>12.19 遇到Spring循环依赖的问题 — TODO</p><p>通过 @Lazy解决</p><p>据说循环依赖问题还可以通过, set注入. @PostConstract 等方式解决 todo</p>]]></content>
      
      
      <categories>
          
          <category> 实际开发 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>fullGC</title>
      <link href="/%E5%AE%9E%E9%99%85%E5%BC%80%E5%8F%91/fullGC/"/>
      <url>/%E5%AE%9E%E9%99%85%E5%BC%80%E5%8F%91/fullGC/</url>
      
        <content type="html"><![CDATA[<h1 id="fullGC"><a href="#fullGC" class="headerlink" title="fullGC"></a>fullGC</h1><h2 id="一、fullGC-产生的原因分析"><a href="#一、fullGC-产生的原因分析" class="headerlink" title="一、fullGC 产生的原因分析"></a>一、fullGC 产生的原因分析</h2><p> [] 查过几个案例,大对象导致full GC的情况比较多, 表现为通过SQL之类查询出了大对象信息,导致full GC ,然后系统主机STW 无法提供服务 </p><p>简单分析</p><p>① 原因分析</p><p>不断生成大对象，大对象不进eden，直接进old，导致fgc，可以通过对象分析来看</p><p>不断生成小对象，小对象塞满了eden，触发ygc，进到old，满了导致fgc。现象是ygc次数非常多，内存占用增长很快</p><p>元空间增长快。此时需要检查是不是有不断生成的类，例如星脉的Java就是使用了动态生成类加载器和动态生成类的能力，不控制容易打爆元空间</p><p>另外还有一种堆外内存增长过快，不会触发fgc，但可能会导致机器内存占满的情况</p><h2 id="二、参考文档"><a href="#二、参考文档" class="headerlink" title="二、参考文档"></a>二、参考文档</h2><p><a href="https://mp.weixin.qq.com/s/S116BZtPmLS1e1e9voEpbA">JVM出现连续的FullGC该怎么办</a> </p>]]></content>
      
      
      <categories>
          
          <category> 实际开发 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>范型</title>
      <link href="/Java%E5%9F%BA%E7%A1%80/%E8%8C%83%E5%9E%8B/"/>
      <url>/Java%E5%9F%BA%E7%A1%80/%E8%8C%83%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h3 id="一、引入"><a href="#一、引入" class="headerlink" title="一、引入"></a>一、引入</h3><h4 id="没有泛型会怎样"><a href="#没有泛型会怎样" class="headerlink" title="没有泛型会怎样"></a>没有泛型会怎样</h4><p>先看下面这段代码：<br>我们实现两个能够设置点坐标的类，分别设置 Integer 类型的点坐标和 Float 类型的点坐标：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置Integer类型的点坐标</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">IntegerPoint</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer x ;       <span class="comment">// 表示X坐标</span></span><br><span class="line">    <span class="keyword">private</span> Integer y ;       <span class="comment">// 表示Y坐标</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setX</span><span class="params">(Integer x)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.x = x ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setY</span><span class="params">(Integer y)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.y = y ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getX</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.x ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getY</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.y ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//设置Float类型的点坐标</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FloatPoint</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Float x ;       <span class="comment">// 表示X坐标</span></span><br><span class="line">    <span class="keyword">private</span> Float y ;       <span class="comment">// 表示Y坐标</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setX</span><span class="params">(Float x)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.x = x ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setY</span><span class="params">(Float y)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.y = y ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Float <span class="title function_">getX</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.x ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Float <span class="title function_">getY</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.y ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那现在有个问题：大家有没有发现，他们除了变量类型不一样，一个是 Integer 一个是 Float 以外，其它并没有什么区别！那我们能不能合并成一个呢？<br>答案是可以的，因为 Integer 和 Float 都是派生自 Object 的，我们用下面这段代码代替：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ObjectPoint</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Object x ;</span><br><span class="line">    <span class="keyword">private</span> Object y ;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setX</span><span class="params">(Object x)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.x = x ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setY</span><span class="params">(Object y)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.y = y ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getX</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.x ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getY</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.y ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>即全部都用 Object 来代替所有的子类；<br>在使用的时候是这样的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ObjectPoint</span> <span class="variable">integerPoint</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectPoint</span>();</span><br><span class="line">integerPoint.setX(<span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">100</span>));</span><br><span class="line">Integer integerX=(Integer)integerPoint.getX();</span><br></pre></td></tr></table></figure><p>在设置的时候，使用 new Integer(100) 来新建一个 Integer</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">integerPoint.setX(<span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">100</span>));</span><br></pre></td></tr></table></figure><p>然后在取值的时候，进行强制转换：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Integer integerX=(Integer)integerPoint.getX();</span><br></pre></td></tr></table></figure><p>由于我们设置的时候，是设置的 Integer，所以在取值的时候，强制转换是不会出错的。<br>同理，FloatPoint 的设置和取值也是类似的，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ObjectPoint</span> <span class="variable">floatPoint</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectPoint</span>();</span><br><span class="line">floatPoint.setX(<span class="keyword">new</span> <span class="title class_">Float</span>(<span class="number">100.12f</span>));</span><br><span class="line"><span class="type">Float</span> <span class="variable">floatX</span> <span class="operator">=</span> (Float)floatPoint.getX();</span><br></pre></td></tr></table></figure><p>但问题来了：注意，注意，我们这里使用了强制转换，我们这里 setX（）和 getX（）写得很近，所以我们明确的知道我们传进去的是 Float 类型，那如果我们记错了呢？<br>比如我们改成下面这样，编译时会报错吗：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ObjectPoint</span> <span class="variable">floatPoint</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectPoint</span>();</span><br><span class="line">floatPoint.setX(<span class="keyword">new</span> <span class="title class_">Float</span>(<span class="number">100.12f</span>));</span><br><span class="line"><span class="type">String</span> <span class="variable">floatX</span> <span class="operator">=</span> (String)floatPoint.getX();</span><br></pre></td></tr></table></figure><p>不会！！！我们问题的关键在于这句：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">floatX</span> <span class="operator">=</span> (String)floatPoint.getX();</span><br></pre></td></tr></table></figure><p>强制转换时，会不会出错。因为编译器也不知道你传进去的是什么，而 floatPoint.getX() 返回的类型是 Object，所以编译时，将 Object 强转成 String 是成立的。必然不会报错。<br>而在运行时，则不然，在运行时，floatPoint 实例中明明传进去的是 Float 类型的变量，非要把它强转成 String 类型，肯定会报类型转换错误的！<br>那有没有一种办法在编译阶段，即能合并成同一个，又能在编译时检查出来传进去类型不对呢？当然，这就是泛型。<br>下面我们将对泛型的写法和用法做一一讲解。</p><h3 id="二、各种泛型定义及使用"><a href="#二、各种泛型定义及使用" class="headerlink" title="二、各种泛型定义及使用"></a>二、各种泛型定义及使用</h3><h4 id="1、泛型类定义及使用"><a href="#1、泛型类定义及使用" class="headerlink" title="1、泛型类定义及使用"></a>1、泛型类定义及使用</h4><p>我们先看看泛型的类是怎么定义的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span>&lt;T&gt;&#123;<span class="comment">// 此处可以随便写标识符号 </span></span><br><span class="line">    <span class="keyword">private</span> T x ;      </span><br><span class="line">    <span class="keyword">private</span> T y ;      </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setX</span><span class="params">(T x)</span>&#123;<span class="comment">//作为参数</span></span><br><span class="line">        <span class="built_in">this</span>.x = x ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setY</span><span class="params">(T y)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.y = y ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">getX</span><span class="params">()</span>&#123;<span class="comment">//作为返回值</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.x ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">getY</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.y ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//IntegerPoint使用</span></span><br><span class="line">Point&lt;Integer&gt; p = <span class="keyword">new</span> <span class="title class_">Point</span>&lt;Integer&gt;() ; </span><br><span class="line">p.setX(<span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">100</span>)) ; </span><br><span class="line">System.out.println(p.getX());  </span><br><span class="line"> </span><br><span class="line"><span class="comment">//FloatPoint使用</span></span><br><span class="line">Point&lt;Float&gt; p = <span class="keyword">new</span> <span class="title class_">Point</span>&lt;Float&gt;() ; </span><br><span class="line">p.setX(<span class="keyword">new</span> <span class="title class_">Float</span>(<span class="number">100.12f</span>)) ; </span><br><span class="line">System.out.println(p.getX());  </span><br></pre></td></tr></table></figure><p>先看看运行结果： </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">100</span><br><span class="line">100.12</span><br></pre></td></tr></table></figure><p>从结果中可以看到，我们实现了开篇中 IntegerPoint 类和 FloatPoint 类的效果。下面来看看泛型是怎么定义及使用的吧。</p><p><strong>（1）、定义泛型：Point<T></strong><br>首先，大家可以看到 Point<T>，即在类名后面加一个尖括号，括号里是一个大写字母。这里写的是 T，其实这个字母可以是任何大写字母，大家这里先记着，可以是任何大写字母，意义是相同的。<br><strong>（2）类中使用泛型</strong><br>这个 T 表示派生自 Object 类的任何类，比如 String,Integer,Double 等等。这里要注意的是，T 一定是派生于 Object 类的。为方便起见，大家可以在这里把 T 当成 String, 即 String 在类中怎么用，那 T 在类中就可以怎么用！所以下面的：定义变量，作为返回值，作为参数传入的定义就很容易理解了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义变量</span></span><br><span class="line"><span class="keyword">private</span> T x ; </span><br><span class="line"><span class="comment">//作为返回值</span></span><br><span class="line"><span class="keyword">public</span> T <span class="title function_">getX</span><span class="params">()</span>&#123; </span><br><span class="line">    <span class="keyword">return</span> x ;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">//作为参数</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setX</span><span class="params">(T x)</span>&#123;  </span><br><span class="line">    <span class="built_in">this</span>.x = x ;  </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p><strong>（3）使用泛型类</strong><br>下面是泛型类的用法：</p><p>首先，是构造一个实例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Point&lt;String&gt; p = new Point&lt;String&gt;() ; </span><br></pre></td></tr></table></figure><p>这里与普通构造类实例的不同之点在于，普通类构造<a href="https://marketing.csdn.net/p/3127db09a98e0723b83b2914d9256174?pId=2782&amp;utm_source=glcblog&amp;spm=1001.2101.3001.7020">函数</a>是这样的：Point p = new Point() ;<br>而泛型类的构造则需要在类名后添加上 <String>，即一对尖括号，中间写上要传入的类型。<br>因为我们构造时，是这样的：class Point<T>, 所以在使用的时候也要在 Point 后加上类型来定义 T 代表的意义。<br>然后在 getVar（）和 setVar（）时就没有什么特殊的了，直接调用即可。<br>从上面的使用时，明显可以看出泛型的作用，在构造泛型类的实例的时候：</p><p><strong>(4）使用泛型实现的优势</strong><br>相比我们开篇时使用 Object 的方式，有两个优点：<br>（1）、不用强制转换</p><p>(2)、在 setVar() 时如果传入类型不对，编译时会报错  </p><p>可以看到，当我们构造时使用的是 String, 而在 setVar 时，传进去 Integer 类型时，就会报错。而不是像 Object 实现方式一样，在运行时才会报强制转换错误。</p><h4 id="2、多泛型变量定义及字母规范"><a href="#2、多泛型变量定义及字母规范" class="headerlink" title="2、多泛型变量定义及字母规范"></a>2、多泛型变量定义及字母规范</h4><p><strong>（1）、多泛型变量定义</strong><br>上在我们只定义了一个泛型变量 T，那如果我们需要传进去多个泛型要怎么办呢？<br>只需要在类似下面这样就可以了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MorePoint</span>&lt;T,U&gt;&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//新添加的泛型变量 U 用法与 T 是一样的。  </span></span><br></pre></td></tr></table></figure><p><strong>（2）、字母规范</strong><br>在定义泛型类时，我们已经提到用于指定泛型的变量是一个大写字母：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span>&lt;T&gt;&#123;</span><br><span class="line"> …………</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然不是的！！！！任意一个大写字母都可以。他们的意义是完全相同的，但为了提高可读性，大家还是用有意义的字母比较好，一般来讲，在不同的情境下使用的字母意义如下：</p><ul><li>E — Element，常用在 java Collection 里，如：List<E>,Iterator<E>,Set<E></li><li>K,V — Key，Value，代表 Map 的键值对</li><li>N — Number，数字</li><li>T — Type，类型，如 String，Integer 等等</li></ul><p>如果这些还不够用，那就自己随便取吧，反正 26 个英文字母呢。<br>再重复一遍，使用哪个字母是没有特定意义的！只是为了提高可读性！！！！</p><h4 id="3、泛型接口定义及使用"><a href="#3、泛型接口定义及使用" class="headerlink" title="3、泛型接口定义及使用"></a>3、泛型接口定义及使用</h4><p>在接口上定义泛型与在类中定义泛型是一样的，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Info</span>&lt;T&gt;&#123;        <span class="comment">// 在接口上定义泛型  </span></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">getVar</span><span class="params">()</span> ; <span class="comment">// 定义抽象方法，抽象方法的返回值就是泛型类型  </span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setVar</span><span class="params">(T x)</span>;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><p>与泛型类的定义一样，也是在接口名后加尖括号；<br><strong>（1）、使用方法一：非泛型类</strong><br>但是在使用的时候，就出现问题了，我们先看看下面这个使用方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">InfoImpl</span> <span class="keyword">implements</span> <span class="title class_">Info</span>&lt;String&gt;&#123;<span class="comment">// 定义泛型接口的子类</span></span><br><span class="line">    <span class="keyword">private</span> String <span class="keyword">var</span> ;<span class="comment">// 定义属性</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">InfoImpl</span><span class="params">(String <span class="keyword">var</span>)</span>&#123;<span class="comment">// 通过构造方法设置属性内容</span></span><br><span class="line">        <span class="built_in">this</span>.setVar(<span class="keyword">var</span>) ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setVar</span><span class="params">(String <span class="keyword">var</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.<span class="keyword">var</span> = <span class="keyword">var</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getVar</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.<span class="keyword">var</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GenericsDemo24</span>&#123;</span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String arsg[])</span>&#123;</span><br><span class="line">        <span class="type">InfoImpl</span> <span class="variable">i</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InfoImpl</span>(<span class="string">&quot;harvic&quot;</span>);</span><br><span class="line">        System.out.println(i.getVar()) ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>首先，先看 InfoImpl 的定义：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">InfoImpl</span> <span class="keyword">implements</span> <span class="title class_">Info</span>&lt;String&gt;&#123;</span><br><span class="line"> …………</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要清楚的一点是 InfoImpl 不是一个泛型类！因为他类名后没有 <T>！<br>然后在在这里我们将 Info<String> 中的泛型变量 T 定义填充为了 String 类型。所以在重写时 setVar（）和 getVar（）时，IDE 会也我们直接生成 String 类型的重写函数。<br>最后在使用时, 没什么难度，传进去 String 类型的字符串来构造 InfoImpl 实例，然后调用它的函数即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GenericsDemo24</span>&#123;</span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String arsg[])</span>&#123;</span><br><span class="line">        <span class="type">InfoImpl</span> <span class="variable">i</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InfoImpl</span>(<span class="string">&quot;harvic&quot;</span>);</span><br><span class="line">        System.out.println(i.getVar()) ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>（2）、使用方法二：泛型类</strong></p><p>在方法一中，我们在类中直接把 Info<T> 接口给填充好了，但我们的类，是可以构造成泛型类的，那我们利用泛型类来构造填充泛型接口会是怎样呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Info</span>&lt;T&gt;&#123;<span class="comment">// 在接口上定义泛型</span></span><br><span class="line"><span class="keyword">public</span> T <span class="title function_">getVar</span><span class="params">()</span> ;<span class="comment">// 定义抽象方法，抽象方法的返回值就是泛型类型</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setVar</span><span class="params">(T <span class="keyword">var</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">InfoImpl</span>&lt;T&gt; <span class="keyword">implements</span> <span class="title class_">Info</span>&lt;T&gt;&#123;<span class="comment">// 定义泛型接口的子类</span></span><br><span class="line"><span class="keyword">private</span> T <span class="keyword">var</span> ;<span class="comment">// 定义属性</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">InfoImpl</span><span class="params">(T <span class="keyword">var</span>)</span>&#123;<span class="comment">// 通过构造方法设置属性内容</span></span><br><span class="line"><span class="built_in">this</span>.setVar(<span class="keyword">var</span>) ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setVar</span><span class="params">(T <span class="keyword">var</span>)</span>&#123;</span><br><span class="line"><span class="built_in">this</span>.<span class="keyword">var</span> = <span class="keyword">var</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> T <span class="title function_">getVar</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>.<span class="keyword">var</span> ;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GenericsDemo24</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String arsg[])</span>&#123;</span><br><span class="line">InfoImpl&lt;String&gt; i = <span class="keyword">new</span> <span class="title class_">InfoImpl</span>&lt;String&gt;(<span class="string">&quot;harvic&quot;</span>);</span><br><span class="line">System.out.println(i.getVar()) ;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>最关键的是构造泛型类的过程：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">InfoImpl</span>&lt;T&gt; <span class="keyword">implements</span> <span class="title class_">Info</span>&lt;T&gt;&#123;<span class="comment">// 定义泛型接口的子类</span></span><br><span class="line"><span class="keyword">private</span> T <span class="keyword">var</span> ;<span class="comment">// 定义属性</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">InfoImpl</span><span class="params">(T <span class="keyword">var</span>)</span>&#123;<span class="comment">// 通过构造方法设置属性内容</span></span><br><span class="line"><span class="built_in">this</span>.setVar(<span class="keyword">var</span>) ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setVar</span><span class="params">(T <span class="keyword">var</span>)</span>&#123;</span><br><span class="line"><span class="built_in">this</span>.<span class="keyword">var</span> = <span class="keyword">var</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> T <span class="title function_">getVar</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>.<span class="keyword">var</span> ;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个类中，我们构造了一个泛型类 InfoImpl<T>，然后把泛型变量 T 传给了 Info<T>，这说明接口和泛型类使用的都是同一个泛型变量。<br>然后在使用时，就是构造一个泛型类的实例的过程，使用过程也不变。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GenericsDemo24</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String arsg[])</span>&#123;</span><br><span class="line">Info&lt;String&gt; i = <span class="keyword">new</span> <span class="title class_">InfoImpl</span>&lt;String&gt;(<span class="string">&quot;harvic&quot;</span>);</span><br><span class="line">System.out.println(i.getVar()) ;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>使用泛型类来继承泛型接口的作用就是让用户来定义接口所使用的变量类型，而不是像方法一那样，在类中写死。<br>那我们稍微加深点难度，构造一个多个泛型变量的类，并继承自 Info 接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">InfoImpl</span>&lt;T,K,U&gt; <span class="keyword">implements</span> <span class="title class_">Info</span>&lt;U&gt;&#123;<span class="comment">// 定义泛型接口的子类</span></span><br><span class="line">     <span class="keyword">private</span> U <span class="keyword">var</span> ;</span><br><span class="line">     <span class="keyword">private</span> T x;</span><br><span class="line">     <span class="keyword">private</span> K y;</span><br><span class="line">     <span class="keyword">public</span> <span class="title function_">InfoImpl</span><span class="params">(U <span class="keyword">var</span>)</span>&#123;<span class="comment">// 通过构造方法设置属性内容</span></span><br><span class="line">         <span class="built_in">this</span>.setVar(<span class="keyword">var</span>) ;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setVar</span><span class="params">(U <span class="keyword">var</span>)</span>&#123;</span><br><span class="line">         <span class="built_in">this</span>.<span class="keyword">var</span> = <span class="keyword">var</span> ;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">public</span> U <span class="title function_">getVar</span><span class="params">()</span>&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="built_in">this</span>.<span class="keyword">var</span> ;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>在这个例子中，我们在泛型类中定义三个泛型变量 T,K,U 并且把第三个泛型变量 U 用来填充接口 Info。所以在这个例子中 Info 所使用的类型就是由 U 来决定的。<br>使用时是这样的：泛型类的基本用法，不再多讲, 代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GenericsDemo24</span>&#123;</span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String arsg[])</span>&#123;</span><br><span class="line">        InfoImpl&lt;Integer,Double,String&gt; i = <span class="keyword">new</span> <span class="title class_">InfoImpl</span>&lt;Integer,Double,String&gt;(<span class="string">&quot;harvic&quot;</span>);</span><br><span class="line">        System.out.println(i.getVar()) ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4、泛型函数定义及使用"><a href="#4、泛型函数定义及使用" class="headerlink" title="4、泛型函数定义及使用"></a><strong>4、泛型函数定义及使用</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StaticFans</span> &#123;</span><br><span class="line"><span class="comment">//静态函数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>  &lt;T&gt; <span class="keyword">void</span> <span class="title function_">StaticMethod</span><span class="params">(T a)</span>&#123;</span><br><span class="line">        Log.d(<span class="string">&quot;harvic&quot;</span>,<span class="string">&quot;StaticMethod: &quot;</span>+a.toString());</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//普通函数</span></span><br><span class="line">    <span class="keyword">public</span>  &lt;T&gt; <span class="keyword">void</span> <span class="title function_">OtherMethod</span><span class="params">(T a)</span>&#123;</span><br><span class="line">        Log.d(<span class="string">&quot;harvic&quot;</span>,<span class="string">&quot;OtherMethod: &quot;</span>+a.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面分别是静态泛型函数和常规泛型函数的定义方法，与以往方法的唯一不同点就是在返回值前加上 <T> 来表示泛型变量。其它没什么区别。<br>使用方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//静态方法</span></span><br><span class="line">StaticFans.StaticMethod(<span class="string">&quot;adfdsa&quot;</span>);<span class="comment">//使用方法一</span></span><br><span class="line">StaticFans.&lt;String&gt;StaticMethod(<span class="string">&quot;adfdsa&quot;</span>);<span class="comment">//使用方法二</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//常规方法</span></span><br><span class="line"><span class="type">StaticFans</span> <span class="variable">staticFans</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StaticFans</span>();</span><br><span class="line">staticFans.OtherMethod(<span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">123</span>));<span class="comment">//使用方法一</span></span><br><span class="line">staticFans.&lt;Integer&gt;OtherMethod(<span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">123</span>));<span class="comment">//使用方法二</span></span><br></pre></td></tr></table></figure><p>结果如下：  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">adfsa</span><br><span class="line">adfsa</span><br><span class="line">123</span><br><span class="line">123</span><br></pre></td></tr></table></figure><p>首先，我们看静态泛型函数的使用方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">StaticFans.StaticMethod(<span class="string">&quot;adfdsa&quot;</span>);<span class="comment">//使用方法一</span></span><br><span class="line">StaticFans.&lt;String&gt;StaticMethod(<span class="string">&quot;adfdsa&quot;</span>);<span class="comment">//使用方法二</span></span><br></pre></td></tr></table></figure><p>从结果中我们可以看到，这两种方法的结果是完全一样的，但他们还有些区别的，区别如下：<br>方法一，可以像普通方法一样，直接传值，任何值都可以（但必须是派生自 Object 类的类型，比如 String,Integer 等），函数会在内部根据传进去的参数来识别当前 T 的类别。但尽量不要使用这种隐式的传递方式，代码不利于阅读和维护。因为从外观根本看不出来你调用的是一个泛型函数。<br>方法二，与方法一不同的地方在于，在调用方法前加了一个 <String> 来指定传给 &lt; T &gt; 的值，如果加了这个 &lt; String &gt; 来指定参数的值的话，那 StaticMethod（）函数里所有用到的 T 类型也就是强制指定了是 String 类型。这是我们建议使用的方式。<br>同样，常规泛型函数的使用也有这两种方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">StaticFans</span> <span class="variable">staticFans</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StaticFans</span>();</span><br><span class="line">staticFans.OtherMethod(<span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">123</span>));<span class="comment">//使用方法一</span></span><br><span class="line">staticFans.&lt;Integer&gt;OtherMethod(<span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">123</span>));<span class="comment">//使用方法二</span></span><br></pre></td></tr></table></figure><p>可以看到，与平常一样，先创建类的实例，然后调用泛型函数。<br>方法一，隐式传递了 T 的类型，与上面一样，不建议这么做。<br>方法二，显示将 T 赋值为 Integer 类型，这样 OtherMethod（T a）传递过来的参数如果不是 Integer 那么编译器就会报错。<br><strong>进阶：返回值中存在泛型</strong><br>上面我们的函数中，返回值都是 void，但现实中不可能都是 void，有时，我们需要将泛型变量返回，比如下面这个函数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; List&lt;T&gt; <span class="title function_">parseArray</span><span class="params">(String response,Class&lt;T&gt; object)</span>&#123;</span><br><span class="line">    List&lt;T&gt; modelList = JSON.parseArray(response, object);</span><br><span class="line">    <span class="keyword">return</span> modelList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数返回值是 List<T> 类型。至于传入参数 Class<T> object 的意义，我们下面会讲。这里也就是想通过这个例子来告诉大家，泛型变量其实跟 String,Integer，Double 等等的类的使用上没有任何区别，T 只是一个符号，可以代表 String,Integer，Double…… 这些类的符号，在泛型函数使用时，直接把 T 看到 String,Integer，Double…… 中的任一个来写代码就可以了。唯一不同的是，要在函数定义的中在返回值前加上 &lt; T &gt; 标识泛型；</p><h4 id="5、其它用法-Class-lt-T-gt-类传递及泛型数组"><a href="#5、其它用法-Class-lt-T-gt-类传递及泛型数组" class="headerlink" title="5、其它用法: Class&lt; T &gt; 类传递及泛型数组"></a>5、其它用法: Class&lt; T &gt; 类传递及泛型数组</h4><p><strong>（1）、使用 Class&lt; T &gt; 传递泛型类 Class 对象</strong><br>有时，我们会遇到一个情况，比如，我们在使用 JSON 解析字符串的时候，代码一般是这样的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;SuccessModel&gt; <span class="title function_">parseArray</span><span class="params">(String response)</span>&#123;</span><br><span class="line">    List&lt;SuccessModel&gt; modelList = JSON.parseArray(response, SuccessModel.class);</span><br><span class="line">    <span class="keyword">return</span> modelList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中 SuccessModel 是自定义的解析类，代码如下，其实大家不用管 SuccessModel 的定义，只考虑上面的那段代码就行了。写出来 SuccessModel 的代码，只是不想大家感到迷惑，其实，这里只是 fastJson 的基本用法而已。<br>这段代码的意义就是根据 SuccessModel 解析出 List<SuccessModel> 的数组。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SuccessModel</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> success;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isSuccess</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> success;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSuccess</span><span class="params">(<span class="type">boolean</span> success)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.success = success;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>那现在，我们把下面这句组装成一个泛型函数要怎么来做呢?</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;SuccessModel&gt; <span class="title function_">parseArray</span><span class="params">(String response)</span>&#123;</span><br><span class="line">    List&lt;SuccessModel&gt; modelList = JSON.parseArray(response, SuccessModel.class);</span><br><span class="line">    <span class="keyword">return</span> modelList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先，我们应该把 SuccessModel 单独抽出来做为泛型变量，但 parseArray（）中用到的 SuccessModel.class 要怎么弄呢？<br>先来看代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; List&lt;T&gt; <span class="title function_">parseArray</span><span class="params">(String response,Class&lt;T&gt; object)</span>&#123;</span><br><span class="line">    List&lt;T&gt; modelList = JSON.parseArray(response, object);</span><br><span class="line">    <span class="keyword">return</span> modelList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意到，我们用的 Class<T> object 来传递类的 class 对象，即我们上面提到的 SuccessModel.class。<br>这是因为 Class<T> 也是一泛型，它是传来用来装载类的 class 对象的，它的定义如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">Class</span>&lt;T&gt; <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">…………</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过 Class<T> 来加载泛型的 Class 对象的问题就讲完了，下面来看看泛型数组的使用方法吧。<br><strong>（2）、定义泛型数组</strong><br>在写程序时，大家可能会遇到类似 String[] list = new String[8]; 的需求，这里可以定义 String 数组，当然我们也可以定义泛型数组，泛型数组的定义方法为 T[]，与 String[] 是一致的，下面看看用法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T[] fun1(T...arg)&#123;  <span class="comment">// 接收可变参数  </span></span><br><span class="line">       <span class="keyword">return</span> arg ;            <span class="comment">// 返回泛型数组  </span></span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">//使用</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span>&#123;  </span><br><span class="line">       Integer i[] = fun1(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>) ;</span><br><span class="line">       Integer[] result = fun1(i) ;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><p>我们先看看 定义时的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T[] fun1(T...arg)&#123;  <span class="comment">// 接收可变参数  </span></span><br><span class="line">       <span class="keyword">return</span> arg ;            <span class="comment">// 返回泛型数组  </span></span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>ScheduledExecutorService常用方法</title>
      <link href="/%E5%AE%9E%E9%99%85%E5%BC%80%E5%8F%91/Java%E5%9F%BA%E7%A1%80/ScheduledExecutorService%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/"/>
      <url>/%E5%AE%9E%E9%99%85%E5%BC%80%E5%8F%91/Java%E5%9F%BA%E7%A1%80/ScheduledExecutorService%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h4 id="ScheduledExecutorService-使用"><a href="#ScheduledExecutorService-使用" class="headerlink" title="ScheduledExecutorService 使用"></a>ScheduledExecutorService 使用</h4><h2 id="（一）定时任务的几种方案介绍"><a href="#（一）定时任务的几种方案介绍" class="headerlink" title="（一）定时任务的几种方案介绍"></a>（一）定时任务的几种方案介绍</h2><p>使用 java 做一个后台的定时任务，方案可以有如下几种：<br><strong>1、JDK 自带的 Timer<br>2、JDK1.5+ 新增的 ScheduledExecutorService<br>3、Quartz ：简单而强大的 JAVA 作业调度框架，可以支持动态的 Cron 语法</strong></p><h2 id="（二）ScheduledExecutorService-介绍"><a href="#（二）ScheduledExecutorService-介绍" class="headerlink" title="（二）ScheduledExecutorService 介绍"></a>（二）ScheduledExecutorService 介绍</h2><p>ScheduledExecutorService 出自 java 的并发包：java.util.concurrent，这个包下的很多需要探索。<br>今天我们就来使用一下 ScheduledExecutorService 实现定时任务：</p><blockquote><p>ScheduledThreadPoolExecutor 继承自 ThreadPoolExecutor。它主要用来在给定的延迟之后运 行任务，或者定期执行任务。ScheduledThreadPoolExecutor 的功能与 Timer 类似，但 ScheduledThreadPoolExecutor 功能更强大、更灵活。Timer 对应的是单个后台线程，而 ScheduledThreadPoolExecutor 可以在<strong>构造函数</strong>中指定多个对应的后台线程数。</p></blockquote><h2 id="（三）ScheduledExecutorService-的使用"><a href="#（三）ScheduledExecutorService-的使用" class="headerlink" title="（三）ScheduledExecutorService 的使用"></a>（三）ScheduledExecutorService 的使用</h2><p>ScheduledExecutorService 包括三个方法：schedule()、scheduleAtFixedRate()、scheduleWithFixedDelay()。</p><h3 id="3-1-schedule-使用"><a href="#3-1-schedule-使用" class="headerlink" title="3.1 schedule() 使用"></a>3.1 schedule() 使用</h3><p>先上代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    scheduleTest();</span><br><span class="line">    <span class="comment">//scheduleFixedRate();</span></span><br><span class="line">    <span class="comment">//scheduleWithFixedDelay();</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//schedule()的用法,可以对任务进行延迟处理</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">scheduleTest</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">ScheduledExecutorService</span> <span class="variable">scheduledExecutorService</span> <span class="operator">=</span> Executors.newScheduledThreadPool(<span class="number">1</span>);</span><br><span class="line">    <span class="comment">//获取当前时间</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">cur</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    scheduledExecutorService.schedule(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="comment">//当前任务执行时候，对应的时间</span></span><br><span class="line">            System.out.println(<span class="string">&quot;延迟了&quot;</span>+(System.currentTimeMillis() - cur) + <span class="string">&quot;ms&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,<span class="number">3000</span>, TimeUnit.MILLISECONDS);</span><br><span class="line">    scheduledExecutorService.shutdown();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可以看到 schedule() 方法下需要三个参数，分别是：一个 runnable 线程，延迟时间，时间单位。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;C:\Program Files\Java\</span></span><br><span class="line"><span class="string">延迟了3013ms</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Process finished with exit code 0</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure><p>实际情况下，run 方法体中代码执行时间延迟了 3s 执行，多出来的是建立线程花费的时间。<br>此时再加入这样的条件，如果线程中的任务需要一定的执行时间，如果再有一个延迟任务执行呢？代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    scheduleTest();</span><br><span class="line">    <span class="comment">//scheduleFixedRate();</span></span><br><span class="line">    <span class="comment">//scheduleWithFixedDelay();</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//schedule()的用法,可以对任务进行延迟处理</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">scheduleTest</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">ScheduledExecutorService</span> <span class="variable">scheduledExecutorService</span> <span class="operator">=</span> Executors.newScheduledThreadPool(<span class="number">1</span>);</span><br><span class="line">    <span class="comment">//获取当前时间</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">cur</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    scheduledExecutorService.schedule(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="comment">//当前任务执行时候，对应的时间</span></span><br><span class="line">            System.out.println(<span class="string">&quot;第一次延迟了&quot;</span>+(System.currentTimeMillis() - cur) + <span class="string">&quot;ms&quot;</span>);</span><br><span class="line">            <span class="comment">//任务执行需要时间</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,<span class="number">3000</span>, TimeUnit.MILLISECONDS);</span><br><span class="line">    scheduledExecutorService.schedule(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="comment">//当前任务执行时候，对应的时间</span></span><br><span class="line">            System.out.println(<span class="string">&quot;第二次延迟了&quot;</span>+(System.currentTimeMillis() - cur) + <span class="string">&quot;ms&quot;</span>);</span><br><span class="line">            <span class="comment">//任务执行需要时间</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,<span class="number">3000</span>, TimeUnit.MILLISECONDS);</span><br><span class="line">    scheduledExecutorService.shutdown();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>线程池中线程数量指定为 1，运行结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">第一次延迟了3017ms</span><br><span class="line">第二次延迟了6022ms</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可以看到第二个任务需要等到第一个任务执行完成以后才进行执行。等待时间为延迟时间 + 任务时间。这时，如果将线程数目改为 2，再次执行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">第一次延迟了3007ms</span><br><span class="line">第二次延迟了3007ms</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可以看到 ScheduledExecutorService 的强大之处了。可以在构造函数中指定多个对应的后台线程数，并发的运行延迟任务。</p><h3 id="3-2-scheduleFixedRate-使用"><a href="#3-2-scheduleFixedRate-使用" class="headerlink" title="3.2 scheduleFixedRate() 使用"></a>3.2 scheduleFixedRate() 使用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//scheduleAtFixedRate()的用法</span></span><br><span class="line"><span class="comment">//在schedule下，加了周期运行的条件。</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">scheduleFixedRate</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">ScheduledExecutorService</span> <span class="variable">scheduledExecutorService</span> <span class="operator">=</span> Executors.newScheduledThreadPool(<span class="number">1</span>);</span><br><span class="line">    <span class="comment">//获取当前时间</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">cur</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    scheduledExecutorService.scheduleAtFixedRate(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="comment">//当前任务执行时候，对应的时间</span></span><br><span class="line">            System.out.println(<span class="string">&quot;延迟了&quot;</span>+(System.currentTimeMillis() - cur) + <span class="string">&quot;ms&quot;</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,<span class="number">3000</span>,<span class="number">2000</span>,TimeUnit.MILLISECONDS);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>相比于 schedule() 方法，多了一个参数 period，就是可以指定周期执行。如上代码，周期为 2s。但其中的任务运行时间是 3s。结果是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&quot;C:\Program Files\Java\jdk1.8.0_101\bin</span><br><span class="line">延迟了3016ms</span><br><span class="line">延迟了6020ms</span><br><span class="line">延迟了9036ms</span><br><span class="line">延迟了12040ms</span><br><span class="line">延迟了15043ms</span><br><span class="line">延迟了18045ms</span><br><span class="line"></span><br><span class="line">Process finished with exit code -1</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>首先第一次延时 3016ms 是因为指定的 initdelay 为 3s。但后面的任务运行并不是按照 period 的周期执行，而是任务的运行时间执行。也就是说设定的周期时间不足以完成线程任务，但 scheduleFixedRate 达到设定的延迟时间了就要执行下一次。（可以从字面意思 FixedRate 固定频率理解到）。</p><h3 id="3-3scheduleWithFixedDelay-使用"><a href="#3-3scheduleWithFixedDelay-使用" class="headerlink" title="3.3scheduleWithFixedDelay() 使用"></a>3.3scheduleWithFixedDelay() 使用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//scheduleWithFixedDelay()用法</span></span><br><span class="line"><span class="comment">//也是加了周期运行的条件，但是必须是等到上一个任务结束后，进行周期循环。周期时间就是任务运行时间+delay</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">scheduleWithFixedDelay</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">ScheduledExecutorService</span> <span class="variable">scheduledExecutorService</span> <span class="operator">=</span> Executors.newScheduledThreadPool(<span class="number">1</span>);</span><br><span class="line">    <span class="comment">//获取当前时间</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">cur</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    scheduledExecutorService.scheduleWithFixedDelay(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="comment">//当前任务执行时候，对应的时间</span></span><br><span class="line">            System.out.println(<span class="string">&quot;延迟了&quot;</span>+(System.currentTimeMillis() - cur) + <span class="string">&quot;ms&quot;</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,<span class="number">3000</span>,<span class="number">2000</span>,TimeUnit.MILLISECONDS);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>相比于 scheduleFixedRate()，scheduleWithFixedDelay() 是每次都要把任务执行完成后再延迟固定时间后再执行下一次。结果如下：周期为任务运行时间 + delay（指定周期时间）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">C:\Program Files\Java\</span><br><span class="line">延迟了3015ms</span><br><span class="line">延迟了7038ms</span><br><span class="line">延迟了11060ms</span><br><span class="line">延迟了15078ms</span><br><span class="line">延迟了19101ms</span><br><span class="line"></span><br><span class="line">Process finished with exit code -1</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="四、实现原理"><a href="#四、实现原理" class="headerlink" title="四、实现原理"></a>四、实现原理</h2><p>ScheduledThreadPoolExecutor 类继承自 ThreadPoolExecutor，除了拥有普通线程池的功能之外，因为实现了 ScheduledExecutorService 接口，因而同时拥有定时器的功能。<br>首先构造方法全部是调用了父类 ThreadPoolExecutor 的。  </p><p>实例化后执行的 schedule() 方法调用了定时器，将传入的 Runnable 对象封装成 ScheduledFutureTask 对象，ScheduledFutureTask 类实现了 RunnableScheduledFuture 接口。ScheduledFutureTask 类就包含了 time 表示任务执行时间，period 表示任务执行周期等。  </p><h2 id="本地缓存的一种实现方式"><a href="#本地缓存的一种实现方式" class="headerlink" title="本地缓存的一种实现方式"></a>本地缓存的一种实现方式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//缓存实体类</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CacheEntity</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String key;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Object value;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long expireTime;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CacheUtil</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(CacheUtil.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 缓存数据</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Map&lt;String, CacheEntity&gt; CACHE_MAP = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定时器线程池，用于清理过期缓存</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">ScheduledExecutorService</span> <span class="variable">executorService</span> <span class="operator">=</span> Executors.newSingleThreadScheduledExecutor();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">// 注册一个定时任务，服务启动 1000 毫秒后，每隔 500 毫秒执行一次</span></span><br><span class="line">        <span class="type">Runnable</span> <span class="variable">task</span> <span class="operator">=</span> CacheUtil::clear;</span><br><span class="line">        executorService.scheduleAtFixedRate(task, <span class="number">1000L</span>, <span class="number">500L</span>, TimeUnit.MILLISECONDS);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加缓存</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">put</span><span class="params">(String key, Object value)</span> &#123;</span><br><span class="line">        put(key, value, <span class="number">0L</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加缓存</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">put</span><span class="params">(String key, Object value, Long expire)</span> &#123;</span><br><span class="line">        <span class="type">CacheEntity</span> <span class="variable">cacheEntity</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CacheEntity</span>();</span><br><span class="line">        cacheEntity.setKey(key);</span><br><span class="line">        cacheEntity.setValue(value);</span><br><span class="line">        <span class="keyword">if</span> (expire &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 计算过期时间</span></span><br><span class="line">            <span class="type">Long</span> <span class="variable">expireTime</span> <span class="operator">=</span> System.currentTimeMillis() + Duration.ofSeconds(expire).toMillis();</span><br><span class="line">            cacheEntity.setExpireTime(expireTime);</span><br><span class="line">        &#125;</span><br><span class="line">        CACHE_MAP.put(key, cacheEntity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">get</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (CACHE_MAP.containsKey(key)) &#123;</span><br><span class="line">            <span class="keyword">return</span> CACHE_MAP.get(key);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        CACHE_MAP.remove(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 清除过期缓存</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">clear</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (CACHE_MAP.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        CACHE_MAP.entrySet().removeIf(entityEntry -&gt; entityEntry.getValue().getExpireTime() != <span class="literal">null</span> &amp;&amp; entityEntry.getValue().getExpireTime() &gt; System.currentTimeMillis());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 实际开发 </category>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
            <tag> 实际开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>日志打印规范-continue</title>
      <link href="/Java%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83/%E6%97%A5%E5%BF%97%E6%89%93%E5%8D%B0%E8%A7%84%E8%8C%83-continue/"/>
      <url>/Java%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83/%E6%97%A5%E5%BF%97%E6%89%93%E5%8D%B0%E8%A7%84%E8%8C%83-continue/</url>
      
        <content type="html"><![CDATA[<h1 id="日志打印规范"><a href="#日志打印规范" class="headerlink" title="日志打印规范"></a>日志打印规范</h1><h2 id="一、-如何正确的打印异常的堆栈信息"><a href="#一、-如何正确的打印异常的堆栈信息" class="headerlink" title="一、 如何正确的打印异常的堆栈信息"></a>一、 如何正确的打印异常的堆栈信息</h2><hr><p>一般在 catch 到异常的时候，不要使用 e.printStackTrace() 来打印异常信息。我们使用日志框架来打印信息，一般来说，日志框架的 log 级别从低到高是：debug, info, warn, error, fatal。</p><p>对于异常，一般使用 log.error() 来打印堆栈信息。下边的三个 log 语句都打印了异常，但是写法却不一样，打印出来的效果也是不同的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">log.error(&quot;ERROR&quot;, &quot;Error found: &quot;, e);</span><br><span class="line">log.error(&quot;ERROR&quot;, &quot;Error found: &quot; + e.getMessage());</span><br><span class="line">log.error(&quot;ERROR&quot;, &quot;Error found: &quot; + e);</span><br></pre></td></tr></table></figure><p>注意：千万别用 e.getMessage() 打印错误信息，因为 e.getMessage() 的打印是属于不合理的，message 给的信息有的情况并不理想</p><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="number">1</span>/<span class="number">0</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (<span class="keyword">final</span> Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;ERROR&quot;</span>, <span class="string">&quot;Error found: &quot;</span>, e);</span><br><span class="line">            log.error(<span class="string">&quot;ERROR&quot;</span>, <span class="string">&quot;Error found: &quot;</span> + e.getMessage());</span><br><span class="line">            log.error(<span class="string">&quot;ERROR&quot;</span>, <span class="string">&quot;Error found: &quot;</span> + e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>控制台输出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">15:41:02.124 [main] ERROR cn.cgshao.log.testLombokLog - ERROR</span><br><span class="line">java.lang.ArithmeticException: / by zero</span><br><span class="line">at cn.cgshao.log.testLombokLog.<span class="built_in">test</span>(testLombokLog.java:24)</span><br><span class="line">at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</span><br><span class="line">at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)</span><br><span class="line">at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)</span><br><span class="line">at java.lang.reflect.Method.invoke(Method.java:498)</span><br><span class="line">at org.junit.runners.model.FrameworkMethod<span class="variable">$1</span>.runReflectiveCall(FrameworkMethod.java:59)</span><br><span class="line">at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)</span><br><span class="line">at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)</span><br><span class="line">at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)</span><br><span class="line">at org.junit.runners.ParentRunner<span class="variable">$3</span>.evaluate(ParentRunner.java:306)</span><br><span class="line">at org.junit.runners.BlockJUnit4ClassRunner<span class="variable">$1</span>.evaluate(BlockJUnit4ClassRunner.java:100)</span><br><span class="line">at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:366)</span><br><span class="line">at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:103)</span><br><span class="line">at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:63)</span><br><span class="line">at org.junit.runners.ParentRunner<span class="variable">$4</span>.run(ParentRunner.java:331)</span><br><span class="line">at org.junit.runners.ParentRunner<span class="variable">$1</span>.schedule(ParentRunner.java:79)</span><br><span class="line">at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:329)</span><br><span class="line">at org.junit.runners.ParentRunner.access<span class="variable">$100</span>(ParentRunner.java:66)</span><br><span class="line">at org.junit.runners.ParentRunner<span class="variable">$2</span>.evaluate(ParentRunner.java:293)</span><br><span class="line">at org.junit.runners.ParentRunner<span class="variable">$3</span>.evaluate(ParentRunner.java:306)</span><br><span class="line">at org.junit.runners.ParentRunner.run(ParentRunner.java:413)</span><br><span class="line">at org.junit.runner.JUnitCore.run(JUnitCore.java:137)</span><br><span class="line">at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:69)</span><br><span class="line">at com.intellij.rt.junit.IdeaTestRunner$Repeater<span class="variable">$1</span>.execute(IdeaTestRunner.java:38)</span><br><span class="line">at com.intellij.rt.execution.junit.TestsRepeater.repeat(TestsRepeater.java:11)</span><br><span class="line">at com.intellij.rt.junit.IdeaTestRunner<span class="variable">$Repeater</span>.startRunnerWithArgs(IdeaTestRunner.java:35)</span><br><span class="line">at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:232)</span><br><span class="line">at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:55)</span><br><span class="line">15:41:02.132 [main] ERROR cn.cgshao.log.testLombokLog - ERROR</span><br><span class="line">15:41:02.132 [main] ERROR cn.cgshao.log.testLombokLog - ERROR</span><br></pre></td></tr></table></figure><blockquote><p><strong>1、对于第一个 log 语句，可以看到堆栈信息被打印了出来。</strong></p><p><strong>2、对于第二个 log 语句，只是打印出了异常的具体信息，既没有异常类名，也没有堆栈信息。</strong></p><p><strong>3、对于第三个 log 语句，打印出了异常的类名和具体信息，但是没有打印出来堆栈信息。</strong></p></blockquote><h2 id="二、log-info-和-log-error-的区别"><a href="#二、log-info-和-log-error-的区别" class="headerlink" title="二、log.info 和 log.error 的区别"></a>二、log.info 和 log.error 的区别</h2><hr><blockquote><p><strong>log.info 是打印的普通的日志，一般以流程中转为主</strong></p><p><strong>log.error 是打印异常信息的， 用 error 要打印完整异常栈， 这样的话， 追踪错误比较方便</strong> </p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java开发规范 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>git</title>
      <link href="/git/git/"/>
      <url>/git/git/</url>
      
        <content type="html"><![CDATA[<h1 id="Git操作"><a href="#Git操作" class="headerlink" title="Git操作"></a>Git操作</h1><h2 id="一-、git-stash"><a href="#一-、git-stash" class="headerlink" title="一 、git stash"></a>一 、git stash</h2><p>其将当前未提交的修改 (即工作区和暂存区的修改) 先暂时储藏起来。</p><p>然后我们可以通过<code>git stash list</code>来查看储藏记录。之后通过<code>git stash pop</code>命令将之前最近一次储藏的修改取出来，继续之前的工作，并同时将该储藏从储藏记录列表中删除</p><h3 id="1、单次储藏及应用"><a href="#1、单次储藏及应用" class="headerlink" title="1、单次储藏及应用"></a>1、单次储藏及应用</h3><p>我们在当前分支，添加 test.md 文件。</p><p>添加 test.md 到储藏区，使之能被 git 进行追踪</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add test.md</span><br></pre></td></tr></table></figure><p>查看文件状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line">On branch master</span><br><span class="line">Your branch is up to <span class="built_in">date</span> with <span class="string">&#x27;origin/master&#x27;</span>.    </span><br><span class="line"></span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use <span class="string">&quot;git restore --staged &lt;file&gt;...&quot;</span> to unstage)</span><br><span class="line">        new file:   test.md</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>进行储藏</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git stash</span><br><span class="line"></span><br><span class="line">输出：Saved working directory and index state WIP on master: 709627d Initial commit</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>查看储藏</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git stash list</span><br><span class="line"></span><br><span class="line">输出：stash@&#123;0&#125;: WIP on master: 709627d Initial commit</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>应用最近一次储藏</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">git stash pop</span><br><span class="line"></span><br><span class="line">输出：On branch master</span><br><span class="line">Your branch is up to <span class="built_in">date</span> with <span class="string">&#x27;origin/master&#x27;</span>.</span><br><span class="line"></span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use <span class="string">&quot;git restore --staged &lt;file&gt;...&quot;</span> to unstage)</span><br><span class="line">        new file:   test.md</span><br><span class="line"></span><br><span class="line">Dropped refs/stash@&#123;0&#125; (05edd0c153191fe70ef42b9e4fdf70622d0e6831)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2、多次储藏及应用"><a href="#2、多次储藏及应用" class="headerlink" title="2、多次储藏及应用"></a>2、多次储藏及应用</h3><p>修改文件，进行储藏，重复这一步骤，再通过<code>git stash list</code>来查看这两次记录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git stash list</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line">stash@&#123;0&#125;: WIP on master: 709627d Initial commit</span><br><span class="line">stash@&#123;1&#125;: WIP on master: 709627d Initial commit</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>从上图结果中，我们发现两次储藏记录的标识信息完全一致，只有其前面的<code>index</code>有别。</p><p>git 默认按如下规则标识储藏记录 (WIP 意为 work in progess, <code>index</code>用于后面取出所对应储藏的修改)。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">stash@&#123;index&#125;: WIP on [分支名]: [最近一次的commitID] [最近一次的提交信息]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>由于我们在功能分支下的两次储藏中均未发生提交，所以其提交 ID 是一致的。</p><p>这样明显会带来问题，我们在多个储藏之间，无法明确需要应用哪个，需要标识下储藏记录。</p><p>可以通过命令<code>git stash -m [stashMessage]</code>来标记此次储藏，以便后期查看。</p><p>通过查看储藏列表的<code>index</code>的可以取出指定储藏中的修改到工作区</p><p>取出指定<code>index</code>的储藏的修改到工作区中 <code>git stash apply index</code></p><p>将指定<code>index</code>的储藏从储藏记录列表中删除 <code>git stash drop index</code></p><p>储藏记录多的话，一个个删除太麻烦，可以进行  批量删除<code>git stash clear</code></p><p>修改文件，进行储藏</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git stash -m <span class="string">&quot;change1&quot;</span> </span><br><span class="line"></span><br><span class="line">输出：Saved working directory and index state On master: change1</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>再次修改文件，进行储藏</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git stash -m <span class="string">&quot;change2&quot;</span> </span><br><span class="line"></span><br><span class="line">输出：Saved working directory and index state On master: change2</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>查看储藏</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git stash list</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line">stash@&#123;0&#125;: On master: change2</span><br><span class="line">stash@&#123;1&#125;: On master: change1</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>应用储藏，提交信息为 “change1”</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">git stash apply 1</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line">On branch master</span><br><span class="line">Your branch is up to <span class="built_in">date</span> with <span class="string">&#x27;origin/master&#x27;</span>.</span><br><span class="line"></span><br><span class="line">Changes not staged <span class="keyword">for</span> commit:</span><br><span class="line">  (use <span class="string">&quot;git add &lt;file&gt;...&quot;</span> to update what will be committed)</span><br><span class="line">  (use <span class="string">&quot;git restore &lt;file&gt;...&quot;</span> to discard changes <span class="keyword">in</span> working directory)</span><br><span class="line">        modified:   README.md</span><br><span class="line"></span><br><span class="line">no changes added to commit (use <span class="string">&quot;git add&quot;</span> and/or <span class="string">&quot;git commit -a&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>查看储藏</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git stash list</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line">stash@&#123;0&#125;: On master: change2</span><br><span class="line">stash@&#123;1&#125;: On master: change1</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>删除刚才应用的储藏</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git stash drop 1</span><br><span class="line"></span><br><span class="line">输出：Dropped refs/stash@&#123;1&#125; (9a6ae2acf53198fce4125161d28045c484f1b20b)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>查看储藏</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git stash list</span><br><span class="line"></span><br><span class="line">输出：stash@&#123;0&#125;: On master: change2</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>再添加储藏</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git stash -m <span class="string">&quot;add新change&quot;</span>  </span><br><span class="line"></span><br><span class="line">输出：Saved working directory and index state On master: add新change</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>查看储藏</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git stash list</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line">stash@&#123;0&#125;: On master: add新change</span><br><span class="line">stash@&#123;1&#125;: On master: change2</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>删除所有储藏</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git stash clear</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>查看储藏</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git stash list</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出为空，代表已经完全清除</p><p>当删除<code>index</code>为 0 项，<code>index</code>为 1 项中的<code>index</code>会变为 0。即<code>index</code>会动态从 0 开始排序的，可看如下示例。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">git stash list</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line">stash@&#123;0&#125;: On master: change2</span><br><span class="line">stash@&#123;1&#125;: On master: change1</span><br><span class="line"></span><br><span class="line">git stash drop 0   </span><br><span class="line">输出：Dropped refs/stash@&#123;0&#125; (fb3d70dea8b439cd09cce774cf622638a341af9c)</span><br><span class="line"></span><br><span class="line">git stash list</span><br><span class="line">输出：stash@&#123;0&#125;: On master: change1</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3、对特定范围文件进行储藏"><a href="#3、对特定范围文件进行储藏" class="headerlink" title="3、对特定范围文件进行储藏"></a>3、对特定范围文件进行储藏</h3><p>默认情况下，只要在 git 追踪范围的文件，均可以进行储藏。我们可以进一步区分特定范围的文件进行储藏。</p><ul><li><p><code>git stash [-u|--include-untracked]</code>：对未追踪文件也进行储藏</p></li><li><p><code>git stash [-S|--staged]</code>: 只对暂存区文件进行储藏</p></li><li><p><code>git stash [-a|--all]</code>: 对所有文件进行储藏</p></li></ul><p>提前准备好三种 git 状态不同的文件。新添加的文件（即为未追踪文件），工作区修改的文件，提交到暂存区的文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line">git status</span><br><span class="line">On branch master</span><br><span class="line">Your branch is up to <span class="built_in">date</span> with <span class="string">&#x27;origin/master&#x27;</span>.    </span><br><span class="line"></span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use <span class="string">&quot;git restore --staged &lt;file&gt;...&quot;</span> to unstage)</span><br><span class="line">        modified:   README.md </span><br><span class="line"></span><br><span class="line">Changes not staged <span class="keyword">for</span> commit:</span><br><span class="line">  (use <span class="string">&quot;git add &lt;file&gt;...&quot;</span> to update what will be committed)</span><br><span class="line">  (use <span class="string">&quot;git restore &lt;file&gt;...&quot;</span> to discard changes <span class="keyword">in</span> working directory)</span><br><span class="line">        modified:   README.en.md</span><br><span class="line"></span><br><span class="line">Untracked files:</span><br><span class="line">  (use <span class="string">&quot;git add &lt;file&gt;...&quot;</span> to include <span class="keyword">in</span> what will be committed)</span><br><span class="line">        test.md</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>对未追踪文件也进行储藏</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git stash -u</span><br><span class="line"></span><br><span class="line">输出：Saved working directory and index state WIP on master: 709627d Initial commit</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>查看文件状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line">On branch master</span><br><span class="line">Your branch is up to <span class="built_in">date</span> with <span class="string">&#x27;origin/master&#x27;</span>.</span><br><span class="line"></span><br><span class="line">nothing to commit, working tree clean</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>对刚才储藏进行应用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">git stash pop</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line">On branch master</span><br><span class="line">Your branch is up to <span class="built_in">date</span> with <span class="string">&#x27;origin/master&#x27;</span>.</span><br><span class="line"></span><br><span class="line">Changes not staged <span class="keyword">for</span> commit:</span><br><span class="line">  (use <span class="string">&quot;git add &lt;file&gt;...&quot;</span> to update what will be committed)</span><br><span class="line">  (use <span class="string">&quot;git restore &lt;file&gt;...&quot;</span> to discard changes <span class="keyword">in</span> working directory)</span><br><span class="line">        modified:   README.en.md</span><br><span class="line">        modified:   README.md   </span><br><span class="line"></span><br><span class="line">Untracked files:</span><br><span class="line">  (use <span class="string">&quot;git add &lt;file&gt;...&quot;</span> to include <span class="keyword">in</span> what will be committed)</span><br><span class="line">        test.md</span><br><span class="line"></span><br><span class="line">no changes added to commit (use <span class="string">&quot;git add&quot;</span> and/or <span class="string">&quot;git commit -a&quot;</span>)</span><br><span class="line">Dropped refs/stash@&#123;0&#125; (23b4e04af9cc34612f458648e838f552a1f99169)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>将 README.md 添加到暂存区</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git add README.md </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>查看文件状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line">On branch master</span><br><span class="line">Your branch is up to <span class="built_in">date</span> with <span class="string">&#x27;origin/master&#x27;</span>.    </span><br><span class="line"></span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use <span class="string">&quot;git restore --staged &lt;file&gt;...&quot;</span> to unstage)</span><br><span class="line">        modified:   README.md </span><br><span class="line"></span><br><span class="line">Changes not staged <span class="keyword">for</span> commit:</span><br><span class="line">  (use <span class="string">&quot;git add &lt;file&gt;...&quot;</span> to update what will be committed)</span><br><span class="line">  (use <span class="string">&quot;git restore &lt;file&gt;...&quot;</span> to discard changes <span class="keyword">in</span> working directory)</span><br><span class="line">        modified:   README.en.md</span><br><span class="line"></span><br><span class="line">Untracked files:</span><br><span class="line">  (use <span class="string">&quot;git add &lt;file&gt;...&quot;</span> to include <span class="keyword">in</span> what will be committed)</span><br><span class="line">        test.md</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>只对暂存区文件进行储藏</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git stash -S</span><br><span class="line">输出：Saved working directory and index state WIP on master: 709627d Initial commit</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>查看文件状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line">On branch master</span><br><span class="line">Your branch is up to <span class="built_in">date</span> with <span class="string">&#x27;origin/master&#x27;</span>.</span><br><span class="line"></span><br><span class="line">Changes not staged <span class="keyword">for</span> commit:</span><br><span class="line">  (use <span class="string">&quot;git add &lt;file&gt;...&quot;</span> to update what will be committed)</span><br><span class="line">  (use <span class="string">&quot;git restore &lt;file&gt;...&quot;</span> to discard changes <span class="keyword">in</span> working directory)</span><br><span class="line">        modified:   README.en.md</span><br><span class="line"></span><br><span class="line">Untracked files:</span><br><span class="line">  (use <span class="string">&quot;git add &lt;file&gt;...&quot;</span> to include <span class="keyword">in</span> what will be committed)</span><br><span class="line">        test.md</span><br><span class="line"></span><br><span class="line">no changes added to commit (use <span class="string">&quot;git add&quot;</span> and/or <span class="string">&quot;git commit -a&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>重复之前步骤。将储藏进行应用，同时将 README.md 添加到暂存区</p><p>全部文件添加到储藏区</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git stash -a</span><br><span class="line">输出：Saved working directory and index state WIP on master: 709627d Initial commit</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>查看文件状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line">On branch master</span><br><span class="line">Your branch is up to <span class="built_in">date</span> with <span class="string">&#x27;origin/master&#x27;</span>.</span><br><span class="line"></span><br><span class="line">nothing to commit, working tree clean</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>若想对<code>stash</code>命令了解更多，可以通过命令<code>git stash --help</code>查阅。</p><h2 id="二、-git-commit-—amend"><a href="#二、-git-commit-—amend" class="headerlink" title="二、 git commit —amend"></a>二、 git commit —amend</h2><p>修改最新一条commit注释<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit --amend</span><br></pre></td></tr></table></figure></p><h2 id="三、-git-rebase"><a href="#三、-git-rebase" class="headerlink" title="三、 git rebase"></a>三、 git rebase</h2><ul><li>git rebase 会把你当前分支的commit 放到公共分支的最后面, 叫变基</li><li>rebase 可以合并commit、 拆分commit 、删除commit是一条强大又危险的命令</li><li><p>如果只是 合并分支,建议使用git merge命令 不建议使用git rebase命令</p><p><a href="https://blog.csdn.net/weixin_42310154/article/details/119004977?ops_request_misc=%257B%2522request%255Fid%2522%253A%25224ed1700efa4991f4eaa3e7a31643ea7b%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=4ed1700efa4991f4eaa3e7a31643ea7b&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-6-119004977-null-null.142^v100^pc_search_result_base6&amp;utm_term=git%20rebase&amp;spm=1018.2226.3001.4187">git rebase详解</a></p></li></ul><h3 id="git-rebase-i-交互式rebase"><a href="#git-rebase-i-交互式rebase" class="headerlink" title="git rebase -i  交互式rebase"></a>git rebase -i  交互式rebase</h3><p>通过该命令可以合并commit、 拆分commit 、删除commit是一条强大又危险的命令.</p><h2 id="四、git-checkout-b-feature-origin-feature"><a href="#四、git-checkout-b-feature-origin-feature" class="headerlink" title="四、git checkout -b [feature] [origin/feature]"></a>四、git checkout -b [feature] [origin/feature]</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建分支</span></span><br><span class="line">git branch &lt;branch&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换到某分支</span></span><br><span class="line">git checkout &lt;branch&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建并切换到新分支</span></span><br><span class="line">git checkout -b &lt;branch&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 基于远程分支创建分支</span></span><br><span class="line">git checkout -b [feature] [origin/feature] </span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="五、git-remote命令"><a href="#五、git-remote命令" class="headerlink" title="五、git remote命令"></a>五、git remote命令</h2><p><code>git remote</code> 命令用来创建、查看和删除本地仓库 与 其他仓库之间的连接</p><p>remote链接更像是一种书签标记而不是与其他仓库之间的硬连接。这种标记通过一种简单的命名来代替不便使用的完整URL，而不是提供一种与仓库之间的实时通道。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列出所有远程主机</span></span><br><span class="line">git remote</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示所有远程仓库</span></span><br><span class="line">git remote -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># 限制某个远程仓库的详细信息</span></span><br><span class="line">git remote show [origin] </span><br><span class="line"></span><br><span class="line"><span class="comment"># 关联远程分支 (相当于修改./.git/config文件)</span></span><br><span class="line">git remote add &lt;name&gt; &lt;url&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除别名为&lt;name&gt;的远端仓库的关联关系</span></span><br><span class="line">git remote <span class="built_in">rm</span> &lt;name&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将别名为&lt;old-name&gt;的远端仓库的关联关系重命名为&lt;new-name&gt;。</span></span><br><span class="line">git remote rename &lt;old-name&gt; &lt;new-name&gt;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></p><h2 id="六、git-push-命令"><a href="#六、git-push-命令" class="headerlink" title="六、git push 命令"></a>六、git push 命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 标准命令</span></span><br><span class="line">git push &lt;远程主机名&gt; &lt;本地分支名&gt;:&lt;远程分支名&gt;</span><br><span class="line"><span class="comment"># 如果本地分支名与远程分支名相同，则可以省略冒号</span></span><br><span class="line">git push &lt;远程主机名&gt; &lt;本地分支名&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">#以下命令将本地的 master 分支推送到 origin 主机的 master 分支。</span></span><br><span class="line">git push origin master</span><br><span class="line"><span class="comment"># 相当于</span></span><br><span class="line">git push origin master:master</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第一次提交 </span></span><br><span class="line">git push  -u origin master  (-u 相当于 --set-upstream)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 强制推送</span></span><br><span class="line">git push --force origin master</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CompletableFuture常用方法</title>
      <link href="/Java%E5%9F%BA%E7%A1%80/CompletableFuture%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/"/>
      <url>/Java%E5%9F%BA%E7%A1%80/CompletableFuture%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="CompletableFuture-常用方法"><a href="#CompletableFuture-常用方法" class="headerlink" title="CompletableFuture 常用方法"></a>CompletableFuture 常用方法</h1><h3 id="1-创建异步任务"><a href="#1-创建异步任务" class="headerlink" title="1. 创建异步任务"></a>1. 创建异步任务</h3><h4 id="CompletableFuture-runAsync-创建一个没有返回值的异步任务。"><a href="#CompletableFuture-runAsync-创建一个没有返回值的异步任务。" class="headerlink" title="CompletableFuture.runAsync(): 创建一个没有返回值的异步任务。"></a>CompletableFuture.runAsync(): 创建一个没有返回值的异步任务。</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CompletableFuture&lt;Void&gt; runComplete = CompletableFuture.runAsync(()-&gt; System.out.println(&quot;没有返回值的异步任务&quot;)); </span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="CompletableFuture-supplyAsync-常见一个有返回值的异步任务。"><a href="#CompletableFuture-supplyAsync-常见一个有返回值的异步任务。" class="headerlink" title="CompletableFuture.supplyAsync(): 常见一个有返回值的异步任务。"></a>CompletableFuture.supplyAsync(): 常见一个有返回值的异步任务。</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CompletableFuture&lt;String&gt; supportComplete = CompletableFuture.supplyAsync(()-&gt; &quot;有返回值的异步任务&quot;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可以传入自定义的线程池执行任务:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ExecutorService executor = Executors.newCachedThreadPool(); </span><br><span class="line">CompletableFuture&lt;Void&gt; runComplete = CompletableFuture.runAsync(()-&gt; System.out.println(&quot;没有返回值的异步任务&quot;),executor); </span><br><span class="line">CompletableFuture&lt;String&gt; supportComplete = CompletableFuture.supplyAsync(()-&gt; &quot;有返回值的异步任务&quot;,executor);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-异步任务完成之后的回调"><a href="#2-异步任务完成之后的回调" class="headerlink" title="2. 异步任务完成之后的回调"></a>2. 异步任务完成之后的回调</h3><h4 id="1️⃣-thenRun-thenRunAsync"><a href="#1️⃣-thenRun-thenRunAsync" class="headerlink" title="1️⃣ thenRun/thenRunAsync"></a>1️⃣ thenRun/thenRunAsync</h4><p>thenRun 通俗点讲就是，做完一个任务后，再做第二个任务。某个任务执行完成后，执行回调方法，但是前后两个任务没有参数传递，第二个任务也没有返回值。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">CompletableFuture&lt;String&gt; supportComplete = CompletableFuture.supplyAsync(()-&gt;&#123;</span><br><span class="line">    System.out.println(&quot;有返回值的异步任务&quot;); </span><br><span class="line">    return &quot;有返回值的异步任务&quot;; </span><br><span class="line">&#125;); </span><br><span class="line">CompletableFuture&lt;Void&gt; thenRun = supportComplete.thenRun(() -&gt; System.out.println(&quot;完成任务之后的回调，没有参数也没有返回值&quot;)); </span><br><span class="line"></span><br><span class="line">System.out.println(thenRun.join());</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>thenRun/thenRunAsync 的区别</strong>：</p><p>如果你执行第一个任务的时候，传入了一个<strong>自定义线程池</strong></p><ul><li>调用 thenRun 方法执行第二个任务时，则第二个任务和第一个任务是共用同一个线程池。</li><li>调用 thenRunAsync 执行第二个任务时，则第一个任务使用的是你自己传入的线程池，第二个任务使用的是 ForkJoin 线程池。</li></ul><h4 id="2️⃣-thenAccept-thenAcceptAsync"><a href="#2️⃣-thenAccept-thenAcceptAsync" class="headerlink" title="2️⃣ thenAccept/thenAcceptAsync"></a>2️⃣ thenAccept/thenAcceptAsync</h4><p>thenAccept 和 thenAcceptAsync 指的是做完第一个任务之后，将第一个任务的返回值作为参数传到 thenAccept 方法中，thenAccept 和 thenAcceptAsync 没有返回值。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">CompletableFuture&lt;String&gt; supportComplete = CompletableFuture.supplyAsync(()-&gt; &#123; </span><br><span class="line">    System.out.println(&quot;有返回值的异步任务&quot;);</span><br><span class="line">    return &quot;有返回值的异步任务&quot;;</span><br><span class="line">&#125;); </span><br><span class="line">CompletableFuture&lt;Void&gt; thenRun = supportComplete.thenAccept((s) -&gt; System.out.println(&quot;完成任务之后的回调，有参数，参数为&quot; + s + &quot;没有返回值&quot;)); </span><br><span class="line"></span><br><span class="line">System.out.println(thenRun.join());</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>两者的区别依然是共用线程池或者是第二个任务用 <strong>ForkJoin</strong> 线程池的区别。</p><h4 id="3️⃣-thenApply-和-thenApplyAsync"><a href="#3️⃣-thenApply-和-thenApplyAsync" class="headerlink" title="3️⃣ thenApply 和 thenApplyAsync"></a>3️⃣ thenApply 和 thenApplyAsync</h4><p>thenApply 和 thenApplyAsync 指的是第一个任务执行完成后，执行第二个回调方法任务，会将该任务的执行结果，作为入参，传递到回调方法中，并且回调方法是有返回值的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">CompletableFuture&lt;String&gt; supportComplete = CompletableFuture.supplyAsync(()-&gt; &#123; </span><br><span class="line">    System.out.println(&quot;有返回值的异步任务&quot;);</span><br><span class="line">    return &quot;有返回值的异步任务&quot;; </span><br><span class="line">&#125;);</span><br><span class="line">CompletableFuture&lt;String&gt; thenRun = supportComplete.thenApplyAsync((s) -&gt; &#123; </span><br><span class="line">    System.out.println(&quot;完成任务之后的回调，有参数，参数为&quot; + s + &quot;有返回值&quot;);</span><br><span class="line">    return &quot;完成任务之后的回调，有参数，参数为&quot; + s + &quot;有返回值&quot;; </span><br><span class="line">&#125;); </span><br><span class="line"></span><br><span class="line">System.out.println(thenRun.join());</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>thenApply 和 thenApplyAsync 的区别和上面两者一样。</p><h4 id="4️⃣-exceptionally"><a href="#4️⃣-exceptionally" class="headerlink" title="4️⃣ exceptionally"></a>4️⃣ exceptionally</h4><p>exceptionally 方法表示，某个任务执行异常时，执行的回调方法; 并且有抛出异常作为参数，传递到回调方法。参数为异常，有返回值。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">CompletableFuture&lt;String&gt; supportComplete = CompletableFuture.supplyAsync(()-&gt; &#123; </span><br><span class="line">    System.out.println(&quot;有返回值的异步任务&quot;); </span><br><span class="line">    throw new RuntimeException(); </span><br><span class="line">&#125;); </span><br><span class="line">CompletableFuture&lt;String&gt; exceptionFuture = supportComplete.exceptionally((e) -&gt; &#123; </span><br><span class="line">    e.printStackTrace();</span><br><span class="line">    return &quot;程序出现异常&quot;; </span><br><span class="line">&#125;); </span><br><span class="line">System.out.println(exceptionFuture.get());</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="5️⃣-whenComplete"><a href="#5️⃣-whenComplete" class="headerlink" title="5️⃣ whenComplete"></a>5️⃣ whenComplete</h4><p>whenComplete 方法表示，某个任务执行完成后，执行的回调方法，无返回值；并且 whenComplete 方法的参数是上个任务的结果。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">CompletableFuture&lt;String&gt; supportComplete = CompletableFuture.supplyAsync(()-&gt; &#123; </span><br><span class="line">    System.out.println(&quot;有返回值的异步任务&quot;); </span><br><span class="line">    return &quot;有返回值的异步任务&quot;; </span><br><span class="line">&#125;); </span><br><span class="line">CompletableFuture&lt;String&gt; whenComplete = supportComplete.whenComplete((e,throwable) -&gt; &#123;</span><br><span class="line">    System.out.println(e); </span><br><span class="line">&#125;); </span><br><span class="line">System.out.println(whenComplete.get());</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>whenComplete 接收的参数为两个，第一个是上个任务的结果，另一个是异常。因此即使主任务有异常，依然会执行。</p><h4 id="6️⃣：handle"><a href="#6️⃣：handle" class="headerlink" title="6️⃣：handle"></a>6️⃣：handle</h4><p>handle 和 whenComplete 差不多，都是表示某个任务执行完成后，执行的回调方法，handle 方法的参数时上个任务的结果，但是 handle 是有返回值的，whenComplete 没有返回值。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">CompletableFuture&lt;String&gt; supportComplete = CompletableFuture.supplyAsync(()-&gt; &#123; </span><br><span class="line">    System.out.println(&quot;当前线程名称为:&quot; + Thread.currentThread().getName()); </span><br><span class="line">    System.out.println(&quot;有返回值的异步任务&quot;); </span><br><span class="line">    return &quot;有返回值的异步任务&quot;; </span><br><span class="line">&#125;);</span><br><span class="line">CompletableFuture&lt;String&gt; handle = supportComplete.handle((e,throwable) -&gt; &#123; </span><br><span class="line">    System.out.println(&quot;当前线程名称为:&quot; + Thread.currentThread().getName());</span><br><span class="line">    System.out.println(e); </span><br><span class="line">    return &quot;有返回值&quot;; </span><br><span class="line">&#125;); </span><br><span class="line">System.out.println(handle.get());</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-多任务组合处理："><a href="#3-多任务组合处理：" class="headerlink" title="3. 多任务组合处理："></a>3. 多任务组合处理：</h3><h4 id="1️⃣：AND-组合关系：thenCombine-thenAcceptBoth-runAfterBoth"><a href="#1️⃣：AND-组合关系：thenCombine-thenAcceptBoth-runAfterBoth" class="headerlink" title="1️⃣：AND 组合关系：thenCombine / thenAcceptBoth / runAfterBoth"></a>1️⃣：AND 组合关系：thenCombine / thenAcceptBoth / runAfterBoth</h4><p>三者都表示：将两个 CompletableFuture 组合起来，只有这两个都正常执行完了，才会执行某个任务。</p><p>区别在于：</p><ul><li>thenCombine：会将两个任务的执行结果作为方法入参，传递到指定方法中，且有返回值</li><li>thenAcceptBoth: 会将两个任务的执行结果作为方法入参，传递到指定方法中，且无返回值</li><li>runAfterBoth 不会把执行结果当做方法入参，且没有返回值。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">thenCombine/ thenCombineAsync实例</span><br><span class="line"></span><br><span class="line">CompletableFuture&lt;String&gt; completableFuture = CompletableFuture.supplyAsync(()-&gt;&quot;第一个异步任务&quot;);</span><br><span class="line">ExecutorService executorService = Executors.newFixedThreadPool(10); </span><br><span class="line">CompletableFuture&lt;String&gt; supportComplete = CompletableFuture.supplyAsync(() -&gt; &quot;第二个异步任务&quot;,executorService) </span><br><span class="line">.thenCombineAsync(completableFuture,(s, w) -&gt; &#123; </span><br><span class="line">    System.out.println(w); </span><br><span class="line">    System.out.println(s); </span><br><span class="line">    return &quot;两个异步任务的组合&quot;; &#125;,executorService); </span><br><span class="line">System.out.println(supportComplete.get()); </span><br><span class="line">executorService.shutdown();</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="2️⃣-OR-组合的关系：applyToEither-acceptEither-runAfterEither"><a href="#2️⃣-OR-组合的关系：applyToEither-acceptEither-runAfterEither" class="headerlink" title="2️⃣ OR 组合的关系：applyToEither / acceptEither / runAfterEither"></a>2️⃣ OR 组合的关系：applyToEither / acceptEither / runAfterEither</h4><p>三者都表示：将两个 CompletableFuture 组合起来，只要其中一个执行完了, 就会执行某个任务。感觉业务应用场景不会很多</p><p>区别在于：</p><ul><li>applyToEither：会将已经执行完成的任务，作为方法入参，传递到指定方法中，且有返回值</li><li>acceptEither: 会将已经执行完成的任务，作为方法入参，传递到指定方法中，且无返回值</li><li>runAfterEither：不会把执行结果当做方法入参，且没有返回值。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">CompletableFuture&lt;String&gt; completableFuture = CompletableFuture.supplyAsync(()-&gt;&#123; </span><br><span class="line">    try &#123; </span><br><span class="line">        Thread.sleep(2000);</span><br><span class="line">    &#125; catch (InterruptedException e) &#123; </span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    return &quot;第一个异步任务&quot;; </span><br><span class="line">&#125;); </span><br><span class="line">ExecutorService executorService = Executors.newFixedThreadPool(10); </span><br><span class="line">CompletableFuture.supplyAsync(() -&gt; &quot;第二个异步任务&quot;,executorService) </span><br><span class="line">        .acceptEitherAsync(completableFuture, System.out::println,executorService); </span><br><span class="line">executorService.shutdown();</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3️⃣-AllOf"><a href="#3️⃣-AllOf" class="headerlink" title="3️⃣ AllOf"></a>3️⃣ AllOf</h3><p>所有任务都执行完成后，才执行 allOf 返回的 CompletableFuture。如果任意一个任务异常，allOf 的 CompletableFuture，执行 get 方法，会抛出异常。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CompletableFuture&lt;Void&gt; completableFuture = CompletableFuture.runAsync(()-&gt;&#123; System.out.println(&quot;第一个异步任务执行完了&quot;); &#125;);</span><br><span class="line">CompletableFuture&lt;Void&gt; runAsync = CompletableFuture.runAsync(() -&gt; &#123; System.out.println(&quot;第二个异步任务执行完了&quot;); &#125;); </span><br><span class="line">CompletableFuture.allOf(completableFuture,runAsync).whenComplete((a,b) -&gt; &#123; </span><br><span class="line">    System.out.println(&quot;finish&quot;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="4️⃣-AnyOf"><a href="#4️⃣-AnyOf" class="headerlink" title="4️⃣ AnyOf"></a>4️⃣ AnyOf</h4><p>任意一个任务执行完，就执行 anyOf 返回的 CompletableFuture。如果执行的任务异常，anyOf 的 CompletableFuture，执行 get 方法，会抛出异常。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">CompletableFuture&lt;Void&gt; completableFuture = CompletableFuture.runAsync(()-&gt;&#123; </span><br><span class="line">    try &#123; </span><br><span class="line">        Thread.sleep(2000);</span><br><span class="line">    &#125; catch (InterruptedException e) &#123; </span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; </span><br><span class="line">    System.out.println(&quot;第一个异步任务执行完了&quot;); </span><br><span class="line">&#125;); </span><br><span class="line">CompletableFuture&lt;Void&gt; runAsync = CompletableFuture.runAsync(() -&gt; &#123; </span><br><span class="line">    System.out.println(&quot;第二个异步任务执行完了&quot;); </span><br><span class="line">&#125;); </span><br><span class="line">CompletableFuture.anyOf(completableFuture,runAsync).whenComplete((a,b) -&gt; &#123; </span><br><span class="line">    System.out.println(&quot;finish&quot;); </span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="5️⃣-thenCompose"><a href="#5️⃣-thenCompose" class="headerlink" title="5️⃣ thenCompose"></a>5️⃣ thenCompose</h4><p>thenCompose 方法会在某个任务执行完成后，将该任务的执行结果, 作为方法入参, 去执行指定的方法。该方法会返回一个新的 CompletableFuture 实例</p><ul><li>如果该 CompletableFuture 实例的 result 不为 null，则返回一个基于该 result 新的 CompletableFuture 实例；</li><li>如果该 CompletableFuture 实例为 null，然后就执行这个新任务</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">CompletableFuture&lt;String&gt; completableFuture = CompletableFuture.completedFuture(&quot;第一个任务&quot;);</span><br><span class="line">CompletableFuture&lt;String&gt; stringCompletableFuture = CompletableFuture.supplyAsync(() -&gt; &quot;第二个任务&quot;) </span><br><span class="line">.thenCompose(data -&gt; &#123; </span><br><span class="line">    System.out.println(data); </span><br><span class="line">    return completableFuture; </span><br><span class="line">&#125;); </span><br><span class="line">System.out.println(stringCompletableFuture.get());</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="4-注意事项"><a href="#4-注意事项" class="headerlink" title="4. 注意事项"></a>4. 注意事项</h3><h4 id="1️⃣-Future-需要获取返回值，才能获取异常信息"><a href="#1️⃣-Future-需要获取返回值，才能获取异常信息" class="headerlink" title="1️⃣ Future 需要获取返回值，才能获取异常信息"></a>1️⃣ Future 需要获取返回值，才能获取异常信息</h4><p>Future 需要获取返回值，才能获取到异常信息。如果不加 get()/join() 方法，看不到异常信息。</p><h4 id="2️⃣CompletableFuture-的-get-方法是阻塞的。"><a href="#2️⃣CompletableFuture-的-get-方法是阻塞的。" class="headerlink" title="2️⃣CompletableFuture 的 get() 方法是阻塞的。"></a>2️⃣CompletableFuture 的 get() 方法是阻塞的。</h4><p>如果使用它来获取异步调用的返回值，需要添加超时时间~</p><p>// 反例  CompletableFuture.get(); // 正例 CompletableFuture.get(5, TimeUnit.SECONDS);</p><h4 id="3️⃣默认线程池的注意点"><a href="#3️⃣默认线程池的注意点" class="headerlink" title="3️⃣默认线程池的注意点"></a>3️⃣默认线程池的注意点</h4><p>CompletableFuture 代码中又使用了默认的线程池，处理的线程个数是电脑 CPU 核数 - 1。在大量请求过来的时候，处理逻辑复杂的话，响应会很慢。一般建议使用自定义线程池，优化线程池配置参数。</p><h4 id="4️⃣自定义线程池时，注意饱和策略"><a href="#4️⃣自定义线程池时，注意饱和策略" class="headerlink" title="4️⃣自定义线程池时，注意饱和策略"></a>4️⃣自定义线程池时，注意饱和策略</h4><p>CompletableFuture 的 get() 方法是阻塞的，我们一般建议使用 future.get(3, TimeUnit.SECONDS)。并且一般建议使用自定义线程池。</p><p>但是如果线程池拒绝策略是 DiscardPolicy 或者 DiscardOldestPolicy，当线程池饱和时，会直接丢弃任务，不会抛弃异常。因此建议，CompletableFuture 线程池策略最好使用 AbortPolicy，然后耗时的异步线程，做好线程池隔离哈。</p>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
            <tag> CompletableFuture </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CompletableFuture入门</title>
      <link href="/Java%E5%9F%BA%E7%A1%80/CompletableFuture%E5%85%A5%E9%97%A8/"/>
      <url>/Java%E5%9F%BA%E7%A1%80/CompletableFuture%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="Java-8-CompletableFuture-教程"><a href="#Java-8-CompletableFuture-教程" class="headerlink" title="Java 8 CompletableFuture 教程"></a>Java 8 CompletableFuture 教程</h1><hr><blockquote><p>原文链接：<a href="https://www.callicoder.com/java-8-completablefuture-tutorial/">https://www.callicoder.com/java-8-completablefuture-tutorial/</a></p></blockquote><h3 id="什么是-CompletableFuture？"><a href="#什么是-CompletableFuture？" class="headerlink" title="什么是 CompletableFuture？"></a>什么是 CompletableFuture？</h3><p>在 Java 中 CompletableFuture 用于异步编程，异步编程是编写非阻塞的代码，运行的任务在一个单独的线程，与主线程隔离，并且会通知主线程它的进度，成功或者失败。</p><p>在这种方式中，主线程不会被阻塞，不需要一直等到子线程完成。主线程可以并行的执行其他任务。</p><p>使用这种并行方式，可以极大的提高程序的性能。</p><h3 id="Future-vs-CompletableFuture"><a href="#Future-vs-CompletableFuture" class="headerlink" title="Future vs CompletableFuture"></a>Future vs CompletableFuture</h3><p>CompletableFuture 是 <a href="https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/Future.html">Future API</a> 的扩展。</p><p>Future 被用于作为一个异步计算结果的引用。提供一个 <code>isDone()</code> 方法来检查计算任务是否完成。当任务完成时，<code>get()</code> 方法用来接收计算任务的结果。</p><p>从 <a href="https://www.callicoder.com/java-callable-and-future-tutorial/">Callbale 和 Future 教程</a>可以学习更多关于 Future 知识.</p><p>Future API 是非常好的 Java 异步编程进阶，但是它缺乏一些非常重要和有用的特性。</p><h3 id="Future-的局限性"><a href="#Future-的局限性" class="headerlink" title="Future 的局限性"></a>Future 的局限性</h3><ol><li>不能手动完成 当你写了一个函数，用于通过一个远程 API 获取一个电子商务产品最新价格。因为这个 API 太耗时，你把它允许在一个独立的线程中，并且从你的函数中返回一个 Future。现在假设这个 API 服务宕机了，这时你想通过该产品的最新缓存价格手工完成这个 Future 。你会发现无法这样做。</li><li>Future 的结果在非阻塞的情况下，不能执行更进一步的操作 Future 不会通知你它已经完成了，它提供了一个阻塞的 <code>get()</code> 方法通知你结果。你无法给 Future 植入一个回调函数，当 Future 结果可用的时候，用该回调函数自动的调用 Future 的结果。</li><li>多个 Future 不能串联在一起组成链式调用 有时候你需要执行一个长时间运行的计算任务，并且当计算任务完成的时候，你需要把它的计算结果发送给另外一个长时间运行的计算任务等等。你会发现你无法使用 Future 创建这样的一个工作流。</li><li>不能组合多个 Future 的结果 假设你有 10 个不同的 Future，你想并行的运行，然后在它们运行未完成后运行一些函数。你会发现你也无法使用 Future 这样做。</li><li>没有异常处理 Future API 没有任务的异常处理结构居然有如此多的限制，幸好我们有 CompletableFuture，你可以使用 CompletableFuture 达到以上所有目的。</li></ol><p>CompletableFuture 实现了 <code>Future</code> 和 <code>CompletionStage</code>接口，并且提供了许多关于创建，链式调用和组合多个 Future 的便利方法集，而且有广泛的异常处理支持。</p><h3 id="创建-CompletableFuture"><a href="#创建-CompletableFuture" class="headerlink" title="创建 CompletableFuture"></a>创建 CompletableFuture</h3><p><strong>1. 简单的例子</strong> 可以使用如下无参构造函数简单的创建 CompletableFuture：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CompletableFuture&lt;String&gt; completableFuture = <span class="keyword">new</span> <span class="title class_">CompletableFuture</span>&lt;&gt;();</span><br></pre></td></tr></table></figure><p>这是一个最简单的 CompletableFuture，想获取 CompletableFuture 的结果可以使用 <code>CompletableFuture.get()</code> 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> completableFuture.get()</span><br></pre></td></tr></table></figure><p><code>get()</code> 方法会一直阻塞直到 Future 完成。因此，以上的调用将被永远阻塞，因为该 Future 一直不会完成。</p><p>你可以使用 <code>CompletableFuture.complete()</code> 手工的完成一个 Future：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">completableFuture.complete(<span class="string">&quot;Future&#x27;s Result&quot;</span>)</span><br></pre></td></tr></table></figure><p>所有等待这个 Future 的客户端都将得到一个指定的结果，并且 <code>completableFuture.complete()</code> 之后的调用将被忽略。</p><p><strong>2. 使用 <code>runAsync()</code> 运行异步计算</strong> 如果你想异步的运行一个后台任务并且不想改任务返回任务东西，这时候可以使用 <code>CompletableFuture.runAsync()</code>方法，它持有一个 <a href="https://docs.oracle.com/javase/7/docs/api/java/lang/Runnable.html">Runnable</a> 对象，并返回 <code>CompletableFuture&lt;Void&gt;</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Run a task specified by a Runnable Object asynchronously.</span></span><br><span class="line">CompletableFuture&lt;Void&gt; future = CompletableFuture.runAsync(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// Simulate a long-running Job</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;I&#x27;ll run in a separate thread than the main thread.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Block and wait for the future to complete</span></span><br><span class="line">future.get()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>你也可以以 <a href="https://so.csdn.net/so/search?q=lambda&amp;spm=1001.2101.3001.7020">lambda</a> 表达式的形式传入 Runnable 对象</p><p><strong>3. 使用 <code>supplyAsync()</code> 运行一个异步任务并且返回结果</strong> 当任务不需要返回任何东西的时候， <code>CompletableFuture.runAsync()</code> 非常有用。但是如果你的后台任务需要返回一些结果应该要怎么样？</p><p><code>CompletableFuture.supplyAsync()</code> 就是你的选择。它持有<code>supplier&lt;T&gt;</code> 并且返回<code>CompletableFuture&lt;T&gt;</code>，<code>T</code> 是通过调用 传入的 supplier 取得的值的类型。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Run a task specified by a Supplier object asynchronously</span></span><br><span class="line">CompletableFuture&lt;String&gt; future = CompletableFuture.supplyAsync(<span class="keyword">new</span> <span class="title class_">Supplier</span>&lt;String&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">get</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Result of the asynchronous computation&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Block and get the result of the Future</span></span><br><span class="line"><span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> future.get();</span><br><span class="line">System.out.println(result);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>Supplier&lt;T&gt;</code> 是一个简单的函数式接口，表示 supplier 的结果。它有一个<code>get()</code>方法，该方法可以写入你的后台任务中，并且返回结果。</p><p>你可以使用 lambda 表达式使得上面的示例更加简明：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Using Lambda Expression</span></span><br><span class="line">CompletableFuture&lt;String&gt; future = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Result of the asynchronous computation&quot;</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p><strong>一个关于 Executor 和 Thread Pool 笔记</strong> 你可能想知道，我们知道<code>runAsync()</code>和<code>supplyAsync()</code>方法在单独的线程中执行他们的任务。但是我们不会永远只创建一个线程。 CompletableFuture 可以从全局的 <a href="https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ForkJoinPool.html#commonPool--">ForkJoinPool.commonPool()</a> 获得一个线程中执行这些任务。 但是你也可以创建一个线程池并传给<code>runAsync()</code>和<code>supplyAsync()</code>方法来让他们从线程池中获取一个线程执行它们的任务。 CompletableFuture API 的所有方法都有两个变体 - 一个接受<code>Executor</code>作为参数，另一个不这样：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Variations of runAsync() and supplyAsync() methods</span></span><br><span class="line"><span class="keyword">static</span> CompletableFuture&lt;Void&gt;  <span class="title function_">runAsync</span><span class="params">(Runnable runnable)</span></span><br><span class="line"><span class="keyword">static</span> CompletableFuture&lt;Void&gt;  <span class="title function_">runAsync</span><span class="params">(Runnable runnable, Executor executor)</span></span><br><span class="line"><span class="keyword">static</span> &lt;U&gt; CompletableFuture&lt;U&gt; <span class="title function_">supplyAsync</span><span class="params">(Supplier&lt;U&gt; supplier)</span></span><br><span class="line"><span class="keyword">static</span> &lt;U&gt; CompletableFuture&lt;U&gt; <span class="title function_">supplyAsync</span><span class="params">(Supplier&lt;U&gt; supplier, Executor executor)</span></span><br></pre></td></tr></table></figure><p>创建一个线程池，并传递给其中一个方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Executor</span> <span class="variable">executor</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">10</span>);</span><br><span class="line">CompletableFuture&lt;String&gt; future = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Result of the asynchronous computation&quot;</span>;</span><br><span class="line">&#125;, executor);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="在-CompletableFuture-转换和运行"><a href="#在-CompletableFuture-转换和运行" class="headerlink" title="在 CompletableFuture 转换和运行"></a>在 CompletableFuture 转换和运行</h3><p><code>CompletableFuture.get()</code>方法是阻塞的。它会一直等到 Future 完成并且在完成后返回结果。 但是，这是我们想要的吗？对于构建异步系统，我们应该附上一个回调给 CompletableFuture，当 Future 完成的时候，自动的获取结果。 如果我们不想等待结果返回，我们可以把需要等待 Future 完成执行的逻辑写入到回调函数中。</p><p>可以使用 <code>thenApply()</code>, <code>thenAccept()</code> 和<code>thenRun()</code>方法附上一个回调给 CompletableFuture。</p><p><strong>1. thenApply()</strong> 可以使用 <code>thenApply()</code> 处理和改变 CompletableFuture 的结果。持有一个<code>Function&lt;R,T&gt;</code>作为参数。<code>Function&lt;R,T&gt;</code>是一个简单的函数式接口，接受一个 T 类型的参数，产出一个 R 类型的结果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Create a CompletableFuture</span></span><br><span class="line">CompletableFuture&lt;String&gt; whatsYourNameFuture = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">       TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">   &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">       <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(e);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> <span class="string">&quot;Rajeev&quot;</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Attach a callback to the Future using thenApply()</span></span><br><span class="line">CompletableFuture&lt;String&gt; greetingFuture = whatsYourNameFuture.thenApply(name -&gt; &#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="string">&quot;Hello &quot;</span> + name;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Block and get the result of the future.</span></span><br><span class="line">System.out.println(greetingFuture.get()); <span class="comment">// Hello Rajeev</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>你也可以通过附加一系列的<code>thenApply()</code>在回调方法 在 CompletableFuture 写一个连续的转换。这样的话，结果中的一个 <code>thenApply</code>方法就会传递给该系列的另外一个 <code>thenApply</code>方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">CompletableFuture&lt;String&gt; welcomeText = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">       <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Rajeev&quot;</span>;</span><br><span class="line">&#125;).thenApply(name -&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Hello &quot;</span> + name;</span><br><span class="line">&#125;).thenApply(greeting -&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> greeting + <span class="string">&quot;, Welcome to the CalliCoder Blog&quot;</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">System.out.println(welcomeText.get());</span><br><span class="line"><span class="comment">// Prints - Hello Rajeev, Welcome to the CalliCoder Blog</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>2. thenAccept() 和 thenRun()</strong> 如果你不想从你的回调函数中返回任何东西，仅仅想在 Future 完成后运行一些代码片段，你可以使用<code>thenAccept()</code>和 <code>thenRun()</code>方法，这些方法经常在调用链的最末端的最后一个回调函数中使用。 <code>CompletableFuture.thenAccept()</code>持有一个<code>Consumer&lt;T&gt;</code>，返回一个<code>CompletableFuture&lt;Void&gt;</code>。它可以访问<code>CompletableFuture</code>的结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// thenAccept() example</span></span><br><span class="line">CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line"><span class="keyword">return</span> ProductService.getProductDetail(productId);</span><br><span class="line">&#125;).thenAccept(product -&gt; &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Got product detail from remote service &quot;</span> + product.getName())</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>虽然<code>thenAccept()</code>可以访问 CompletableFuture 的结果，但<code>thenRun()</code>不能访 Future 的结果，它持有一个 Runnable 返回 CompletableFuture：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// thenRun() example</span></span><br><span class="line">CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">    <span class="comment">// Run some computation  </span></span><br><span class="line">&#125;).thenRun(() -&gt; &#123;</span><br><span class="line">    <span class="comment">// Computation Finished.</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p><strong>异步回调方法的笔记</strong> CompletableFuture 提供的所有回调方法都有两个变体： <code>// thenApply() variants &lt;U&gt; CompletableFuture&lt;U&gt; thenApply(Function&lt;? super T,? extends U&gt; fn) &lt;U&gt; CompletableFuture&lt;U&gt; thenApplyAsync(Function&lt;? super T,? extends U&gt; fn) &lt;U&gt; CompletableFuture&lt;U&gt; thenApplyAsync(Function&lt;? super T,? extends U&gt; fn, Executor executor)</code> 这些异步回调变体通过在独立的线程中执行回调任务帮助你进一步执行并行计算。 以下示例：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">       TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Some Result&quot;</span></span><br><span class="line">&#125;).thenApply(result -&gt; &#123;</span><br><span class="line">    <span class="comment">/* </span></span><br><span class="line"><span class="comment">      Executed in the same thread where the supplyAsync() task is executed</span></span><br><span class="line"><span class="comment">      or in the main thread If the supplyAsync() task completes immediately (Remove sleep() call to verify)</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Processed Result&quot;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在以上示例中，在<code>thenApply()</code>中的任务和在<code>supplyAsync()</code>中的任务执行在相同的线程中。任何<code>supplyAsync()</code>立即执行完成, 那就是执行在主线程中（尝试删除 sleep 测试下）。 为了控制执行回调任务的线程，你可以使用异步回调。如果你使用<code>thenApplyAsync()</code>回调，将从<code>ForkJoinPool.commonPool()</code>获取不同的线程执行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Some Result&quot;</span></span><br><span class="line">&#125;).thenApplyAsync(result -&gt; &#123;</span><br><span class="line">    <span class="comment">// Executed in a different thread from ForkJoinPool.commonPool()</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Processed Result&quot;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>此外，如果你传入一个<code>Executor</code>到<code>thenApplyAsync()</code>回调中，，任务将从 Executor 线程池获取一个线程执行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Executor</span> <span class="variable">executor</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">2</span>);</span><br><span class="line">CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Some result&quot;</span></span><br><span class="line">&#125;).thenApplyAsync(result -&gt; &#123;</span><br><span class="line">    <span class="comment">// Executed in a thread obtained from the executor</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Processed Result&quot;</span></span><br><span class="line">&#125;, executor);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="组合两个-CompletableFuture"><a href="#组合两个-CompletableFuture" class="headerlink" title="组合两个 CompletableFuture"></a>组合两个 CompletableFuture</h3><p><strong>1. 使用 <code>thenCompose()</code>组合两个独立的 future</strong> 假设你想从一个远程 API 中获取一个用户的详细信息，一旦用户信息可用，你想从另外一个服务中获取他的贷方。 考虑下以下两个方法<code>getUserDetail()</code>和<code>getCreditRating()</code>的实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">CompletableFuture&lt;User&gt; <span class="title function_">getUsersDetail</span><span class="params">(String userId)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">UserService.getUserDetails(userId);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">CompletableFuture&lt;Double&gt; <span class="title function_">getCreditRating</span><span class="params">(User user)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">CreditRatingService.getCreditRating(user);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>现在让我们弄明白当使用了<code>thenApply()</code>后是否会达到我们期望的结果 -</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CompletableFuture&lt;CompletableFuture&lt;Double&gt;&gt; result = getUserDetail(userId)</span><br><span class="line">.thenApply(user -&gt; getCreditRating(user));</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在此示例中，<code>Supplier</code>函数传入<code>thenApply</code>将返回一个简单的值，但是在本例中，将返回一个 CompletableFuture。以上示例的最终结果是一个嵌套的 CompletableFuture。 如果你想获取最终的结果给最顶层 future，使用 <code>thenCompose()</code>方法代替 -</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CompletableFuture&lt;Double&gt; result = getUserDetail(userId)</span><br><span class="line">.thenCompose(user -&gt; getCreditRating(user));</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>因此，规则就是 - 如果你的回调函数返回一个 CompletableFuture，但是你想从 CompletableFuture 链中获取一个直接合并后的结果，这时候你可以使用<code>thenCompose()</code>。</p><p><strong>2. 使用<code>thenCombine()</code>组合两个独立的 future</strong> ，<code>thenCompose()</code>被用于当一个 future 依赖另外一个 future 的时候用来组合两个 future。<code>thenCombine()</code>被用来当两个独立的<code>Future</code>都完成的时候，用来做一些事情。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">&quot;Retrieving weight.&quot;</span>);</span><br><span class="line">CompletableFuture&lt;Double&gt; weightInKgFuture = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">       <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">65.0</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;Retrieving height.&quot;</span>);</span><br><span class="line">CompletableFuture&lt;Double&gt; heightInCmFuture = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">       <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">177.8</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;Calculating BMI.&quot;</span>);</span><br><span class="line">CompletableFuture&lt;Double&gt; combinedFuture = weightInKgFuture</span><br><span class="line">        .thenCombine(heightInCmFuture, (weightInKg, heightInCm) -&gt; &#123;</span><br><span class="line">    <span class="type">Double</span> <span class="variable">heightInMeter</span> <span class="operator">=</span> heightInCm/<span class="number">100</span>;</span><br><span class="line">    <span class="keyword">return</span> weightInKg/(heightInMeter*heightInMeter);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;Your BMI is - &quot;</span> + combinedFuture.get());</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>当两个 Future 都完成的时候，传给 ``thenCombine() 的回调函数将被调用。</p><h3 id="组合多个-CompletableFuture"><a href="#组合多个-CompletableFuture" class="headerlink" title="组合多个 CompletableFuture"></a>组合多个 CompletableFuture</h3><p>我们使用<code>thenCompose()</code>和 <code>thenCombine()</code>把两个 CompletableFuture 组合在一起。现在如果你想组合任意数量的 CompletableFuture，应该怎么做？我们可以使用以下两个方法组合任意数量的 CompletableFuture。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> CompletableFuture&lt;Void&gt; <span class="title function_">allOf</span><span class="params">(CompletableFuture&lt;?&gt;... cfs)</span></span><br><span class="line"><span class="keyword">static</span> CompletableFuture&lt;Object&gt; <span class="title function_">anyOf</span><span class="params">(CompletableFuture&lt;?&gt;... cfs)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>1. CompletableFuture.allOf()</strong> <code>CompletableFuture.allOf</code>的使用场景是当你一个列表的独立 future，并且你想在它们都完成后并行的做一些事情。</p><p>假设你想下载一个网站的 100 个不同的页面。你可以串行的做这个操作，但是这非常消耗时间。因此你想写一个函数，传入一个页面链接，返回一个 CompletableFuture，异步的下载页面内容。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CompletableFuture&lt;String&gt; <span class="title function_">downloadWebPage</span><span class="params">(String pageLink)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line"><span class="comment">// Code to download and return the web page&#x27;s content</span></span><br><span class="line">&#125;);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>现在，当所有的页面已经下载完毕，你想计算包含关键字<code>CompletableFuture</code>页面的数量。可以使用<code>CompletableFuture.allOf()</code>达成目的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; webPageLinks = Arrays.asList(...)<span class="comment">// A list of 100 web page links</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Download contents of all the web pages asynchronously</span></span><br><span class="line">List&lt;CompletableFuture&lt;String&gt;&gt; pageContentFutures = webPageLinks.stream()</span><br><span class="line">        .map(webPageLink -&gt; downloadWebPage(webPageLink))</span><br><span class="line">        .collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Create a combined Future using allOf()</span></span><br><span class="line">CompletableFuture&lt;Void&gt; allFutures = CompletableFuture.allOf(</span><br><span class="line">        pageContentFutures.toArray(<span class="keyword">new</span> <span class="title class_">CompletableFuture</span>[pageContentFutures.size()])</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>使用<code>CompletableFuture.allOf()</code>的问题是它返回 CompletableFuture。但是我们可以通过写一些额外的代码来获取所有封装的 CompletableFuture 结果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// When all the Futures are completed, call `future.join()` to get their results and collect the results in a list -</span></span><br><span class="line">CompletableFuture&lt;List&lt;String&gt;&gt; allPageContentsFuture = allFutures.thenApply(v -&gt; &#123;</span><br><span class="line">   <span class="keyword">return</span> pageContentFutures.stream()</span><br><span class="line">           .map(pageContentFuture -&gt; pageContentFuture.join())</span><br><span class="line">           .collect(Collectors.toList());</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>花一些时间理解下以上代码片段。当所有 future 完成的时候，我们调用了<code>future.join()</code>，因此我们不会在任何地方阻塞。</p><p><code>join()</code>方法和<code>get()</code>方法非常类似，这唯一不同的地方是如果最顶层的 CompletableFuture 完成的时候发生了异常，它会抛出一个未经检查的异常。</p><p>现在让我们计算包含关键字页面的数量。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Count the number of web pages having the &quot;CompletableFuture&quot; keyword.</span></span><br><span class="line">CompletableFuture&lt;Long&gt; countFuture = allPageContentsFuture.thenApply(pageContents -&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> pageContents.stream()</span><br><span class="line">            .filter(pageContent -&gt; pageContent.contains(<span class="string">&quot;CompletableFuture&quot;</span>))</span><br><span class="line">            .count();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;Number of Web Pages having CompletableFuture keyword - &quot;</span> + </span><br><span class="line">        countFuture.get());</span><br></pre></td></tr></table></figure><p><strong>2. CompletableFuture.anyOf()</strong></p><p><code>CompletableFuture.anyOf()</code>和其名字介绍的一样，当任何一个 CompletableFuture 完成的时候【相同的结果类型】，返回一个新的 CompletableFuture。以下示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">CompletableFuture&lt;String&gt; future1 = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">       <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Result of Future 1&quot;</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">CompletableFuture&lt;String&gt; future2 = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">       <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Result of Future 2&quot;</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">CompletableFuture&lt;String&gt; future3 = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">       <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Result of Future 3&quot;</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">CompletableFuture&lt;Object&gt; anyOfFuture = CompletableFuture.anyOf(future1, future2, future3);</span><br><span class="line"></span><br><span class="line">System.out.println(anyOfFuture.get()); <span class="comment">// Result of Future 2</span></span><br></pre></td></tr></table></figure><p>在以上示例中，当三个中的任何一个 CompletableFuture 完成， <code>anyOfFuture</code>就会完成。因为<code>future2</code>的休眠时间最少，因此她最先完成，最终的结果将是<code>future2</code>的结果。</p><p><code>CompletableFuture.anyOf()</code>传入一个 Future 可变参数，返回 CompletableFuture。<code>CompletableFuture.anyOf()</code>的问题是如果你的 CompletableFuture 返回的结果是不同类型的，这时候你讲会不知道你最终 CompletableFuture 是什么类型。</p><h3 id="CompletableFuture-异常处理"><a href="#CompletableFuture-异常处理" class="headerlink" title="CompletableFuture 异常处理"></a>CompletableFuture 异常处理</h3><p>我们探寻了怎样创建 CompletableFuture，转换它们，并组合多个 CompletableFuture。现在让我们弄明白当发生错误的时候我们应该怎么做。</p><p>首先让我们明白在一个回调链中错误是怎么传递的。思考下以下回调链：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line"><span class="comment">// Code which might throw an exception</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;Some result&quot;</span>;</span><br><span class="line">&#125;).thenApply(result -&gt; &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;processed result&quot;</span>;</span><br><span class="line">&#125;).thenApply(result -&gt; &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;result after further processing&quot;</span>;</span><br><span class="line">&#125;).thenAccept(result -&gt; &#123;</span><br><span class="line"><span class="comment">// do something with the final result</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>如果在原始的<code>supplyAsync()</code>任务中发生一个错误，这时候没有任何<code>thenApply</code>会被调用并且 future 将以一个异常结束。如果在第一个<code>thenApply</code>发生错误，这时候第二个和第三个将不会被调用，同样的，future 将以异常结束。</p><p><strong>1. 使用 exceptionally() 回调处理异常</strong> <code>exceptionally()</code>回调给你一个从原始 Future 中生成的错误恢复的机会。你可以在这里记录这个异常并返回一个默认值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Integer</span> <span class="variable">age</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">CompletableFuture&lt;String&gt; maturityFuture = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span>(age &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Age can not be negative&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(age &gt; <span class="number">18</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Adult&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Child&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).exceptionally(ex -&gt; &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Oops! We have an exception - &quot;</span> + ex.getMessage());</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Unknown!&quot;</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;Maturity : &quot;</span> + maturityFuture.get()); </span><br></pre></td></tr></table></figure><p><strong>2. 使用 handle() 方法处理异常</strong> API 提供了一个更通用的方法 - <code>handle()</code>从异常恢复，无论一个异常是否发生它都会被调用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Integer</span> <span class="variable">age</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">CompletableFuture&lt;String&gt; maturityFuture = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span>(age &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Age can not be negative&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(age &gt; <span class="number">18</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Adult&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Child&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).handle((res, ex) -&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span>(ex != <span class="literal">null</span>) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Oops! We have an exception - &quot;</span> + ex.getMessage());</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Unknown!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;Maturity : &quot;</span> + maturityFuture.get());</span><br></pre></td></tr></table></figure><p>如果异常发生，<code>res</code>参数将是 null，否则，<code>ex</code>将是 null。</p>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
            <tag> 实际开发 </tag>
            
            <tag> CompletableFuture </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线程池-核心参数推荐</title>
      <link href="/%E7%BA%BF%E7%A8%8B%E6%B1%A0/%E7%BA%BF%E7%A8%8B%E6%B1%A0-%E6%A0%B8%E5%BF%83%E5%8F%82%E6%95%B0%E6%8E%A8%E8%8D%90/"/>
      <url>/%E7%BA%BF%E7%A8%8B%E6%B1%A0/%E7%BA%BF%E7%A8%8B%E6%B1%A0-%E6%A0%B8%E5%BF%83%E5%8F%82%E6%95%B0%E6%8E%A8%E8%8D%90/</url>
      
        <content type="html"><![CDATA[<h1 id="线程池-核心参数设置推荐"><a href="#线程池-核心参数设置推荐" class="headerlink" title="线程池-核心参数设置推荐"></a>线程池-核心参数设置推荐</h1><script type="math/tex; mode=display">corePoolSize = \frac{1s需要执行的并发任务数}{1个线程1s可执行任务数} = \frac{每台机器qps * 当前接口并发任务数}{\frac{1000ms}{每个任务的平均耗时(ms)}} = \frac{\frac{qps}{服务器数量}* 当前接口并发任务数}{\frac{1000ms}{每个任务的平均耗时(ms)}}</script><script type="math/tex; mode=display">maximumPoolSize = 2 * corePoolSize</script><script type="math/tex; mode=display">queusSize = maximumPoolSize * \frac{1000ms * 最多等待的秒数}{每个任务的平均耗时}</script><p><strong>线程池参数设置标准：</strong></p><p>线程池3个标准参数分别是corePoolSize（核心线程数）、maximumPoolSize（最大线程数）、queueSize（队列长度），关于这三个参数的作用可以参考一下引用：</p><blockquote><p>首先，所有任务的调度都是由execute方法完成的，这部分完成的工作是：检查现在线程池的运行状态、运行线程数、运行策略，决定接下来执行的流程，是直接申请线程执行，或是缓冲到队列中执行，亦或是直接拒绝该任务。其执行过程如下：</p><ol><li>首先检测线程池运行状态，如果不是RUNNING，则直接拒绝，线程池要保证在RUNNING的状态下执行任务。</li><li>如果workerCount &lt; corePoolSize，则创建并启动一个线程来执行新提交的任务。</li><li>如果workerCount &gt;= corePoolSize，且线程池内的阻塞队列未满，则将任务添加到该阻塞队列中。</li><li>如果workerCount &gt;= corePoolSize &amp;&amp; workerCount &lt; maximumPoolSize，且线程池内的阻塞队列已满，则创建并启动一个线程来执行新提交的任务。</li><li>如果workerCount &gt;= maximumPoolSize，并且线程池内的阻塞队列已满, 则根据拒绝策略来处理该任务, 默认的处理方式是直接抛异常。</li></ol></blockquote><p>❤️<strong>在考虑如何设置这三个参数之前，首先需要明确的问题是：这3个参数不可能在代码阶段就能确定最优值，只能在上线之后根据实际情况进行调整。基于这个前提，我们需要确认的两个问题如下：</strong></p><ol><li><strong>如何在代码阶段确定相对靠谱的3值</strong></li><li><strong>如何在上线之后进行调整</strong></li></ol><p><strong>编码阶段确定核心3值：</strong></p><p>这3个值主要跟以下几个要素有关：<strong>接口qps、服务器数量、每个接口中的异步线程数量、每个异步线程的耗时</strong>。</p><p>这里需要重点说明一下，一些比较权威的书籍或论文中都会以cpu核数、cpu利用率、cpu等待时间和cpu计算时间用于计算每台机器应该开辟多少线程，但这种方式根本没有考虑实际情况，无法进行逻辑，所以我们现在只根据业务的实际场景讨论适合我们自己的3值设置方式。</p><p>一般我们都会认为核心线程数根据平峰期的qps来计算，最大线程数根据高峰期qps来计算，但是这样计算风险太高了，所以我们可以用高峰期的qps来计算核心线程数，最大线程数设置为核心线程数的2倍这种计算方式。<strong>根据高峰期qps</strong>计算核心线程数的方式如下</p><script type="math/tex; mode=display">corePoolSize = \frac{1s需要执行的并发任务数}{1个线程1s可执行任务数} = \frac{每台机器qps * 当前接口并发任务数}{\frac{1000ms}{每个任务的平均耗时(ms)}} = \frac{\frac{qps}{服务器数量}* 当前接口并发任务数}{\frac{1000ms}{每个任务的平均耗时(ms)}}</script><p>比如，我们判断一个接口的qps为500，线上有10台服务器，接口共调用了5个并发任务，每个任务平均年耗时200ms，那么计算方式就是：</p><script type="math/tex; mode=display">corePoolSize = \frac{\frac{500}{10}*5}{\frac{1000}{200}} = 50</script><script type="math/tex; mode=display">maximumPoolSize = 2 * corePoolSize = 100</script><p>在确定了corePoolSize和maximumPoolSize之后，如何确定队列长度呢？其实我们设想一个极端场景就可以了，比如所有maximumPoolSize线程都在满负荷工作，我们希望队列最后一个待执行任务等多久？如果我们希望它最多等1秒，那么所有线程满负荷工作1秒可以处理的线程数就应该是队列长度，如果是最多等待2秒，那就应该是所有线程2秒可以执行的任务数就是队列长度，计算方式如下：</p><script type="math/tex; mode=display">queueSize = maximumPoolSize * \frac{1000ms * 最多等待的秒数}{每个任务的平均耗时}</script><p>还是基于上述示例计算队列长度，应该为：</p><script type="math/tex; mode=display">queueSize = 100 * \frac{1000ms*2}{200ms} = 1000</script><p><strong>综上所述，如果我们判断一个接口的qps为500，线上有10台服务器，接口共调用了5个并发任务，每个任务平均年耗时200ms，并且我们希望每个任务等待不要超过2秒，那么核心线程数应该设置为50，最大线程数设置为100，队列设置为1000</strong></p><p>另外需要注意的是，推荐每个接口自己使用自己的线程池，不要两个接口同时使用同一个线程池，否则上述计算指标中的【当前接口并发任务数】不容易计算，并且与【当前接口qps】也对应不起来。如果个别场景确认需要多个接口复用同一个线程池，只能采用每个接口分别计算3值然后相加的方式，从而最大限度地保证安全。</p><p><strong>程序运行期间如何修改3值：</strong></p><p>比如我们发现活跃线程数远远没有达到核心线程数，就可以适当减小核心线程；</p><p>比如我们发现有任务被拒绝，我们就可以适当增加最大线程数或者增加队列长度；</p><p>如果我们发现任务等待时间非常长，并且线程活跃数已经到达最大线程数，那就应该考虑是继续增加线程数来提高处理速度，还是要减小队列长度来拒绝部分任务以保护自身服务。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>🩵</p><script type="math/tex; mode=display">corePoolSize = \frac{1s需要执行的并发任务数}{1个线程1s可执行任务数} = \frac{每台机器qps * 当前接口并发任务数}{\frac{1000ms}{每个任务的平均耗时(ms)}} = \frac{\frac{qps}{服务器数量}* 当前接口并发任务数}{\frac{1000ms}{每个任务的平均耗时(ms)}}</script><script type="math/tex; mode=display">maximumPoolSize = 2 * corePoolSize</script><script type="math/tex; mode=display">queusSize = maximumPoolSize * \frac{1000ms * 最多等待的秒数}{每个任务的平均耗时}</script>]]></content>
      
      
      <categories>
          
          <category> 线程池 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java开发规范 </tag>
            
            <tag> 实际开发 </tag>
            
            <tag> 线程池 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL日期类型浅析</title>
      <link href="/MySQL/MySQL%E6%97%A5%E6%9C%9F%E7%B1%BB%E5%9E%8B%E6%B5%85%E6%9E%90/"/>
      <url>/MySQL/MySQL%E6%97%A5%E6%9C%9F%E7%B1%BB%E5%9E%8B%E6%B5%85%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h2 id="一、-前言"><a href="#一、-前言" class="headerlink" title="一、 前言"></a>一、 前言</h2><p>本文主要整理 mysql 提供的五种日期 时间类型 time、date、datetime、timestamp 和 year 的区别，及日期时间类型的精度问题</p><p>以下内容基于 MySQL8.0.23 版本进行讲解</p><h2 id="二、-mysql-中的日期时间类型"><a href="#二、-mysql-中的日期时间类型" class="headerlink" title="二、 mysql 中的日期时间类型"></a>二、 mysql 中的日期时间类型</h2><p>mysql 中的日期时间类型有 time、date、datetime、timestamp 和 year</p><table><thead><tr><th>数据类型</th><th>最小值</th><th>最大值</th><th>零值表示</th></tr></thead><tbody><tr><td>date</td><td>1000-01-01</td><td>9999-12-31</td><td>0000-00-00</td></tr><tr><td>datetime</td><td>1000-01-01 00:00:00</td><td>9999-12-31 23:59:59</td><td>0000-00-00 00:00:00[.000000]</td></tr><tr><td>time</td><td>-838:59:59</td><td>838:59:59</td><td>00:00:00[.000000]</td></tr><tr><td>timestamp</td><td>19700101080001</td><td>2038-01-19 03:14:07.999999(准确的来讲应该是 UTC 范围)</td><td>0000000000000000[000000]</td></tr><tr><td>year</td><td>1901</td><td>2155</td><td>0000</td></tr></tbody></table><p><code>每种日期和时间类型都有一个有效范围。如果插入的值超过了这个范围，系统就会报错。</code><br><code>对于数据类型TIME、DATETIME和TIMESTAMP，MySQL 5.6.4增加了对小数秒(fsp：[fractional seconds storage])的支持,小数秒可以有6位(微秒)精度</code></p><p>mysql 会对每个数据类型的有效性进行检测，不可以存储不正确、非法的日期，如 date 类型不可以存储 2024-02-31 这个不存在的日期；datetime 中的时分秒不能超过 23:59:59… 等等</p><h3 id="2-1、详细解释"><a href="#2-1、详细解释" class="headerlink" title="2.1、详细解释"></a>2.1、详细解释</h3><p><strong>date:</strong> yyyy-mm-dd 格式表示的日期值，date 用于表示年月日，如果实际应用值需要保存年月日就可以使用 date。</p><ul><li>MySQL 数据库在存储时会校验 date 类型的正确性。①：必须是 yyyy-MM-dd 格式 ②：必须是合法日期，不能是不存在的日期，如 2024-02-31</li></ul><p><strong>datetime:</strong> yyyy-mm-dd hh:mm:ss 格式，datetime 用于表示年月日时分秒，是 date 和 time 的组合，并且记录的年份（见上表）比较长久。</p><p><strong>time:</strong> hh:mm:ss 格式表示的时间值, time 用于表示时分秒 (有负时间表示)</p><p><strong>timestamp:</strong> timestamp 用于表示年月日时分秒，但是记录的年份（见上表）比较短暂最大只能到 2038-01-19 03:14:07.999999(准确的来讲应该是 UTC 范围)。timestamp 和时区相关，更能反映当前时间。当插入日期时，会先转换为本地时区后再存放；当查询日期时，会将日期转换为本地时区后再显示。所以不同时区的人看到的同一时间是不一样的。<br>timestamp 的属性受 Mysql 版本和服务器 SQLMode 的影响较大。<br>如果记录的日期需要让不同时区的人使用，最好使用 timestamp。</p><p><strong>year:</strong> year 用于表示年份，year 有 2 位（最好使用 4 位）和 4 位格式的年。默认是 4 位。如果实际应用只保存年份，那么用 1 bytes 保存 year 类型完全可以。不但能够节约存储空间，还能提高表的操作效率。</p><h3 id="2-2、占用字节"><a href="#2-2、占用字节" class="headerlink" title="2.2、占用字节"></a>2.2、占用字节</h3><p>在 MySQL 5.6 版本里，对这些类型进行了多项重要的改进：<br>对于数据类型 TIME、DATETIME 和 TIMESTAMP，MySQL 5.6.4 增加了对小数秒 (fsp：[fractional seconds storage]) 的支持。 这些类型现在允许的可选小数部分多达 6 位 (微秒) 精度。<br>MySQL 5.6.5 引入了扩展支持：自动把当前时间戳作为初始值并进行更新。在以前的版本里，这些属性只能用于表里的大部分单个 TIMESTAMP 列。现在，它们可以用于任何 TIMESTAMP 列，并且也可用于 DATETIME 列。<br>MySQL 5.6.6 丢弃了对 YEAR(2) 的支持，取而代之的是允许创建像 YEAR(4) 那样的列。</p><p>如果要声明包含小数秒部分的时态类型列，则需要把定义写成 type_name(fsp)，其中，type_name 为 TIME、DATETIME 或 TIMESTAMP，fsp 为小数秒精度。例如，下面的 TIME 列允许 的小数位数分别为 3 位和 6 位：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `date_test` (</span><br><span class="line">  `d3` time(3),</span><br><span class="line">  `d4` time(6)</span><br><span class="line">) ENGINE=InnoDB AUTO_INCREMENT=0  COMMENT=&#x27;test测试&#x27;;</span><br></pre></td></tr></table></figure><p>fsp 值的取值范围必须为 0~6。如果未给定，则默认为 0。更多相关信息在下面会介绍。<br>下图展示的是每一种数据类型的存储空间要求：<br><img src="https://cdn.jsdelivr.net/gh/cgshao02/BLOG_images/img/59dd30d4e284de84f47ed95b648a99b6.png" alt=""><br>下图展示的是那些声明中带有小数秒部分的类型所具有的额外存储空间要求：<br><img src="https://cdn.jsdelivr.net/gh/cgshao02/BLOG_images/img/7fe869facb345bb220f2aabbb7386b85.png" alt=""></p><h3 id="2-3、time-类型"><a href="#2-3、time-类型" class="headerlink" title="2.3、time 类型"></a>2.3、time 类型</h3><p>time 类型使用 3 个字节来表示时间。MySQL 中以 HH:MM:SS 的形式显示 Time 类型的值。其中，HH 表示时；MM 表示分，取值范围为 0 ~~ 59；SS 表示秒，取值范围是 0 ~~ 59。<br>Time 类型的范围可以从‘-838：59：59’ ~~ ‘838：59：59’。虽然，小时的范围是 0~~23，但是为了表示某种特殊需要的时间间隔，将 Time 类型的范围扩大了。而且还支持了负值。</p><p>Time 类型的字段赋值的表示方法如下：<br>1，‘D HH:MM:SS’格式的字符串表示。其中，D 表示天数，取值范围是 0~~34。保存时，小时的值等于（D*24+HH）。举个例子，输入‘2 11：30：50’，Time 类型会转换为 59：30：50。<br>当然。输入时可以不严格按照这个格式，也可以是‘HH:MM:SS’,‘HH:MM’,‘D HH:MM’,‘D HH’,’SS’等形式。举个例子，输入‘30’，Time 类型会自动转换为 00：00：30。</p><p>2，‘HHMMSS’格式的字符串或 HHMMSS 格式的数值表示，例如，输入‘123456’，Time 类型会转换成 12：34：56；输入 123456，Time 类型会转换成 12：34：56。如果输入 0 或者‘0’，那么 TIME 类型会转换为 0000：00：00。</p><p>3，使用 current_time 或者 current_time() 或者 now() 输入当前系统时间。</p><h2 id="三、datetime-和-timestamp-区别"><a href="#三、datetime-和-timestamp-区别" class="headerlink" title="三、datetime 和 timestamp 区别"></a>三、datetime 和 timestamp 区别</h2><h3 id="3-1、相同点"><a href="#3-1、相同点" class="headerlink" title="3.1、相同点"></a>3.1、相同点</h3><p>datetime 和 timestamp 都可以表示 YYYY-MM-DD HH:MM:SS 这种年月日时分秒格式的数据。</p><blockquote><p>并且从 MySQL5.6.4 之后这两者都可以包含秒后的小数部分，精度最高为微妙（6 位）。</p></blockquote><p>这里有一个点需要注意，就是在 MySQL5.6.4 之前，这两个是都表示不了小数的。</p><h3 id="3-2、不同点"><a href="#3-2、不同点" class="headerlink" title="3.2、不同点"></a>3.2、不同点</h3><p><strong>1：存储范围不同</strong></p><blockquote><p>datetime 的存储范围是 1000-01-01 00:00:00.000000 到 9999-12-31 23:59:59.999999，而 timestamp 的范围是 1970-01-01 00:00:01.000000 到 2038-01-19 03:14:07.999999(准确的来讲应该是 UTC 范围)</p></blockquote><p><strong>2：时区相关</strong></p><blockquote><ul><li>datetime 存储与时区无关（准备来说是 datetime 只支持一个时区，就是存储时当前服务器的时区），而 timestamp 存储的是与时区有关。</li><li>MySQL 在存储 timestamp 时，会先将时间从当前服务器的时区转换为 UTC（世界协调时）以进行存储，然后查询时从 UTC 转换为当前时区以进行返回。也就是说使用 timestamp 进行存储的时间返回的时候会随着数据库的时区而发生改变。而 datetime 的存储则与时区无关，数据是什么就存储什么，也就返回什么。</li></ul></blockquote><p>timestamp 更适合来记录时间，比如我在东八区时间现在是 2021-06-08 10:23:45， 你在日本（东九区此时时间为 2021-06-08 11:23:45），我和你在聊天，数据库记录了时间，取出来之后，对于我来说时间是 2021-06-08 10:23:45，对于日本的你来说就是 2021-06-08 11:23:45。所以就不用考虑时区的计算了。</p><p><strong>3: 存储空间大小</strong></p><blockquote><p>在 5.6.4 之前，datetime 存储占用 8 个字节，而 timestamp 是占用 4 字节；但是在 5.6.4 之后，由于这两个类型允许有小数部分，所以占用的存储空间和以前不同；MySQL 规范规定，datetime 的非小数部分需要 5 个字节，而不是 8 个字节，而 timestamp 的非小数部分是需要 4 个字节，并且这两个部分的小数部分都需要 0 到 3 个字节，具体取决于存储值的小数秒精度。</p></blockquote><h2 id="四、mysql-日期类型中的坑"><a href="#四、mysql-日期类型中的坑" class="headerlink" title="四、mysql 日期类型中的坑"></a>四、mysql 日期类型中的坑</h2><h3 id="4-1、-time、timestamp、datetime-数据类型四舍五入"><a href="#4-1、-time、timestamp、datetime-数据类型四舍五入" class="headerlink" title="4.1、 time、timestamp、datetime 数据类型四舍五入"></a>4.1、 time、timestamp、datetime 数据类型四舍五入</h3><p>当前 mysql 版本为 8.0.18</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `date_test` (</span><br><span class="line">  `id` int(20) NOT NULL AUTO_INCREMENT COMMENT &#x27;主键id&#x27;,</span><br><span class="line">  `d1` date,</span><br><span class="line">  `d2` datetime,</span><br><span class="line">  `d3` time,</span><br><span class="line">  `d4` timestamp,</span><br><span class="line">  `d5` year,</span><br><span class="line">  primary key(id)</span><br><span class="line">) ENGINE=InnoDB AUTO_INCREMENT=0  COMMENT=&#x27;test测试&#x27;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">insert into date_test(d2,d4) values(&#x27;2021-02-23 10:16:55.781&#x27;,&#x27;2021-02-23 10:16:55.781&#x27;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/cgshao02/BLOG_images/img/0c20b03575f12940ed386f795f458f3e.png" alt=""><br><strong>结论：</strong> 当 time、timestamp、datetime 数据类型不指定精度时默认会四舍五入<br><strong>问题解决：</strong> 可以设置字段的精度，如 timestamp(3)、timestamp(6)</p><h2 id="五、其他疑问问题"><a href="#五、其他疑问问题" class="headerlink" title="五、其他疑问问题"></a>五、其他疑问问题</h2><h3 id="5-1、date-类型可以存时分秒么？可以存储不存在的日期么？"><a href="#5-1、date-类型可以存时分秒么？可以存储不存在的日期么？" class="headerlink" title="5.1、date 类型可以存时分秒么？可以存储不存在的日期么？"></a>5.1、date 类型可以存时分秒么？可以存储不存在的日期么？</h3><blockquote><p>date 类型只能存储 yyyy-mm-dd 格式的日期，不能存储时分秒字段；<br>date 类型只能存储合法的日期，即必须存在的日期，不能是非法日期，如 2024–02-30 是不存在的，不可以存储</p></blockquote><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `date_test` (</span><br><span class="line">  `id` int(20) NOT NULL AUTO_INCREMENT COMMENT &#x27;主键id&#x27;,</span><br><span class="line">  `d1` date,</span><br><span class="line">  `d2` datetime,</span><br><span class="line">  `d3` time,</span><br><span class="line">  `d4` timestamp,</span><br><span class="line">  `d5` year,</span><br><span class="line">  primary key(id)</span><br><span class="line">) ENGINE=InnoDB AUTO_INCREMENT=0  COMMENT=&#x27;test测试&#x27;;</span><br><span class="line"></span><br><span class="line">select * from date_test;</span><br><span class="line"></span><br><span class="line">insert into date_test(d1) values(&#x27;2024-02-30&#x27;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/cgshao02/BLOG_images/img/e608f05b33d83d5ef12eb8db77e66cd7.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java时间格式化</title>
      <link href="/%E5%AE%9E%E9%99%85%E5%BC%80%E5%8F%91/Java%E6%97%B6%E9%97%B4%E6%A0%BC%E5%BC%8F%E5%8C%96/"/>
      <url>/%E5%AE%9E%E9%99%85%E5%BC%80%E5%8F%91/Java%E6%97%B6%E9%97%B4%E6%A0%BC%E5%BC%8F%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h2 id="1-String-format"><a href="#1-String-format" class="headerlink" title="1.String.format()"></a>1.String.format()</h2><p>format(String format, Object… args) 新字符串使用本地语言环境，制定字符串格式和参数生成格式化的新字符串。</p><p>format(Locale locale, String format, Object… args) 使用指定的语言环境，制定字符串格式和参数生成格式化的字符串。</p><h3 id="1-1-日期格式化"><a href="#1-1-日期格式化" class="headerlink" title="1.1 日期格式化"></a><strong>1.1 日期格式化</strong></h3><p>常用的日期转换格式符</p><table border="1" cellpadding="1" cellspacing="5"><thead><tr><th>转换符</th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td>%te</td><td>一个月中的某一天（1~31）</td><td>10</td></tr><tr><td>%td</td><td>一个月中的第几天（1~31）</td><td>03</td></tr><tr><td>%tj</td><td>一年中的第几天（1~366）</td><td>020</td></tr><tr><td>%tb</td><td>指定语言环境的月份简称</td><td>Feb（英文）、二月（中文）</td></tr><tr><td>%tB</td><td>指定语言环境的月份全称</td><td>February（英文）、二月（中文）</td></tr><tr><td>%ta</td><td>指定语言环境的星期简称</td><td>Mon（英文）、星期一（中文）</td></tr><tr><td>%tA</td><td>指定语言环境的星期全称</td><td>Monday（星期一）、星期一（中文）</td></tr><tr><td>%tc</td><td>包括全部日期和时间信息</td><td>星期六&nbsp; 六月&nbsp; 10&nbsp; 09:10:20 CST 2023</td></tr><tr><td>%tY</td><td>4 位年份</td><td>2023</td></tr><tr><td>%ty</td><td>2 位年份</td><td>23</td></tr><tr><td>%tm</td><td>月份</td><td>05</td></tr></tbody></table><p> 实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">         <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">         <span class="type">String</span> <span class="variable">day</span> <span class="operator">=</span> String.format(<span class="string">&quot;%te&quot;</span>, date);</span><br><span class="line">         System.out.println(<span class="string">&quot;今天是2019年8月：&quot;</span> + day + <span class="string">&quot;号&quot;</span>);</span><br><span class="line">         <span class="type">String</span> <span class="variable">month</span> <span class="operator">=</span> String.format(<span class="string">&quot;%tb&quot;</span>, date);</span><br><span class="line">         System.out.println(<span class="string">&quot;现在是2019年：&quot;</span> + month);</span><br><span class="line">         <span class="type">String</span> <span class="variable">xingqi</span> <span class="operator">=</span> String.format(<span class="string">&quot;%tA&quot;</span>, date);</span><br><span class="line">         System.out.println(<span class="string">&quot;今天是：&quot;</span> + xingqi);</span><br><span class="line">        <span class="type">String</span> <span class="variable">year</span> <span class="operator">=</span> String.format(<span class="string">&quot;%tY&quot;</span>, date);</span><br><span class="line">        System.out.println(<span class="string">&quot;现在是：&quot;</span> + year + <span class="string">&quot;年&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">30号</span><br><span class="line">十月</span><br><span class="line">今天是：星期三</span><br><span class="line">现在是：2024年</span><br></pre></td></tr></table></figure><h3 id="1-2-时间格式化"><a href="#1-2-时间格式化" class="headerlink" title="1.2 时间格式化"></a>1.2 时间格式化</h3><p>常用的时间格式转换符</p><table border="1" cellpadding="1" cellspacing="2"><thead><tr><th>转换符</th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td>%tH</td><td>2 位数字的 24 时制的小时（00~23）</td><td>13</td></tr><tr><td>%tI</td><td>2 位数字的 12 时制的小时（00~23）</td><td>01</td></tr><tr><td>%tM</td><td>2 位数字的分钟（00~59）</td><td>05</td></tr><tr><td>%tS</td><td>2 位数字的秒数（00~60）</td><td>12</td></tr><tr><td>%tL</td><td>3 位数字的毫秒（000~999）</td><td>666</td></tr><tr><td>%tp</td><td>指定语言环境下的上午或下午标记</td><td>下午（中文）、pm（英文）</td></tr><tr><td>%tZ</td><td>时区缩写形式的字符串</td><td><p>CST</p></td></tr></tbody></table><p>实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">hour</span> <span class="operator">=</span> String.format(<span class="string">&quot;%tH&quot;</span>, date);</span><br><span class="line">        <span class="type">String</span> <span class="variable">minute</span> <span class="operator">=</span> String.format(<span class="string">&quot;%tM&quot;</span>, date);</span><br><span class="line">        <span class="type">String</span> <span class="variable">second</span> <span class="operator">=</span> String.format(<span class="string">&quot;%tS&quot;</span>, date);</span><br><span class="line">        System.out.println(<span class="string">&quot;现在是：&quot;</span> + hour + <span class="string">&quot;点&quot;</span> + minute + <span class="string">&quot;分&quot;</span> + second + <span class="string">&quot;秒&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;##################################&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">hour2</span> <span class="operator">=</span> String.format(<span class="string">&quot;%tI&quot;</span>, date);</span><br><span class="line">        <span class="type">String</span> <span class="variable">pm</span> <span class="operator">=</span> String.format(<span class="string">&quot;%tp&quot;</span>, date);</span><br><span class="line">        System.out.println(<span class="string">&quot;现在是：&quot;</span> + pm + hour2 + <span class="string">&quot;点&quot;</span> + minute + <span class="string">&quot;分&quot;</span> + second + <span class="string">&quot;秒&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">现在是：<span class="number">15</span>点<span class="number">59</span>分<span class="number">05</span>秒</span><br><span class="line">##################################</span><br><span class="line">现在是：下午<span class="number">03</span>点<span class="number">59</span>分<span class="number">05</span>秒</span><br></pre></td></tr></table></figure><h3 id="1-3-常见的日期和时间组合的格式"><a href="#1-3-常见的日期和时间组合的格式" class="headerlink" title="1.3 常见的日期和时间组合的格式"></a>1.3 常见的日期和时间组合的格式</h3><table border="1" cellpadding="1" cellspacing="2"><thead><tr><th>转换符</th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td>%tF</td><td>"年 - 月 - 日" 格式</td><td>2021-05-09</td></tr><tr><td>%tD</td><td>"月 / 日 / 年" 格式</td><td>05/09/2021</td></tr><tr><td>%tT</td><td>"时：分：秒" 24 时制</td><td>08:20:42</td></tr><tr><td>%tR</td><td>"时：分" 24 时制</td><td><p>08:20</p></td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">         <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">         <span class="type">String</span> <span class="variable">time</span> <span class="operator">=</span> String.format(<span class="string">&quot;%tc&quot;</span>, date);</span><br><span class="line">         <span class="type">String</span> <span class="variable">form</span> <span class="operator">=</span> String.format(<span class="string">&quot;%tF&quot;</span>, date);</span><br><span class="line">         <span class="type">String</span> <span class="variable">form2</span> <span class="operator">=</span> String.format(<span class="string">&quot;%tD&quot;</span>, date);</span><br><span class="line">         <span class="type">String</span> <span class="variable">form3</span> <span class="operator">=</span> String.format(<span class="string">&quot;%tr&quot;</span>, date);</span><br><span class="line">         <span class="type">String</span> <span class="variable">form4</span> <span class="operator">=</span> String.format(<span class="string">&quot;%tT&quot;</span>, date);</span><br><span class="line">         <span class="type">String</span> <span class="variable">form5</span> <span class="operator">=</span> String.format(<span class="string">&quot;%tR&quot;</span>, date);</span><br><span class="line">         System.out.println(<span class="string">&quot;全部的时间信息是：&quot;</span> + time);</span><br><span class="line">         System.out.println(<span class="string">&quot;年-月-日格式：&quot;</span> + form);</span><br><span class="line">         System.out.println(<span class="string">&quot;年/月/日格式：&quot;</span> + form2);</span><br><span class="line">         System.out.println(<span class="string">&quot;时：分：秒 PM(AM)格式：&quot;</span> + form3);</span><br><span class="line">         System.out.println(<span class="string">&quot;时：分：秒格式：&quot;</span> + form4);</span><br><span class="line">         System.out.println(<span class="string">&quot;时：分格式：&quot;</span> + form5);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">全部的时间信息是：星期三 十月 30 16:00:32 CST 2024</span><br><span class="line">年-月-日格式：2024-10-30</span><br><span class="line">年/月/日格式：10/30/24</span><br><span class="line">时：分：秒 PM(AM)格式：04:00:32 下午</span><br><span class="line">时：分：秒格式：16:00:32</span><br><span class="line">时：分格式：16:00</span><br></pre></td></tr></table></figure><h2 id="2-DateFormat"><a href="#2-DateFormat" class="headerlink" title="2.DateFormat "></a>2.DateFormat </h2><p>DateFormat 是日期 / 时间格式化的抽象类，它以与语言无关的方式格式化并分析日期或时间。DataFormat 还有一个子类 —— SimpleDateFormat，可用此类格式化日期。其中，最常用的方法是 format() 方法。</p><p>实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">SimpleDateFormat</span> <span class="variable">sdf1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yy年MM月dd日&quot;</span>);</span><br><span class="line">        <span class="type">SimpleDateFormat</span> <span class="variable">sdf2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy年MM月dd日&quot;</span>);</span><br><span class="line">        <span class="type">SimpleDateFormat</span> <span class="variable">sdf3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy年MM月dd日  HH时mm分&quot;</span>);</span><br><span class="line">        <span class="type">SimpleDateFormat</span> <span class="variable">sdf4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy年MM月dd日  HH时mm分ss秒&quot;</span>);</span><br><span class="line">        <span class="type">SimpleDateFormat</span> <span class="variable">sdf5</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;今年已经过了DDD天，快w个星期，现在是这个月的第W个星期&quot;</span>);</span><br><span class="line">        <span class="type">SimpleDateFormat</span> <span class="variable">sdf6</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;现在是E&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">date1</span> <span class="operator">=</span> sdf1.format(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        <span class="type">String</span> <span class="variable">date2</span> <span class="operator">=</span> sdf2.format(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        <span class="type">String</span> <span class="variable">date3</span> <span class="operator">=</span> sdf3.format(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        <span class="type">String</span> <span class="variable">date4</span> <span class="operator">=</span> sdf4.format(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        <span class="type">String</span> <span class="variable">date5</span> <span class="operator">=</span> sdf5.format(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        <span class="type">String</span> <span class="variable">date6</span> <span class="operator">=</span> sdf6.format(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        System.out.println(date1);</span><br><span class="line">        System.out.println(date2);</span><br><span class="line">        System.out.println(date3);</span><br><span class="line">        System.out.println(date4);</span><br><span class="line">        System.out.println(date5);</span><br><span class="line">        System.out.println(date6);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">24年10月30日</span><br><span class="line">2024年10月30日</span><br><span class="line">2024年10月30日  16时01分</span><br><span class="line">2024年10月30日  16时01分35秒</span><br><span class="line">今年已经过了304天，快44个星期，现在是这个月的第5个星期</span><br><span class="line">现在是星期三</span><br></pre></td></tr></table></figure><h2 id="3-SimpleDateFormat-类"><a href="#3-SimpleDateFormat-类" class="headerlink" title=" 3.SimpleDateFormat 类"></a> 3.SimpleDateFormat 类</h2><pre><code>    在使用 DateFormat 类时，只有固定格式，在 java.text.SimpleDateFormat 包有一个以与语言环境有关的方式来格式化和解析日期的具体类。它允许进行格式化（日期 -&gt; 文本）、解析（文本 -&gt; 日期）和规范化。 SimpleDateFormat 使得可以选择任何用户定义的日期 - 时间格式的模式。</code></pre><p><strong>SimpleDateFormat 类基本构造方法：</strong></p><p>SimpleDateFormat 类是 DateFormat 类的一个子类。</p><ul><li>new SimpleDateFormat(); 默认模式和默认日期格式符号创造。</li><li>SimpleDateFormat(String pattern); 使用指定的模式和默认日期格式符号创造。</li><li>SimpleDateFormat(String pattern, Locale locale); 使用指定的模式和指定语言环境的默认日期符号构造。</li></ul><p>DateFormat 也可以 new SimpleDateFormat 对象。</p><blockquote><p>DateFormat d=new SimpleDateFormat();</p></blockquote><p><strong>代表日期和时间的模式元素字母：</strong></p><table><thead><tr><th>字母</th><th>含义</th><th>示例</th></tr></thead><tbody><tr><td>y</td><td>年，一个 y 代表一位</td><td>"yyy" 代表 019，"yyyy" 代表 2019</td></tr><tr><td>M</td><td>月份</td><td>例如八月，M 代表 8，MM 代表 08</td></tr><tr><td>w</td><td>一年中的第几周</td><td>常用 ww 表示</td></tr><tr><td>W</td><td>一个月中的第几周</td><td>常用 WW 表示</td></tr><tr><td>d</td><td>一个月中的第几天</td><td>常用 dd 表示</td></tr><tr><td>D</td><td>一年中的第几天</td><td>常用 DDD 表示</td></tr><tr><td>E</td><td>星期几，用 E 表示星期，根据不同语言环境返回</td><td>CHINA 表示星期几，US 表示英文缩写</td></tr><tr><td>a</td><td>上午或下午</td><td>am 代表上午，pm 代表下午</td></tr><tr><td>H</td><td>一天中的小时数，二十四小时制</td><td>常用 HH 表示</td></tr><tr><td>h</td><td>一天中的小时数，十二小时制</td><td>常用 hh 表示</td></tr><tr><td>m</td><td>分钟数</td><td>常用 mm 表示</td></tr><tr><td>s</td><td>秒数</td><td>常用 ss 表示</td></tr><tr><td>S</td><td>毫秒数</td><td>常用 SSS 表示</td></tr></tbody></table><p> 实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FormatDateTime</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SimpleDateFormat myFmt=<span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy年MM月dd日 HH时mm分ss秒&quot;</span>);</span><br><span class="line">        SimpleDateFormat myFmt1=<span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yy/MM/dd HH:mm&quot;</span>); </span><br><span class="line">        SimpleDateFormat myFmt2=<span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);<span class="comment">//等价于now.toLocaleString()</span></span><br><span class="line">        SimpleDateFormat myFmt3=<span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy年MM月dd日 HH时mm分ss秒 E &quot;</span>);</span><br><span class="line">        SimpleDateFormat myFmt4=<span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(</span><br><span class="line">                <span class="string">&quot;一年中的第 D 天 一年中第w个星期 一月中第W个星期 在一天中k时 z时区&quot;</span>);</span><br><span class="line">        Date now=<span class="keyword">new</span> <span class="title class_">Date</span>(); <span class="comment">// 现在的日期</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 按照自定义的时间编排格式 输出时间</span></span><br><span class="line">        System.out.println(myFmt.format(now));</span><br><span class="line">        System.out.println(myFmt1.format(now));</span><br><span class="line">        System.out.println(myFmt2.format(now));</span><br><span class="line">        System.out.println(myFmt3.format(now));</span><br><span class="line">        System.out.println(myFmt4.format(now));</span><br><span class="line">        System.out.println(now.toGMTString());</span><br><span class="line">        System.out.println(now.toLocaleString());</span><br><span class="line">        System.out.println(now.toString());</span><br><span class="line">    &#125;    </span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">2024年10月30日 16时02分43秒</span><br><span class="line">24/10/30 16:02</span><br><span class="line">2024-10-30 16:02:43</span><br><span class="line">2024年10月30日 16时02分43秒 星期三 </span><br><span class="line">一年中的第 304 天 一年中第44个星期 一月中第5个星期 在一天中16时 CST时区</span><br><span class="line">30 Oct 2024 08:02:43 GMT</span><br><span class="line">2024-10-30 16:02:43</span><br><span class="line">Wed Oct 30 16:02:43 CST 2024</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/cgshao02/BLOG_images/img/8b30e9335630cd6ea0fec1ec2aec744f.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 实际开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 实际开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>时间戳介绍</title>
      <link href="/%E5%B8%B8%E8%AF%86/%E6%97%B6%E9%97%B4%E6%88%B3%E4%BB%8B%E7%BB%8D/"/>
      <url>/%E5%B8%B8%E8%AF%86/%E6%97%B6%E9%97%B4%E6%88%B3%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<pre><code>    时间戳（Timestamp）是表示特定时间点的数值，通常以自 1970 年 1 月 1 日 00:00:00 UTC （世界协调时）以来的秒数或毫秒数来表示。这个时间点被称为 Unix 纪元（Unix epoch）。时间戳广泛用于计算机系统中，用于记录事件发生的精确时间。</code></pre><h2 id="时间戳的格式"><a href="#时间戳的格式" class="headerlink" title="时间戳的格式"></a>时间戳的格式</h2><p>时间戳通常是一个整数或浮点数，例如：</p><ul><li>Unix 时间戳（秒级）： 1622548800</li><li>Unix 时间戳（毫秒级）： 1622548800123</li></ul><h2 id="时间戳的用途"><a href="#时间戳的用途" class="headerlink" title="时间戳的用途"></a>时间戳的用途</h2><ol><li><strong>记录日志</strong>：在日志文件中使用时间戳可以精确记录事件发生的时间，方便日后分析和调试。</li><li><strong>数据库记录</strong>：在数据库中使用时间戳可以追踪记录的创建和更新时间。</li><li><strong>时间计算</strong>：通过时间戳可以方便地进行时间差的计算，例如测量程序执行时间、计算事件间隔等。</li><li><strong>排序</strong>：使用时间戳可以对事件按时间顺序进行排序。</li></ol><h2 id="使用时间戳"><a href="#使用时间戳" class="headerlink" title="使用时间戳"></a>使用时间戳</h2><p>以下是一些常见编程语言中如何使用时间戳的示例： </p><p>JavaScript</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取当前时间的时间戳（秒级）</span></span><br><span class="line"><span class="keyword">const</span> timestampInSeconds = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Date</span>.<span class="title function_">now</span>() / <span class="number">1000</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 获取当前时间的时间戳（毫秒级）</span></span><br><span class="line"><span class="keyword">const</span> timestampInMilliseconds = <span class="title class_">Date</span>.<span class="title function_">now</span>();</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 将时间戳转换为日期对象</span></span><br><span class="line"><span class="keyword">const</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>(timestampInMilliseconds);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date.<span class="title function_">toString</span>());</span><br></pre></td></tr></table></figure><p> Python</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 获取当前时间的时间戳（秒级）</span></span><br><span class="line">timestamp_in_seconds = <span class="built_in">int</span>(time.time())</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 获取当前时间的时间戳（毫秒级）</span></span><br><span class="line">timestamp_in_milliseconds = <span class="built_in">int</span>(time.time() * <span class="number">1000</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 将时间戳转换为日期时间对象</span></span><br><span class="line">date = datetime.datetime.fromtimestamp(timestamp_in_seconds)</span><br><span class="line"><span class="built_in">print</span>(date.strftime(<span class="string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>))</span><br></pre></td></tr></table></figure><p>Java </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.time.Instant;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"><span class="keyword">import</span> java.time.ZoneId;</span><br><span class="line"><span class="keyword">import</span> java.time.format.DateTimeFormatter;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 获取当前时间的时间戳（秒级）</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">timestampInSeconds</span> <span class="operator">=</span> Instant.now().getEpochSecond();</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 获取当前时间的时间戳（毫秒级）</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">timestampInMilliseconds</span> <span class="operator">=</span> Instant.now().toEpochMilli();</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 将时间戳转换为日期时间对象</span></span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">dateTime</span> <span class="operator">=</span> LocalDateTime.ofInstant(Instant.ofEpochMilli(timestampInMilliseconds), ZoneId.systemDefault());</span><br><span class="line">        <span class="type">DateTimeFormatter</span> <span class="variable">formatter</span> <span class="operator">=</span> DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">        System.out.println(dateTime.format(formatter));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>     这些例子展示了如何获取当前时间的时间戳，如何将[时间戳转换](https://so.csdn.net/so/search?q=%E6%97%B6%E9%97%B4%E6%88%B3%E8%BD%AC%E6%8D%A2&amp;spm=1001.2101.3001.7020)为日期时间对象，并输出为人类可读的格式。时间戳在编程中是非常有用的工具，能够精确记录和处理时间相关的信息。</code></pre><p>以下是一些适合中国用户使用的在线时间戳转换工具：</p><ol><li><p>时间戳转换工具<br>地址：<a href="https://tool.lu/timestamp/" title="[tool.lu/timestamp/]">[tool.lu/timestamp/]</a><br>   描述：一个简单易用的时间戳转换工具，支持将时间戳转换为北京时间，以及将北京时间转换为时间戳。</p></li><li><p>在线工具 - Unix 时间戳转换<br>地址：<a href="https://www.bejson.com/convert/unix/" title="[bejson.com/convert/unix/]">[bejson.com/convert/unix/]</a><br>   描述：提供 Unix 时间戳与北京时间的相互转换。</p></li><li><p>菜鸟工具 - Unix 时间戳<br>地址：<a href="https://c.runoob.com/front-end/854" title="[c.runoob.com/front-end/854]">[c.runoob.com/front-end/854]</a><br>   描述：支持 Unix 时间戳与标准时间的转换。</p></li></ol><p>这些工具都提供了简洁易用的界面，可以方便地进行时间戳与北京时间的相互转换。你可以选择一个适合自己的工具进行使用。</p>]]></content>
      
      
      <categories>
          
          <category> 常识 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>时间格式化-前后端交互- @JsonFormat 和 @DateTimeFormat</title>
      <link href="/Spring/%E6%97%B6%E9%97%B4%E6%A0%BC%E5%BC%8F%E5%8C%96-%E5%89%8D%E5%90%8E%E7%AB%AF%E4%BA%A4%E4%BA%92-JsonFormat-%E5%92%8C-DateTimeFormat/"/>
      <url>/Spring/%E6%97%B6%E9%97%B4%E6%A0%BC%E5%BC%8F%E5%8C%96-%E5%89%8D%E5%90%8E%E7%AB%AF%E4%BA%A4%E4%BA%92-JsonFormat-%E5%92%8C-DateTimeFormat/</url>
      
        <content type="html"><![CDATA[<h1 id="时间格式化-JsonFormat-和-DateTimeFormat"><a href="#时间格式化-JsonFormat-和-DateTimeFormat" class="headerlink" title="时间格式化 @JsonFormat 和 @DateTimeFormat"></a>时间格式化 @JsonFormat 和 @DateTimeFormat</h1><h3 id="一、示例代码"><a href="#一、示例代码" class="headerlink" title="一、示例代码"></a>一、示例代码</h3><ul><li>先准备一个简单 POJO，拥有 Date 类型的成员变量：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DateEntity</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Date date;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>再准备一个 Controller，模拟一下前后交互：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/date&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DateController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> DateEntity <span class="title function_">getDate</span><span class="params">(<span class="meta">@RequestBody</span> DateEntity dateEntity)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;入参的date:&quot;</span>+dateEntity.getDate());</span><br><span class="line"></span><br><span class="line">        <span class="type">SimpleDateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">date</span> <span class="operator">=</span> sdf.format(dateEntity.getDate());</span><br><span class="line">        System.out.println(<span class="string">&quot;SimpleDateFormat格式化后的date:&quot;</span>+date);</span><br><span class="line"></span><br><span class="line">        <span class="type">DateEntity</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DateEntity</span>();</span><br><span class="line">        result.setDate(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>创建好 POJO 和 Controller 后，用 Postman 模拟一下请求发送：  </p></li><li><p>结果报错：  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2024-10-14 16:00:29.159  WARN 23616 --- [nio-8080-exec-1] .w.s.m.s.DefaultHandlerExceptionResolver : Resolved [org.springframework.http.converter.HttpMessageNotReadableException: JSON parse error: Cannot deserialize value of type `java.util.Date` from String &quot;2025-03-07 23:59:59&quot;: not a valid representation (error: Failed to parse Date value &#x27;2025-03-07 23:59:59&#x27;: Cannot parse date &quot;2025-03-07 23:59:59&quot;: while it seems to fit format &#x27;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSX&#x27;, parsing fails (leniency? null)); nested exception is com.fasterxml.jackson.databind.exc.InvalidFormatException: Cannot deserialize value of type `java.util.Date` from String &quot;2025-03-07 23:59:59&quot;: not a valid representation (error: Failed to parse Date value &#x27;2025-03-07 23:59:59&#x27;: Cannot parse date &quot;2025-03-07 23:59:59&quot;: while it seems to fit format &#x27;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSX&#x27;, parsing fails (leniency? null))&lt;EOL&gt; at [Source: (org.springframework.util.StreamUtils$NonClosingInputStream); line: 2, column: 12] (through reference chain: com.saikuai.pojo.DateTest[&quot;date&quot;])]</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><ul><li>大概意思就是说 String 类型转换成 Date 类型失败，所以报了 IllegalArgumentException 异常；</li></ul><h3 id="二、-JsonFormat-注解"><a href="#二、-JsonFormat-注解" class="headerlink" title="二、@JsonFormat 注解"></a>二、@JsonFormat 注解</h3><ul><li>提供者：jackson</li><li>作用：可以约束时间的<strong>接收格式</strong>和<strong>响应格式</strong> (接收和响应的都是 <strong>JSON 字符串</strong>)，将日期类型数据在 JSON 格式和 java.util.Date 对象之间转换。与传输方向没有关系（前端到后端 or 后端到前端都可以使用），<strong>注意</strong>因为我们是东八区（北京时间），使用时需要加上时区（ timezone = “GMT+8”），<strong>不然所得值会比实际时间晚 8 小时</strong>；</li><li>常用注解属性：</li></ul><table><thead><tr><th>名称</th><th>作用</th></tr></thead><tbody><tr><td>pattern</td><td>约定时间格式：pattern=“yyyy-MM-dd HH:mm:ss”</td></tr><tr><td>timezone</td><td>指定具体时区： timezone = “GMT+8” or timezone = “Asia/Shanghai”</td></tr></tbody></table><ul><li>经过测试使用<strong>单独使用</strong> @JsonFormat 注解时需要先通过 @RequestBody 将入参参数映射到实体后，@JsonFormat 注解才能去对时间格式进行约束；</li><li>POJO 类中也加上了 @JsonFormat 注解：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DateEntity</span> &#123;</span><br><span class="line">    <span class="meta">@JsonFormat(pattern = &quot;yyyy-MM-dd hh&quot;, timezone = &quot;GMT+8&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Date date;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>测试：  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">DateTest(date=Fri Mar <span class="number">07</span> <span class="number">23</span>:<span class="number">59</span>:<span class="number">59</span> CST <span class="number">2025</span>, name=<span class="literal">null</span>, age=<span class="literal">null</span>)</span><br><span class="line">入参的date:Fri Mar <span class="number">07</span> <span class="number">23</span>:<span class="number">59</span>:<span class="number">59</span> CST <span class="number">2025</span></span><br><span class="line">SimpleDateFormat格式化后的date:<span class="number">2025</span>-<span class="number">03</span>-<span class="number">07</span> <span class="number">23</span>:<span class="number">59</span>:<span class="number">59</span></span><br><span class="line">  </span><br><span class="line">--  </span><br><span class="line">  responsebody：</span><br><span class="line"> &#123;</span><br><span class="line">    <span class="string">&quot;date&quot;</span>: <span class="string">&quot;2024-10-14 16:07:38&quot;</span>,</span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="string">&quot;age&quot;</span>: <span class="literal">null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意： 对前端入参和 后段出参都做了约束</p></li></ul><h3 id="三、-DateTimeFormat-注解"><a href="#三、-DateTimeFormat-注解" class="headerlink" title="三、@DateTimeFormat 注解"></a>三、@DateTimeFormat 注解</h3><ul><li>提供者：Spring</li><li>作用：可对 java.util.Date、java.uitl.calendar、java.long.Long 及 Joda 时间类型的属性进行标注，主要处理前端时间类型与后端 pojo 对象中的成员变量进行数据绑定，所约束的时间格式并<strong>不会影响后端返回前端的时间类型数据格式</strong>；</li><li><strong>注意</strong>（注意！注意！注意！讲三遍）：前端入参数据的时间格式必须与注解中定义的时间格式相同，不然会报错，如：@DateTimeFormat(pattern = “yyyy-MM-dd HH:mm”) 则入参的格式必须为 “2020-6-4 10:43”；</li><li>常用注解属性：</li></ul><table><thead><tr><th>名称</th><th>作用</th></tr></thead><tbody><tr><td>iso</td><td>类型为 DateTimeFormat.ISO，常用值：<br>DateTimeFormat.ISO.DATE：格式为 yyyy-MM-dd<br>DateTimeFormat.ISO.DATE_TIME：格式为 yyyy-MM-dd hh:mm:ss.SSSZ<br>DateTimeFormat.ISO.TIME：格式为 hh:mm:ss.SSSZ<br>DateTimeFormat.ISO.NONE：表示不使用 ISO 格式的时间（默认值）</td></tr><tr><td>pattern</td><td>类型为 String，使用自定义时间格式化字符串，如 "yyyy-MM-dd hh:mm:ss"</td></tr><tr><td>style</td><td>类型为 String，通过样式指定日期时间的格式，由两位字符组成，<br>第一位表示日期的样式，第二位表示时间的格式，以下是几个常用的可选值：<br>S：短日期 / 时间的样式<br>M：中日期 / 时间的样式<br>L：短日期 / 时间的样式<br>F：完整日期 / 时间的样子<br>-：忽略日期或时间的样式<br>默认值 style=“SS”</td></tr></tbody></table><h3 id="五、总结-JsonFormat-和-DateTimeFormat-区别"><a href="#五、总结-JsonFormat-和-DateTimeFormat-区别" class="headerlink" title="五、总结 @JsonFormat 和 @DateTimeFormat 区别"></a>五、总结 @JsonFormat 和 @DateTimeFormat 区别</h3><ul><li><code>@JsonFormat</code> <strong>既</strong>可以约束<strong>前端传入的时间类型参数格式</strong>，<strong>也</strong>可以约束<strong>后端响应前端的时间类型格式</strong>；</li><li><code>@DateTimeFormat</code> ：<ul><li>只能<strong>约束</strong>前端入参时间类型的格式，并不会修改原有的日期对象的格式，如果想要获得期望的日期格式，是需要自己手动转换的；</li><li>如果单独使用<code>@DateTimeFormat</code> 时，响应给前端的时间会比实际时间晚 8 个小时（时区原因）。</li><li>针对 <code>@DateTimeFormat</code> 做了补充说明，有场景示例比较详情，需要的大佬可以看一下。</li><li>传送门：<a href="https://blog.csdn.net/zhuzicc/article/details/127956849">Spring @DateTimeFormat 日期格式化时注解浅析分享</a></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 实际开发 </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java开发规范</title>
      <link href="/Java%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83/Java%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83/"/>
      <url>/Java%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83/Java%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83/</url>
      
        <content type="html"><![CDATA[<h1 id="1、关于Object-的-equals"><a href="#1、关于Object-的-equals" class="headerlink" title="1、关于Object 的 equals"></a>1、关于Object 的 equals</h1><p><code>Object.equals()</code> 方法是 Java 语言中的一个基础方法，用来比较两个对象是否相等。以下是它的源代码实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object obj)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="built_in">this</span> == obj);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们需要注意的是，<code>Object</code> 的 <code>equals()</code> 方法是根据对象的引用来判断两个对象是否相等的，而不是根据对象的内容。如果我们要比较两个对象的内容是否相等，我们需要重写 <code>equals()</code> 方法，这样就可以根据对象的具体内容来判断它们是否相等了。不再详述。</p><p>Java 中的 <code>Objects.equals()</code> 方法实际上是由 Java 中的 <code>Objects</code> 类提供的静态方法，以下是它的源代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object a, Object b)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (a == b) || (a != <span class="literal">null</span> &amp;&amp; a.equals(b));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们需要注意的是，这个方法中使用的是逻辑或运算符 (<code>||</code>)。首先检查第一个条件是否为 <code>true</code>，只有当第一个条件为 <code>false</code> 时才会执行第二个条件。这种方式在 Java 中有时被称为 “short-circuiting”。这里也就是短路或，这种技巧可以用来提高代码的效率，避免执行不必要的操作。</p><p><code>Objects.equals()</code> 方法是 Java 中用于比较两个对象是否相等的一个实用工具方法，它可以处理对象为 <code>null</code> 的情况，避免了因对象为 <code>null</code> 而产生 <code>NullPointerException</code> 的问题。具体来说，如果两个参数都是 <code>null</code>，则返回 <code>true</code>；如果一个参数是 <code>null</code> 而另一个不是 <code>null</code>，则返回 <code>false</code>；否则，调用第一个参数的 <code>equals</code> 方法进行比较。这样就避免了空指针异常了。</p><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p>Object的equals方法容易抛出空指针异常，应使用常量或确定有值的对象来调用equals。</p><p><strong>正</strong>： “test”.equals(object)</p><p><strong>反</strong>： object.equals(“test”)</p><p><strong>推荐使用JDK7引入的工具类 java.util.Objects#equals(Object a, Object b)</strong></p><h1 id="2、关于基本数据类型与包装数据类型的使用标准"><a href="#2、关于基本数据类型与包装数据类型的使用标准" class="headerlink" title="2、关于基本数据类型与包装数据类型的使用标准"></a>2、关于基本数据类型与包装数据类型的使用标准</h1><ul><li>【强制】所有POJO类属性必须使用包装数据类型</li><li>【强制】RPC方法的返回值和参数必须使用包装数据类型</li><li>【建议】所有局部变量使用基本数据类型</li></ul><p><a href="https://blog.csdn.net/qing_gee/article/details/101670051?ops_request_misc=%257B%2522request%255Fid%2522%253A%252249329805-7ED5-4DF4-9369-2022277223D4%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=49329805-7ED5-4DF4-9369-2022277223D4&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-9-101670051-null-null.142^v100^pc_search_result_base6&amp;utm_term=%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%92%8C%20%E5%8C%85%E8%A3%85%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%BD%BF%E7%94%A8%E6%A0%87%E5%87%86%20JAVA&amp;spm=1018.2226.3001.4187">Java基本数据类型 与 包装数据类型详解</a></p>]]></content>
      
      
      <categories>
          
          <category> Java开发规范 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java开发规范 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL自增主键与UUID</title>
      <link href="/MySQL/MySQL%E8%87%AA%E5%A2%9E%E4%B8%BB%E9%94%AE%E4%B8%8EUUID/"/>
      <url>/MySQL/MySQL%E8%87%AA%E5%A2%9E%E4%B8%BB%E9%94%AE%E4%B8%8EUUID/</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL自增主键"><a href="#MySQL自增主键" class="headerlink" title="MySQL自增主键"></a>MySQL自增主键</h1><p>自增主键是指自增列上定义的主键，在建表语句中一般是这么定义的： </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT</span><br></pre></td></tr></table></figure><p>插入新记录的时候可以不指定ID 的值，系统会获取当前的ID 最大值加1 作为下一条记录的ID 值。</p><p><strong>也就是说，自增主键的插入数据模式，正好符合 递增插入的场景。每插入一条新记录，都是追加操作，都不涉及挪动其他记录，也不会触发叶子节点的分裂。而有业务逻辑的字段做主键，则往往不容易保证有序插入，这样写数据成本相对较高。</strong></p><p>除了考虑性能外，我们还可以从存储空间的角度来看。假设你的表中确实有一个唯一字段，比如字符串类型的身份证号，那应该用身份成号做主键，还是用自增主键做主键呢？</p><p>由于每个非主键索引的叶子节点上都是主键的值。如果用身份证号做主键，那么每个二级索引的叶子节点占用约20个字节，而如果用整型做主键，则只要4个字节，如果是长整型（bigint）则是8个字节。</p><p><strong>显然，主键长度越小，普通索引的叶子节点就越小，普通索引占用的空间也就越小。</strong></p><p>所以，从性能和存储空间方面考量，自增主键往往是更合理的选择。</p><h2 id="UUID-与-AUTO-INCREAMENT对比"><a href="#UUID-与-AUTO-INCREAMENT对比" class="headerlink" title="UUID 与 AUTO INCREAMENT对比"></a>UUID 与 AUTO INCREAMENT对比</h2><div class="table-container"><table><thead><tr><th>UUID做主键</th><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>1</td><td>唯一标识，不会考虑重复问题</td><td>UUID随机生成，会发生随机IO，影响插入速度，且B+树的页分裂会导致硬盘使用率低</td></tr><tr><td>2</td><td>可以在应用层生成，提高数据库吞吐率</td><td>占用空间较大</td></tr><tr><td>3</td><td>无需担心业务量泄露的风险</td><td>UUID之间比较大小比自增主键ID慢，影响查询速度</td></tr></tbody></table></div><p><strong>注意</strong>：InnoDB中主键索引是聚簇索引，<strong>如果主键索引是自增ID</strong>，只需按照顺序往后排即可，如果是UUID，ID是随机生成的，在数据插入时就造成大量的数据移动，发生随机ID，印象插入速度，造成硬盘的使用率较低</p><div class="table-container"><table><thead><tr><th>自增主键</th><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>1</td><td>字段长度比UUID小</td><td>因为是自增，在某些业务场景下，容易被其他人查到业务量</td></tr><tr><td>2</td><td>数据库自动编号，插入时无需指定ID，按顺序存放，利于检索</td><td>发生数据迁移时，或者表合并时麻烦</td></tr><tr><td>3</td><td>无需担心主键重复问题</td><td>在高并发场景下，竞争自增锁会降低数据的吞吐能力</td></tr></tbody></table></div>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一条SQL的更新语句是如何执行的？</title>
      <link href="/MySQL/%E4%B8%80%E6%9D%A1SQL%E7%9A%84%E6%9B%B4%E6%96%B0%E8%AF%AD%E5%8F%A5%E6%98%AF%E5%A6%82%E4%BD%95%E6%89%A7%E8%A1%8C%E7%9A%84%EF%BC%9F/"/>
      <url>/MySQL/%E4%B8%80%E6%9D%A1SQL%E7%9A%84%E6%9B%B4%E6%96%B0%E8%AF%AD%E5%8F%A5%E6%98%AF%E5%A6%82%E4%BD%95%E6%89%A7%E8%A1%8C%E7%9A%84%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="一条SQL更新语句是如何执行的？"><a href="#一条SQL更新语句是如何执行的？" class="headerlink" title="一条SQL更新语句是如何执行的？"></a>一条SQL更新语句是如何执行的？</h1><p>相信你还记得，一条查询语句的执行过程一般是经过连接器、分析器、优化器、执行器等功能模块，最后到达存储引擎</p><p>那么一条更新语句的执行流程？</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> T(ID <span class="type">int</span> <span class="keyword">primary</span> key, c <span class="type">int</span>);</span><br><span class="line"><span class="keyword">update</span> T <span class="keyword">set</span> c <span class="operator">=</span> c <span class="operator">+</span> <span class="number">1</span> <span class="keyword">where</span> ID <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"># 从这条更新语句出发讨论 一条<span class="keyword">SQL</span>更新语句是如何执行的</span><br></pre></td></tr></table></figure><p>你可能听DBA同事说，MySQL可以恢复到半个月内任意一秒的状态，惊叹的同时，你是不是心中也会不免好奇，这是怎样做到呢</p><p><img src="https://cdn.jsdelivr.net/gh/cgshao02/BLOG_images/img/0d2070e8f84c4801adbfa03bda1f98d9.png" alt="MySQL的逻辑架构图"></p><p>你执行语句前要先链接数据库，这是连接器的工作。</p><p>前面我们说过，在一个表上有更新的时候，跟这张表有关的查询缓存会失效，所以这条语句就会把表T上所有缓存结果都清空。这也就是我们一般不建议使用查询缓存的原因。</p><p>接下来，分词器会通过词法和语法解析知道这是一条更新语句。优化器决定要使用ID这个索引。然后执行器负责具体执行，找到这一行更新。</p><p>与查询流程不一样的是，更新流程还设计两个重要的日志模块，<strong>redo log 和 bin log</strong> </p><h2 id="redo-log"><a href="#redo-log" class="headerlink" title="redo log"></a>redo log</h2><p>背景：在MySQL里有这样一个问题，如果每一次更新操作都需要写进磁盘，然后磁盘也要找到对应的那条记录，然后更新，整个过程IO成本，查找成本都很高。</p><p>MySQL设计者 使用WAL技术提升效率， WAL的全称是Write-Ahead-Logging，它的关键点就是先写日志，再写磁盘</p><p>具体来说就是，当有一条记录需要更新的时候，InnoDB引擎会先把记录写到redo log里面，并更新内存，这个时候更新就完成了，然后InnoDB引擎会在合适的时候，将这个操作记录更新到磁盘里面，而这个更新往往是在系统比较空闲的时候做的，</p><p>InnoDB的redo log是固定大小的，比如可以配置为一组4个文件，每个文件的大小是1GB，那么这块总共就可以记录4GB的操作，从头开始写到末尾，就又回到开头循环写</p><p><img src="https://cdn.jsdelivr.net/gh/cgshao02/BLOG_images/img/16a7950217b3f0f4ed02db5db59562a7.png" alt="img"></p><p>write pos是当前记录的位置，一边写一边后移，写到第3号文件末尾后就回到0号文件开头。checkpoint是当前要擦除的位置，也是往后推移并且循环的，擦除记录前要把记录更新到数据文件。</p><p>write pos和checkpoint之间的是“粉板”上还空着的部分，可以用来记录新的操作。如果write pos追上checkpoint，表示“粉板”满了，这时候不能再执行新的更新，得停下来先擦掉一些记录，把checkpoint推进一下。</p><p>有了redo log，InnoDB就可以保证即使数据库发生异常重启，之前提交的记录都不会丢失，这个能力称为<strong>crash-safe</strong>。</p><p>要理解crash-safe这个概念，可以想想我们前面赊账记录的例子。只要赊账记录记在了粉板上或写在了账本上，之后即使掌柜忘记了，比如突然停业几天，恢复生意后依然可以通过账本和粉板上的数据明确赊账账目。</p><h2 id="重要的日志模块：binlog"><a href="#重要的日志模块：binlog" class="headerlink" title="重要的日志模块：binlog"></a>重要的日志模块：binlog</h2><p>前面我们讲过，MySQL整体来看，其实就有两块：一块是Server层，它主要做的是MySQL功能层面的事情；还有一块是引擎层，负责存储相关的具体事宜。上面我们聊到的粉板redo log是InnoDB引擎特有的日志，而Server层也有自己的日志，称为binlog（归档日志）。</p><p>我想你肯定会问，为什么会有两份日志呢？</p><p>因为最开始MySQL里并没有InnoDB引擎。MySQL自带的引擎是MyISAM，但是MyISAM没有crash-safe的能力，binlog日志只能用于归档。而InnoDB是另一个公司以插件形式引入MySQL的，既然只依靠binlog是没有crash-safe能力的，所以InnoDB使用另外一套日志系统——也就是redo log来实现crash-safe能力。</p><p>这两种日志有以下三点不同。</p><ol><li>redo log是InnoDB引擎特有的；binlog是MySQL的Server层实现的，所有引擎都可以使用。</li><li>redo log是物理日志，记录的是“在某个数据页上做了什么修改”；binlog是逻辑日志，记录的是这个语句的原始逻辑，比如“给ID=2这一行的c字段加1 ”。</li><li>redo log是循环写的，空间固定会用完；binlog是可以追加写入的。“追加写”是指binlog文件写到一定大小后会切换到下一个，并不会覆盖以前的日志。</li></ol><p>有了对这两个日志的概念性理解，我们再来看执行器和InnoDB引擎在执行这个简单的update语句时的内部流程。</p><ol><li>执行器先找引擎取ID=2这一行。ID是主键，引擎直接用树搜索找到这一行。如果ID=2这一行所在的数据页本来就在内存中，就直接返回给执行器；否则，需要先从磁盘读入内存，然后再返回。</li><li>执行器拿到引擎给的行数据，把这个值加上1，比如原来是N，现在就是N+1，得到新的一行数据，再调用引擎接口写入这行新数据。</li><li>引擎将这行新数据更新到内存中，同时将这个更新操作记录到redo log里面，此时redo log处于prepare状态。然后告知执行器执行完成了，随时可以提交事务。</li><li>执行器生成这个操作的binlog，并把binlog写入磁盘。</li><li>执行器调用引擎的提交事务接口，引擎把刚刚写入的redo log改成提交（commit）状态，更新完成。</li></ol><p>这里我给出这个update语句的执行流程图，图中浅色框表示是在InnoDB内部执行的，深色框表示是在执行器中执行的。</p><p><img src="https://cdn.jsdelivr.net/gh/cgshao02/BLOG_images/img/2e5bff4910ec189fe1ee6e2ecc7b4bbe.png" alt="img"></p><h2 id="两段式提交"><a href="#两段式提交" class="headerlink" title="两段式提交"></a>两段式提交</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">两阶段提交原理描述：</span><br><span class="line"><span class="code">    1、InnoDB redo log 写盘，InnoDB事物进入prepare状态。</span></span><br><span class="line"><span class="code">    2、如果prepare成功，binlog 写盘，那么再继续将事物日志持久化到binlog，如果持久化成功，那么InnoDB事物则会进入commit状态（在redo log里面写一个commit记录）</span></span><br><span class="line"><span class="code"></span></span><br><span class="line">备注： 每个事物binlog 的末尾，会记录一个XID event， 标志着事物是否是否提交成功，也就是说，回滚过程中，binlog最后一个XID event之后的内容都应该会被清除</span><br></pre></td></tr></table></figure><p>为什么日志需要“两阶段提交”。这里不妨用反证法来进行解释。</p><p>由于redo log 和 bin log  是独立的逻辑，如果不用两阶段提交，要么就是先写完redo log 再写 bin log 或者采用反过来的顺讯。我们看看这两种方式有什么问题。</p><p>仍然用前面的update语句来做例子。假设当前ID = 2的行，字段c的值是0，再假设执行update语句的过程中在写完第一个日志后，第二个日志还没有写完期间发生了crash，会出现什么情况呢？</p><p>1、<strong>先写redo log 后写 binlog</strong>。 假设在redo log写完，binlog 还没有写完的时候，MySQL进程异常重启。由于我们前面说过的，redo log写完之后，系统即使崩溃，仍然能够把数据恢复回来，所以恢复后这一行c的值是1.</p><p>但是由于binlog没写完就crash了，这时候binlog里面就没有记录这个语句。因此，之后备份日志的时候，存起来的binlog里面就没有这条语句。然后你会发现，如果需要用这个binlog来恢复临时库的话，由于这个binlog丢失，这个临时哭就会少了这一次更新，恢复出来的这一行c的值就是0，与原库不同</p><p>2、<strong>先写binlog 后写redo log</strong>。 如果在binlog写完之后crash ，由于 redo log 还没写，崩溃恢复后这个食物无效，所以这一行c的值是0。但是binlog里面已经记录了“把c从0改成1”这个日志。所以，之后用binlog来恢复的时候就多了一个事物出来，恢复出来的这一行c的值就是1，与原库不同。</p><p>—- 如果不使用“两阶段提交” ，那么数据库的状态就有可能和用它的日志恢复出来的库的状态不一致</p><p><strong>简单说，redo log和binlog都可以用于表示事务的提交状态，而两阶段提交就是让这两个状态保持逻辑上的一致。</strong></p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL使用B+树不使用跳表?(Reids中Zset使用跳表不使用B+树)</title>
      <link href="/MySQL/MySQL%E4%BD%BF%E7%94%A8B-%E6%A0%91%E4%B8%8D%E4%BD%BF%E7%94%A8%E8%B7%B3%E8%A1%A8-Reids%E4%B8%ADZset%E4%BD%BF%E7%94%A8%E8%B7%B3%E8%A1%A8%E4%B8%8D%E4%BD%BF%E7%94%A8B-%E6%A0%91/"/>
      <url>/MySQL/MySQL%E4%BD%BF%E7%94%A8B-%E6%A0%91%E4%B8%8D%E4%BD%BF%E7%94%A8%E8%B7%B3%E8%A1%A8-Reids%E4%B8%ADZset%E4%BD%BF%E7%94%A8%E8%B7%B3%E8%A1%A8%E4%B8%8D%E4%BD%BF%E7%94%A8B-%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<p>在我们的印象中，MySQL 数据表里无非就是存储一行行的数据。跟个 [直接遍历这一行行数据，性能就是 O(n)，比较慢。为了加速查询，使用了 <strong>B + 树</strong>来做索引，将查询性能优化到了 <strong>O(lg(n))</strong>。</p><p>但问题就来了，查询数据性能在 lg(n) 级别的数据结构有很多，<font style="color:rgb(37, 37, 37);">比如</font>redis<font style="color:rgb(37, 37, 37);">的zset里用到的</font><strong><font style="color:rgb(37, 37, 37);">跳表</font></strong><font style="color:rgb(37, 37, 37);">，也是</font><strong><font style="color:rgb(37, 37, 37);">lg(n)</font></strong><font style="color:rgb(37, 37, 37);">，并且实现还贼简单。</font></p><p><strong><font style="color:rgb(37, 37, 37);">那为什么mysql的索引，不使用跳表呢？</font></strong></p><h2 id="一、B-树"><a href="#一、B-树" class="headerlink" title="一、B+ 树"></a>一、B+ 树</h2><p> B + 树的结构。</p><p><img src="https://cdn.jsdelivr.net/gh/cgshao02/BLOG_images/imgs/f452ce5439f04e98bb061be352c5489c" alt=""></p><p>B + 树查询过程</p><p>如上图，一般 B + 树是由多个页组成的<strong>多层级</strong>结构，每个页 16Kb，对于主键索引来说，最末级的<strong>叶子结点</strong>放行数据，<strong>非叶子结点</strong>放的则是索引信息（主键 id 和页号），用于加速查询。</p><p>比方说我们想要查找行数据 5。会先从顶层页的 record 们入手。<strong>record 里包含了主键 id 和页号（页地址）</strong>。关注黄色的箭头，向左最小 id 是 1，向右最小 id 是 7。那 id=5 的数据如果存在，那必定在左边箭头。于是顺着的 record 的页地址就到了 6 号数据页里，再判断 id=5&gt;4，所以肯定在右边的数据页里，于是加载 105 号数据页。</p><p>在 105 号数据页里，虽然有多行数据，但也<strong>不是挨个遍历的</strong>，数据页内还有个<strong>页目录</strong>的信息，它可以通过<strong>二分查找</strong>的方式加速查询行数据，于是找到 id=5 的数据行，完成查询。</p><p>从上面可以看出，B + 树利用了<strong>空间换时间</strong>的方式（构造了一批非叶子结点用于存放索引信息），<strong>将查询时间复杂度从 O(n) 优化为 O(lg(n))</strong>。</p><h2 id="二、跳表"><a href="#二、跳表" class="headerlink" title="二、跳表"></a>二、跳表</h2><p>（具体查询方式见 Redis—跳表原理）</p><p>看完 B + 树，我们再来看下跳表是怎么来的。</p><p>同样的，还是为了存储一行行的数据。</p><p>我们可以将它们用<strong>链表</strong>串起来。</p><p><img src="https://cdn.jsdelivr.net/gh/cgshao02/BLOG_images/imgs/d763b4412f4b4cd682908507be08589a" alt=""></p><p>单链表</p><p>想要查询链表中的其中一个结点，时间复杂度是 O(n)，这谁顶得住，于是将<strong>部分</strong>链表结点提出来，再构建出一个新的链表。</p><p><img src="https://cdn.jsdelivr.net/gh/cgshao02/BLOG_images/imgs/9fb38c939d684ae1b596516ddd7d169a" alt=""></p><p>两层跳表</p><p>这样当我想要查询一个数据的时候，我先查上层的链表，就很容易知道数据落在<strong>哪个范围</strong>，然后<strong>跳到下一个层级里进行查询。</strong>这样就把搜索范围一下子缩小了一大半。</p><p>比如查询 id=10 的数据，我们先在上层遍历，依次判断 1,6,12，很快就可以判断出 10 在 6 到 12 之间，然后往下一跳，就可以在遍历 6,7,8,9,10 之后，确定 id=10 的位置。直接将查询范围从原来的 1 到 10，变成现在的 1,6,7,8,9,10，算是砍半了。</p><p><img src="https://cdn.jsdelivr.net/gh/cgshao02/BLOG_images/imgs/a86edf7371be419c833d550fc9f8935e" alt=""></p><p>两层跳表查找 id 为 10 的数据</p><p>既然两层链表就直接将查询范围砍半了，那我<strong>多加几层</strong>，岂不妙哉？</p><p>于是跳表就这样变成了多层。</p><p><img src="https://cdn.jsdelivr.net/gh/cgshao02/BLOG_images/imgs/0d005de1d63f45faad1ba79ba8a9afcd" alt=""></p><p>三层跳表</p><p>如果还是查询 id=10 的数据，就只需要查询 1,6,9,10 就能找到，比两层的时候更快一些。</p><p><img src="https://cdn.jsdelivr.net/gh/cgshao02/BLOG_images/imgs/8ec273f9a79e43b68b101ff37289ec5b" alt=""></p><p>三层跳表查询 id 为 10 的数据</p><h2 id="三、插入对比"><a href="#三、插入对比" class="headerlink" title="三、插入对比"></a>三、插入对比</h2><p>可以看出，跳表也是通过<strong>牺牲空间换取时间</strong>的方式提升查询性能。<strong>时间复杂度都是 lg(n)</strong>。</p><p>从上面可以看到，B + 树和跳表的<strong>最下面一层，都包含了所有的数据</strong>，且都是<strong>顺序的，适合用于范围查询</strong>。往上的层级都是构建出来用于提升搜索性能的。这两者实在是太像了。但他们两者在<strong>新增和删除数据</strong>时，还是有些区别的。下面我们以新增数据为例聊一下。</p><p>B + 树本质上是一种多叉平衡二叉树。</p><p>关键在于 “ <strong>平衡</strong> “ 这两个字，对于多叉树结构来说，它的含义是子树们的高度层级尽量一致（一般最多差一个层级），这样在搜索的时候，不管是到哪个子树分支，搜索次数都差不了太多。</p><p>当数据库表不断插入新的数据时，为了维持 B + 树的平衡，B + 树会不断分裂调整数据页。</p><p>我们知道 B + 树分为<strong>叶子结点和非叶子结点</strong>。</p><p>当插入一条数据时，叶子结点和它上层的索引结点（非叶子结点）最大容量都是 16k，它们都有可能会满。</p><p>为了简化问题，我们<strong>假设</strong>一个数据页只能放三条行数据或索引。</p><p>加入一条数据，根据数据页会不会满，分为三种情况。</p><ul><li><strong>叶子结点和索引结点都没满</strong>。这种情况最简单，直接插入到叶子结点中就好了。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/cgshao02/BLOG_images/imgs/e07aa8a79e9843d39f1683816b16aaee" alt=""></p><p>叶子和非叶子都未满</p><ul><li><strong>叶子结点满了，但索引结点没满</strong>。此时需要拆分叶子结点，同时索引结点要增加新的索引信息。</li></ul><p><img src="https://p9.toutiaoimg.com/origin/tos-cn-i-qvj2lq49k0/d5a6e764c24c448aa2b8c5ecd9a45aed?from=pc" alt=""></p><p>叶子满了但非叶子未满. drawio</p><ul><li><strong>叶子结点满了，且索引结点也满了</strong>。叶子和索引结点都要拆分，同时往上还要再<strong>加一层索引。</strong></li></ul><p><img src="https://cdn.jsdelivr.net/gh/cgshao02/BLOG_images/imgs/ab113f85f7a44f9f9364a29817fb9371" alt=""></p><p>叶子和非叶子都满了</p><p>从上面可以看到，只有在叶子和索引结点<strong>都满了</strong>的情况下，B + 树才会考虑加入一层新的结点。</p><p>而从之前的文章知道，要把三层 B + 树塞满，那大概需要 2kw 左右的数据。</p><p>跳表同样也是很多层，新增一个数据时，最底层的链表需要插入数据。</p><p>此时，<strong>是否需要在上面的几层中加入数据做索引呢？</strong></p><p>这个就纯靠<strong>随机函数</strong>了。</p><p>理论上为了达到<strong>二分的效果</strong>，每一层的结点数需要是下一层结点数的二分之一。</p><p>也就是说现在有一个新的数据插入了，它有 50% 的概率需要在第二层加入索引，有 25% 的概率需要在第三层加个索引，以此类推，直到最顶层。</p><p>举个例子，如果跳表中插入数据 id=6，且随机函数返回第三层（有 25% 的概率），那就需要在跳表的最底层到第三层都插入数据。</p><p><img src="https://cdn.jsdelivr.net/gh/cgshao02/BLOG_images/imgs/8c27573cf77343ad87633788736eb02f" alt=""></p><p>跳表插入数据</p><p>如果这个随机函数设计成上面这样，当<strong>数据量样本足够大</strong>的时候，数据的分布就符合我们理想中的 “二分”。</p><p>跟上面 B + 树不一样，跳表是否新增层数，纯粹靠随机函数，根本不关心前后上下结点。</p><p>好了，基础科普也结束了，我们可以进入正题了。</p><h2 id="四、总结（重点！！！）"><a href="#四、总结（重点！！！）" class="headerlink" title="四、总结（重点！！！）"></a>四、总结（重点！！！）</h2><p><strong>B + 树</strong>是多叉树结构，每个结点都是一个 16k 的数据页，能存放较多索引信息，所以<strong>扇出很高</strong>。<strong>三层</strong>左右就可以存储 2kw 左右的数据（知道结论就行，想知道原因可以看之前的文章）。也就是说查询一次数据，如果这些数据页都在磁盘里，那么最多需要查询<strong>三次磁盘 IO</strong>。</p><p><strong>跳表</strong>是链表结构，一条数据一个结点，如果最底层要存放 2kw 数据，且每次查询都要能达到<strong>二分查找</strong>的效果，2kw 大概在 2 的 24 次方左右，所以，跳表大概高度在 <strong>24 层</strong>左右。最坏情况下，这 24 层数据会分散在不同的数据页里，也即是查一次数据会经历 <strong>24 次磁盘 IO</strong>。</p><p>因此存放同样量级的数据，B + 树的高度比跳表的要少，如果放在 mysql 数据库上来说，就是<strong>磁盘 IO 次数更少，因此 B + 树查询更快</strong>。</p><p>而针对<strong>写操作</strong>，B + 树需要拆分合并索引数据页，跳表则独立插入，并根据随机函数确定层数，没有旋转和维持平衡的开销，因此<strong>跳表的写入性能会比 B + 树要好。</strong></p><p>其实，mysql 的<strong>存储引擎是可以换的</strong>，以前是 myisam，后来才有的 innodb，它们底层索引用的都是 <strong>B + 树</strong>。也就是说，你完全可以造一个索引为跳表的存储引擎装到 mysql 里。事实上，facebook 造了个 rocksDB 的存储引擎，里面就用了<strong>跳表</strong>。直接说结论，它的<strong>写入性能</strong>确实是比 innodb 要好，但<strong>读性能</strong>确实比 innodb 要差不少。</p><h2 id="五、为什么Redis-里面用跳表-而-MySQL里面用B-树？（关键）"><a href="#五、为什么Redis-里面用跳表-而-MySQL里面用B-树？（关键）" class="headerlink" title="五、为什么Redis 里面用跳表 而 MySQL里面用B+树？（关键）"></a>五、为什么Redis 里面用跳表 而 MySQL里面用B+树？（关键）</h2><p>redis 支持多种数据结构，里面有个<strong>有序集合</strong>，也叫 <strong>ZSET</strong>。内部实现就是<strong>跳表</strong>。那为什么要<strong>用跳表而不用 B + 树等结构呢？</strong></p><p>大家知道，redis 是纯纯的内存数据库。</p><p>进行读写数据都是操作内存，跟磁盘没啥关系，因此也<strong>不存在磁盘 IO</strong> 了，所以层高就不再是跳表的劣势了。</p><p>并且前面也提到 B + 树是有一系列合并拆分操作的，换成红黑树或者其他 AVL 树的话也是各种旋转，目的也是<strong>为了保持树的平衡</strong>。</p><p>而跳表插入数据时，只需要随机一下，就知道自己要不要往上加索引，根本不用考虑前后结点的感受，也就<strong>少了旋转平衡的开销</strong>。</p><p>因此，redis 选了跳表，而不是 B + 树。</p><ul><li>B + 树是多叉平衡搜索树，扇出高，只需要 3 层左右就能存放 2kw 左右的数据，同样情况下跳表则需要 24 层左右，假设层高对应<strong>磁盘 IO</strong>，那么 B + 树的读性能会比跳表要好，因此 mysql 选了 B + 树做索引。</li><li>redis 的读写全在内存里进行操作，不涉及磁盘 IO，同时跳表实现简单，相比 B + 树、AVL 树、少了旋转树结构的开销，因此 redis 使用跳表来实现 ZSET，而不是树结构。</li><li>存储引擎 RocksDB 内部使用了跳表，对比使用 B + 树的 innodb，虽然写性能更好，但读性能属实差了些。在读多写少的场景下，B + 树依旧 YYDS。</li></ul>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java日志框架--转载</title>
      <link href="/%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6/Java%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6/"/>
      <url>/%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6/Java%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6/</url>
      
        <content type="html"><![CDATA[<p>随着互联网和大数据的迅猛发展，分布式日志系统和日志分析系统已广泛应用，几乎所有应用程序都使用各种日志框架记录程序运行信息。因此，作为工程师，了解主流的日志记录框架非常重要。虽然应用程序的运行结果不受日志的有无影响，但没有日志的应用程序是不完整的，甚至可以说是有缺陷的。优秀的日志系统可以<strong>记录操作轨迹</strong>、<strong>监控系统运行状态</strong>和<strong>解决系统故障</strong>。</p><hr><p>目前常用的日志框架有 Log4j，Log4j 2，Commons Logging，Slf4j，Logback，JUL。这些日志框架可以分为两种类型：门面日志和日志系统。</p><h2 id="日志门面"><a href="#日志门面" class="headerlink" title="日志门面"></a>日志门面</h2><p><strong>日志门面（Logging Facade</strong> 是一种设计模式，用于在应用程序中实现日志记录的抽象层。它提供了一组统一的接口和方法，即相应的 API，而不提供具体的接口实现。日志门面在使用时，可以动态或者静态地指定具体的日志框架实现，解除了接口和实现的耦合，使用户可以灵活地选择日志的具体实现框架。</p><h2 id="日志系统"><a href="#日志系统" class="headerlink" title="日志系统"></a>日志系统</h2><p><strong>日志系统（Logging System</strong> 是指用于记录和管理应用程序运行时产生的日志信息的软件工具或框架。与日志门面相对，它提供了具体的日志接口实现，应用程序通过它执行日志打印的功能，如日志级别管理、日志格式化、日志输出目标设置等。常见的日志系统包括 Log4j、Logback、Java Util Logging 等。</p><p><img src="https://cdn.jsdelivr.net/gh/cgshao02/BLOG_images/img/81435ba595d54cf0b988d3ce21b509c7~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" alt=""></p><p>通过使用日志门面，我们可以在应用程序中使用统一的 API 进行日志记录，而具体的日志实现可以根据需要选择和配置。这样，我们可以根据项目需求和团队喜好来灵活选择、切换和配置日志系统，而不会对应用程序代码造成太大影响。</p><h2 id="避免环形依赖"><a href="#避免环形依赖" class="headerlink" title="避免环形依赖"></a>避免环形依赖</h2><p>Slf4j 的作者 Ceki Gülcü 当年因为觉得 Commons-Logging 的 API 设计的不好，性能也不够高，因而设计了 Slf4j。而他为了 Slf4j 能够兼容各种类型的日志系统实现，还设计了相当多的 adapter 和 bridge 来连接，如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/cgshao02/BLOG_images/img/8e666d107e3649569408a51e08509240~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp" style="zoom:50%;" /></p><p>鉴于此，在引入日志框架依赖的时候要尽力避免，比如以下组合就不能同时出现：</p><p>•jcl-over-slf4j 和 slf4j-jcl</p><p>•log4j-over-slf4j 和 slf4j-log4j12</p><p>•jul-to-slf4j 和 slf4j-jdk14</p><h2 id="日志框架的使用选择"><a href="#日志框架的使用选择" class="headerlink" title="日志框架的使用选择"></a>日志框架的使用选择</h2><p>常用的组合使用方式是 Slf4j &amp; Logback 组合使用，Commons Logging &amp; Log4j 组合使用。</p><p><strong>推荐</strong>：</p><p>Slf4j &amp; Logback</p><p><strong>原因</strong>：</p><ol><li><p>Slf4j 实现机制决定 Slf4j 限制较少，使用范围更广。相较于 Commons-Logging，Slf4j 在编译期间便静态绑定本地的 Log 库，其通用性要好得多；</p></li><li><p>Logback 拥有更好的性能。Logback 声称：某些关键操作，比如判定是否记录一条日志语句的操作，其性能得到了显著的提高，这个操作在 Logback 中只需 3 ns，而在 Log4j 则需要 30 ns；</p></li><li><p>Slf4j 支持参数化，使用占位符号，代码更为简洁，如下例子：</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在使用 Commons-Logging 时，通常的做法是 </span></span><br><span class="line"><span class="keyword">if</span>(log.isDebugEnabled())&#123; </span><br><span class="line">    log.debug(<span class="string">&quot;User name： &quot;</span> + user.getName() + <span class="string">&quot; buy goods id ：&quot;</span> + good.getId()); </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 在 Slf4j 阵营，你只需这么做： </span></span><br><span class="line">log.debug(<span class="string">&quot;User name：&#123;&#125; ,buy goods id ：&#123;&#125;&quot;</span>, user.getName(),good.getId());</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li><p>Logback 的所有文档是免费提供的，Log4j 只提供部分免费文档而需要用户去购买付费文档；</p></li><li><p>MDC (Mapped Diagnostic Contexts) 用 Filter，将当前用户名等业务信息放入 MDC 中，在日志 format 定义中即可使用该变量。具体而言，在诊断问题时，通常需要打出日志。如果使用 Log4j，则只能降低日志级别，但是这样会打出大量的日志，影响应用性能；如果使用 Logback，保持原定日志级别而过滤某种特殊情况，如 Alice 这个用户登录，日志将打在 DEBUG 级别而其它用户可以继续打在 WARN 级别。实现这个功能只需加 4 行 XML 配置；</p></li><li><p>自动压缩日志。RollingFileAppender 在产生新文件的时候，会自动压缩已经打出来的日志文件。压缩过程是异步的，因此在压缩过程中应用几乎不会受影响。</p></li></ol><hr><h2 id="maven-依赖"><a href="#maven-依赖" class="headerlink" title="maven 依赖"></a>maven 依赖</h2><p>pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--日志框架接口--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--日志框架接口实现--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--日志框架核心组件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--自动化注解工具--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><p>logback.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--默认日志配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">resource</span>=<span class="string">&quot;org/springframework/boot/logging/logback/defaults.xml&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 控制台日志 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;CONSOLE&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;CONSOLE_LOG_PATTERN&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Info日志 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;FILE-INFO&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">file</span>&gt;</span>$&#123;LOG_PATH&#125;/$&#123;LOG_FILE&#125;-info.log<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">append</span>&gt;</span>true<span class="tag">&lt;/<span class="name">append</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.filter.LevelFilter&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>INFO<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMatch</span>&gt;</span>ACCEPT<span class="tag">&lt;/<span class="name">onMatch</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMismatch</span>&gt;</span>NEUTRAL<span class="tag">&lt;/<span class="name">onMismatch</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$&#123;LOG_PATH&#125;/$&#123;LOG_FILE&#125;-info-%d&#123;yyyy-MM-dd&#125;.%i.log<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span> <span class="comment">&lt;!-- 日志文件的路径和名称 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">timeBasedFileNamingAndTriggeringPolicy</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>200MB<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span> <span class="comment">&lt;!-- 单个日志文件的最大大小 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">timeBasedFileNamingAndTriggeringPolicy</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>15<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span> <span class="comment">&lt;!-- 保留的历史日志文件数量 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">totalSizeCap</span>&gt;</span>2GB<span class="tag">&lt;/<span class="name">totalSizeCap</span>&gt;</span> <span class="comment">&lt;!-- 所有日志文件的总大小上限 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">cleanHistoryOnStart</span>&gt;</span>true<span class="tag">&lt;/<span class="name">cleanHistoryOnStart</span>&gt;</span> <span class="comment">&lt;!-- 在启动时清除历史日志文件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;FILE_LOG_PATTERN&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Warn日志 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;FILE-WARN&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">file</span>&gt;</span>$&#123;LOG_PATH&#125;/$&#123;LOG_FILE&#125;-warn.log<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">append</span>&gt;</span>true<span class="tag">&lt;/<span class="name">append</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.filter.LevelFilter&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>WARN<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMatch</span>&gt;</span>ACCEPT<span class="tag">&lt;/<span class="name">onMatch</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMismatch</span>&gt;</span>DENY<span class="tag">&lt;/<span class="name">onMismatch</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$&#123;LOG_PATH&#125;/$&#123;LOG_FILE&#125;-warn-%d&#123;yyyy-MM-dd&#125;.%i.log<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span> <span class="comment">&lt;!-- 日志文件的路径和名称 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">timeBasedFileNamingAndTriggeringPolicy</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>200MB<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span> <span class="comment">&lt;!-- 单个日志文件的最大大小 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">timeBasedFileNamingAndTriggeringPolicy</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>15<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span> <span class="comment">&lt;!-- 保留的历史日志文件数量 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">totalSizeCap</span>&gt;</span>2GB<span class="tag">&lt;/<span class="name">totalSizeCap</span>&gt;</span> <span class="comment">&lt;!-- 所有日志文件的总大小上限 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">cleanHistoryOnStart</span>&gt;</span>true<span class="tag">&lt;/<span class="name">cleanHistoryOnStart</span>&gt;</span> <span class="comment">&lt;!-- 在启动时清除历史日志文件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;FILE_LOG_PATTERN&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Error日志 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;FILE-ERROR&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">file</span>&gt;</span>$&#123;LOG_PATH&#125;/$&#123;LOG_FILE&#125;-error.log<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">append</span>&gt;</span>true<span class="tag">&lt;/<span class="name">append</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.filter.LevelFilter&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>ERROR<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMatch</span>&gt;</span>ACCEPT<span class="tag">&lt;/<span class="name">onMatch</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMismatch</span>&gt;</span>DENY<span class="tag">&lt;/<span class="name">onMismatch</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$&#123;LOG_PATH&#125;/$&#123;LOG_FILE&#125;-error-%d&#123;yyyy-MM-dd&#125;.%i.log<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">timeBasedFileNamingAndTriggeringPolicy</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>200MB<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">timeBasedFileNamingAndTriggeringPolicy</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>15<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">totalSizeCap</span>&gt;</span>2GB<span class="tag">&lt;/<span class="name">totalSizeCap</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">cleanHistoryOnStart</span>&gt;</span>true<span class="tag">&lt;/<span class="name">cleanHistoryOnStart</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;FILE_LOG_PATTERN&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 异步输出 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;info-asyn&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.AsyncAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;FILE-INFO&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">queueSize</span>&gt;</span>512<span class="tag">&lt;/<span class="name">queueSize</span>&gt;</span> <span class="comment">&lt;!-- 异步队列的大小 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;warn-asyn&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.AsyncAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;FILE-WARN&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">queueSize</span>&gt;</span>512<span class="tag">&lt;/<span class="name">queueSize</span>&gt;</span> <span class="comment">&lt;!-- 异步队列的大小 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;error-asyn&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.AsyncAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;FILE-ERROR&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">queueSize</span>&gt;</span>512<span class="tag">&lt;/<span class="name">queueSize</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 应用日志 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;com.improve.fuqige.bronze&quot;</span> <span class="attr">additivity</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;CONSOLE&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;FILE-INFO&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;FILE-WARN&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;FILE-ERROR&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 总日志出口 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;$&#123;logging.level.root&#125;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;CONSOLE&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;info-asyn&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;warn-asyn&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;error-asyn&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>applicantion.properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">logging.file</span>=<span class="string">fuqige-bronze</span></span><br><span class="line"><span class="attr">logging.path</span>=<span class="string">XXXXXX/Logs/XXXXXX</span></span><br><span class="line"><span class="attr">logging.level.root</span>=<span class="string">info</span></span><br><span class="line"><span class="attr">logging.level.com.improve.fuqige.bronze</span>=<span class="string">info</span></span><br><span class="line"><span class="attr">logging.pattern.console</span>=<span class="string">%cyan(%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;) %yellow([%thread]) %highlight(%-5level) %boldGreen(%logger&#123;80&#125;[LineNumber:%L]): %highlight(%msg%n)</span></span><br><span class="line"><span class="attr">logging.pattern.file</span>=<span class="string">%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%X&#123;requestId&#125;] %-5level --- [%thread] %logger&#123;80&#125;[LineNumber:%L]: %msg%n</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="测试用例"><a href="#测试用例" class="headerlink" title="测试用例"></a>测试用例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;进来了!&quot;</span>);</span><br><span class="line">        log.warn(<span class="string">&quot;进来了!&quot;</span>);</span><br><span class="line">        log.error(<span class="string">&quot;进来了!&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello, world! requestId=&quot;</span> + MDC.get(<span class="string">&quot;requestId&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><p>参考资料</p><p>Java 日志框架： <a href="https://link.juejin.cn/?target=https%3A%2F%2Fzhuanlan.zhihu.com%2Fp%2F365154773" title="https://zhuanlan.zhihu.com/p/365154773">zhuanlan.zhihu.com/p/365154773</a></p><p>SLF4J 框架常见的用法和最佳实践： <a href="https://juejin.cn/post/7215569601161166906" title="https://juejin.cn/post/7215569601161166906">juejin.cn/post/721556…</a></p><p>作者：京东零售 张洪</p><p>来源：京东云开发者社区 转载请注明来源</p>]]></content>
      
      
      <categories>
          
          <category> 日志框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日志框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Lombok中@Slf4j使用</title>
      <link href="/uncategorized/Lombok%E4%B8%AD-Slf4j%E4%BD%BF%E7%94%A8/"/>
      <url>/uncategorized/Lombok%E4%B8%AD-Slf4j%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>纪录一次使用 LomBok @Slf4j 爆红的历史</p><h2 id="使用Slf4j-和-logback纪录日志"><a href="#使用Slf4j-和-logback纪录日志" class="headerlink" title="使用Slf4j 和 logback纪录日志"></a>使用Slf4j 和 logback纪录日志</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> shaochenguang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2024/9/26 16:25</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> testLombokLog</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">testLombokLog</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">log</span> <span class="operator">=</span> LoggerFactory.getLogger(testLombokLog.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;wcnm终于好了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用lombok纪录日志的流程"><a href="#使用lombok纪录日志的流程" class="headerlink" title="使用lombok纪录日志的流程"></a>使用lombok纪录日志的流程</h2><p>使用lombok插件和@Slf4j注解能够减少<br>private static final Logger log = LoggerFactory.getLogger(类.class);</p><p>1、使用IDEA 首先安装Lombok 插件</p><p>2、 再pom文件中加入 lombok的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.26<span class="tag">&lt;/<span class="name">version</span>&gt;</span><span class="comment">&lt;!--版本号自己选一个就行--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3、再需要打印日志的类上面加入@Slf4j注解</p><p>然后就可以在类中使用 log.info() 等进行打印日志了</p><p><strong>但是，经过上述步骤后 log.info()爆红</strong></p><p><strong>解决方式</strong>:重新加入下述注解</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.24<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.30<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="原因：TODO"><a href="#原因：TODO" class="headerlink" title="原因：TODO"></a>原因：TODO</h2>]]></content>
      
      
      
        <tags>
            
            <tag> Lombok </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>KafKa基础原理</title>
      <link href="/KafKa/KafKa%E5%9F%BA%E7%A1%80%E5%8E%9F%E7%90%86/"/>
      <url>/KafKa/KafKa%E5%9F%BA%E7%A1%80%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h3 id="一、概念理解"><a href="#一、概念理解" class="headerlink" title="一、概念理解"></a>一、概念理解</h3><p><strong>Kafka</strong> 是最初由 Linkedin 公司开发，是一个分布式、支持分区的（partition）、多副本的（replica），基于 zookeeper 协调的<strong>分布式消息系统</strong>，它的最大的特性就是可以实时的处理大量数据以满足各种需求场景：比如基于 hadoop 的批处理系统、低延迟的实时系统、storm/Spark 流式处理引擎，web/nginx 日志、访问日志，消息服务等等，用 scala 语言编写，Linkedin 于 2010 年贡献给了 Apache 基金会并成为顶级开源 项目。</p><h4 id="（1）产生背景"><a href="#（1）产生背景" class="headerlink" title="（1）产生背景"></a>（1）产生背景</h4><p>当今社会各种应用系统诸如商业、社交、搜索、浏览等像信息工厂一样不断的生产出各种信息，在大数据时代，我们面临如下几个挑战：</p><ol><li>如何收集这些巨大的信息</li><li>如何分析它</li><li>如何及时做到如上两点</li></ol><p>以上几个挑战形成了一个业务需求模型，即生产者生产（produce）各种信息，消费者消费（consume）（处理分析）这些信息，而在生产者与消费者之间，需要一个沟通两者的桥梁 - 消息系统。从一个微观层面来说，这种需求也可理解为不同的系统之间如何传递消息。</p><p><strong>Kafka 诞生</strong> Kafka 由 linked-in 开源 kafka - 即是解决上述这类问题的一个框架，它实现了生产者和消费者之间的无缝连接。 kafka - 高产出的分布式消息系统 (A high-throughput distributed messaging system)</p><h4 id="（2）Kafka-的特性"><a href="#（2）Kafka-的特性" class="headerlink" title="（2）Kafka 的特性"></a>（2）Kafka 的特性</h4><div class="table-container"><table><thead><tr><th>特性</th><th>分布式</th><th>高性能</th><th>持久性和扩展行</th></tr></thead><tbody><tr><td></td><td>多分区</td><td>高吞吐量</td><td>数据可持久化</td></tr><tr><td></td><td>多副本</td><td>低延迟</td><td>容错性</td></tr><tr><td></td><td>多订阅者</td><td>高并发</td><td>支持水平在线扩展</td></tr><tr><td></td><td>基于ZooKeeper调度</td><td>时间复杂度O（1）</td><td>消息自动平衡</td></tr></tbody></table></div><ul><li><strong>高吞吐量、低延迟</strong>：kafka 每秒可以处理几十万条消息，它的延迟最低只有几毫秒</li><li><strong>可扩展性</strong>：kafka 集群支持热扩展</li><li><strong>持久性、可靠性</strong>：消息被持久化到本地磁盘，并且支持数据备份防止数据丢失</li><li><strong>容错性</strong>：允许集群中节点失败（若副本数量为 n, 则允许 n-1 个节点失败）</li><li><strong>高并发</strong>：支持数千个客户端同时读写</li></ul><h4 id="（3）Kafka-场景应用"><a href="#（3）Kafka-场景应用" class="headerlink" title="（3）Kafka 场景应用"></a>（3）Kafka 场景应用</h4><ul><li><strong>日志收集</strong>：一个公司可以用 Kafka 可以收集各种服务的 log，通过 kafka 以统一接口服务的方式开放给各种 consumer，例如 hadoop、Hbase、Solr 等。</li><li><strong>消息系统</strong>：解耦和生产者和消费者、缓存消息等。</li><li><strong>用户活动跟踪</strong>：Kafka 经常被用来记录 web 用户或者 app 用户的各种活动，如浏览网页、搜索、点击等活动，这些活动信息被各个服务器发布到 kafka 的 topic 中，然后订阅者通过订阅这些 topic 来做实时的监控分析，或者装载到 hadoop、数据仓库中做离线分析和挖掘。</li><li><strong>运营指标</strong>：Kafka 也经常用来记录运营监控数据。包括收集各种分布式应用的数据，生产各种操作的集中反馈，比如报警和报告。</li><li><strong>流式处理</strong>：比如 spark streaming 和 storm</li><li><strong>事件源</strong></li></ul><h4 id="（4）Kafka-一些重要设计思想"><a href="#（4）Kafka-一些重要设计思想" class="headerlink" title="（4）Kafka 一些重要设计思想"></a>（4）Kafka 一些重要设计思想</h4><p><img src="https://cdn.jsdelivr.net/gh/cgshao02/BLOG_images/img/image-20240924190102682.png" alt="KafKa架构"></p><ul><li><strong>Consumergroup</strong>：KafKa是按消费组来消费消息的，一个消费组下面的所有机器可以组成一个Consumer Group，每条消息只能被该Consumer Group一个Consumer消费，不容的Consumer Group可以消费同一条消息</li><li><strong>消息状态</strong>：在 Kafka 中，消息的状态被保存在 consumer 中，broker 不会关心哪个消息被消费了被谁消费了，只记录一个 offset 值（指向 partition 中下一个要被消费的消息位置），这就意味着如果 consumer 处理不好的话，broker 上的一个消息可能会被消费多次。</li><li><strong>消息持久化</strong>：Kafka 中会把消息持久化到本地文件系统中，并且保持极高的效率。</li><li><strong>消息有效期</strong>：Kafka 会长久保留其中的消息，以便 consumer 可以多次消费，当然其中很多细节是可配置的。</li><li><strong>批量发送</strong>：Kafka 支持以消息集合为单位进行批量发送，以提高 push 效率。</li><li><strong>push-and-pull</strong> :Kafka 中的 Producer 和 consumer 采用的是 push-and-pull 模式，即 Producer 只管向 broker push 消息，consumer 只管从 broker pull 消息，两者对消息的生产和消费是异步的。</li><li><strong>Kafka 集群中 broker 之间的关系</strong>：不是主从关系，各个 broker 在集群中地位一样，我们可以随意的增加或删除任何一个 broker 节点。</li><li><strong>负载均衡方面</strong>： Kafka 提供了一个 metadata API 来管理 broker 之间的负载（对 Kafka0.8.x 而言，对于 0.7.x 主要靠 zookeeper 来实现负载均衡）。</li><li><strong>同步异步</strong>：Producer 采用异步 push 方式，极大提高 Kafka 系统的吞吐率（可以通过参数控制是采用同步还是异步方式）。</li><li><strong>分区机制 partition</strong>：Kafka 的 broker 端支持消息分区，Producer 可以决定把消息发到哪个分区，在一个分区中消息的顺序就是 Producer 发送消息的顺序，一个主题中可以有多个分区，具体分区的数量是可配置的。分区的意义很重大，后面的内容会逐渐体现。</li><li><strong>离线数据装载</strong>：Kafka 由于对可拓展的数据持久化的支持，它也非常适合向 Hadoop 或者数据仓库中进行数据装载。</li><li><strong>插件支持</strong>：现在不少活跃的社区已经开发出不少插件来拓展 Kafka 的功能，如用来配合 Storm、Hadoop、flume 相关的插件。</li></ul><h3 id="二、消息队列通信的模式"><a href="#二、消息队列通信的模式" class="headerlink" title="二、消息队列通信的模式"></a>二、消息队列通信的模式</h3><h4 id="（1）点对点模式"><a href="#（1）点对点模式" class="headerlink" title="（1）点对点模式"></a>（1）点对点模式</h4><p><img src="https://cdn.jsdelivr.net/gh/cgshao02/BLOG_images/img/c076a56492c6ab4c1768ac8be584ad81.png" alt=""></p><p>如上图所示，点对点模式通常是基于拉取或者轮询的消息传送模型，这个模型的特点是发送到队列的消息被一个且只有一个消费者进行处理。生产者将消息放入消息队列后，由消费者主动的去拉取消息进行消费。点对点模型的的优点是消费者拉取消息的频率可以由自己控制。但是消息队列是否有消息需要消费，在消费者端无法感知，所以在消费者端需要额外的线程去监控。</p><h4 id="（2）发布订阅模式"><a href="#（2）发布订阅模式" class="headerlink" title="（2）发布订阅模式"></a>（2）发布订阅模式</h4><p><img src="https://ask.qcloudimg.com/http-save/yehe-8223537/45ac0cf0a61afe236bd86a8348ad9848.png" alt=""></p><p>如上图所示，发布订阅模式是一个基于消息送的消息传送模型，改模型可以有多种不同的订阅者。生产者将消息放入消息队列后，队列会将消息推送给订阅过该类消息的消费者（类似微信公众号）。由于是消费者被动接收推送，所以无需感知消息队列是否有待消费的消息！但是 consumer1、consumer2、consumer3 由于机器性能不一样，所以处理消息的能力也会不一样，但消息队列却无法感知消费者消费的速度！所以推送的速度成了发布订阅模模式的一个问题！假设三个消费者处理速度分别是 8M/s、5M/s、2M/s，如果队列推送的速度为 5M/s，则 consumer3 无法承受！如果队列推送的速度为 2M/s，则 consumer1、consumer2 会出现资源的极大浪费！</p><h3 id="三、Kafka-的架构原理"><a href="#三、Kafka-的架构原理" class="headerlink" title="三、Kafka 的架构原理"></a>三、Kafka 的架构原理</h3><h4 id="（1）基础架构与名词解释"><a href="#（1）基础架构与名词解释" class="headerlink" title="（1）基础架构与名词解释"></a>（1）基础架构与名词解释</h4><p><img src="https://cdn.jsdelivr.net/gh/cgshao02/BLOG_images/img/935e34114a00ca407c376a24b340341b.png" alt=""></p><p>在这里插入图片描述</p><ul><li>Producer：Producer 即生产者，消息的产生者，是消息的入口。</li><li>Broker： 一个Kafka集群中的一台服务器就是一个Broker，Broker可以水平无限扩展，同一个Topic中的消息可以分布在多个Broker中。</li><li>Topic：消息的主题，可以理解为消息的分类，kafka 的数据就保存在 topic。在每个 broker 上都可以创建多个 topic。</li><li>Partition：Topic 的分区，每个 topic 可以有多个分区，分区的作用是做负载，提高 kafka 的吞吐量。同一个 topic 在不同的分区的数据是不重复的，partition 的表现形式就是一个一个的文件夹！</li><li>Replication: 每一个分区都有多个副本，副本的作用是做备胎。当主分区（Leader）故障的时候会选择一个备胎（Follower）上位，成为 Leader。在 kafka 中默认副本的最大数量是 10 个，且副本的数量不能大于 Broker 的数量，follower 和 leader 绝对是在不同的机器，同一机器对同一个分区也只可能存放一个副本（包括自己）。</li><li>Message：每一条发送的消息主体。</li><li>Consumer：消费者，即消息的消费方，是消息的出口。</li><li>Consumer Group：我们可以将多个消费组组成一个消费者组，在 kafka 的设计中同一个分区的数据只能被消费者组中的某一个消费者消费。同一个消费者组的消费者可以消费同一个 topic 的不同分区的数据，这也是为了提高 kafka 的吞吐量！</li><li>Zookeeper：kafka 集群依赖 zookeeper 来保存集群的的元信息，来保证系统的可用性。</li></ul><h4 id="（2）工作流程分析"><a href="#（2）工作流程分析" class="headerlink" title="（2）工作流程分析"></a>（2）工作流程分析</h4><h5 id="（1）发送数据"><a href="#（1）发送数据" class="headerlink" title="（1）发送数据"></a>（1）发送数据</h5><p>我们看上面的架构图中，producer 就是生产者，是数据的入口。注意看图中的红色箭头，<strong>Producer 在写入数据的时候永远的找 leader</strong>，不会直接将数据写入 <strong>follower</strong>！那 leader 怎么找呢？写入的流程又是什么样的呢？我们看下图：</p><p><img src="https://cdn.jsdelivr.net/gh/cgshao02/BLOG_images/img/882ff36ad77ac28c3ce824f299bcef26.png" alt=""></p><p>发送的流程就在图中已经说明了，就不单独在文字列出来了！需要注意的一点是，消息写入 leader 后，follower 是主动的去 leader 进行同步的！producer 采用 push 模式将数据发布到 broker，每条消息追加到分区中，顺序写入磁盘，所以保证同一分区内的数据是有序的！写入示意图如下：</p><p><img src="https://cdn.jsdelivr.net/gh/cgshao02/BLOG_images/img/cb151f6c9a4bab2e5f42376b4514e335.png" alt=""></p><p>在这里插入图片描述上面说到数据会写入到不同的分区，那 kafka 为什么要做分区呢？相信大家应该也能猜到，分区的主要目的是：</p><ol><li><strong>方便扩展</strong>：因为一个 topic 可以有多个 partition，所以我们可以通过扩展机器去轻松的应对日益增长的数据量。</li><li><strong>提高并发</strong>：以 partition 为读写单位，可以多个消费者同时消费数据，提高了消息的处理效率。</li></ol><p>熟悉负载均衡的朋友应该知道，当我们向某个服务器发送请求的时候，服务端可能会对请求做一个负载，将流量分发到不同的服务器，那在 kafka 中，如果某个 topic 有多个 partition，producer 又怎么知道该将数据发往哪个 partition 呢？</p><p>kafka 中有几个原则：</p><ol><li>partition 在写入的时候可以指定需要写入的 partition，如果有指定，则写入对应的 partition。</li><li>如果没有指定 partition，但是设置了数据的 key，则会根据 key 的值 hash 出一个 partition。</li><li>如果既没指定 partition，又没有设置 key，则会轮询选出一个 partition。</li></ol><p>保证消息不丢失是一个消息队列中间件的基本保证，那 producer 在向 kafka 写入消息的时候，怎么保证消息不丢失呢？其实上面的写入流程图中有描述出来，那就是通过 ACK 应答机制！在生产者向队列写入数据的时候可以设置参数来确定是否确认 kafka 接收到数据，这个参数可设置的值为 <strong>0、1、all</strong>。</p><ul><li>0 代表 producer 往集群发送数据不需要等到集群的返回，不确保消息发送成功。安全性最低但是效率最高。</li><li>1 代表 producer 往集群发送数据只要 leader 应答就可以发送下一条，只确保 leader 发送成功。</li><li>all 代表 producer 往集群发送数据需要所有的 follower 都完成从 leader 的同步才会发送下一条，确保 leader 发送成功和所有的副本都完成备份。安全性最高，但是效率最低。</li></ul><p>最后要注意的是，如果往不存在的 topic 写数据，能不能写入成功呢？kafka 会自动创建 topic，分区和副本的数量根据默认配置都是 1。</p><h5 id="（2）保存数据"><a href="#（2）保存数据" class="headerlink" title="（2）保存数据"></a>（2）保存数据</h5><p>Producer 将数据写入 kafka 后，集群就需要对数据进行保存了！kafka 将数据保存在磁盘，可能在我们的一般的认知里，写入磁盘是比较耗时的操作，不适合这种高并发的组件。Kafka 初始会单独开辟一块磁盘空间，顺序写入数据（效率比随机写入高）。</p><h6 id="（1）Partition-结构"><a href="#（1）Partition-结构" class="headerlink" title="（1）Partition 结构"></a>（1）Partition 结构</h6><p>前面说过了每个 topic 都可以分为一个或多个 partition，如果你觉得 topic 比较抽象，那 partition 就是比较具体的东西了！Partition 在服务器上的表现形式就是一个一个的文件夹，每个 partition 的文件夹下面会有多组 segment 文件，每组 segment 文件又包含. index 文件、.log 文件、.timeindex 文件（早期版本中没有）三个文件， log 文件就实际是存储 message 的地方，而 index 和 timeindex 文件为索引文件，用于检索消息。</p><p><img src="https://cdn.jsdelivr.net/gh/cgshao02/BLOG_images/img/706d31956c65fa740a4bf906fc81cd5c.png" alt=""></p><p>如上图，这个 partition 有三组 segment 文件，每个 log 文件的大小是一样的，但是存储的 message 数量是不一定相等的（每条的 message 大小不一致）。文件的命名是以该 segment 最小 offset 来命名的，如 000.index 存储 offset 为 0~368795 的消息，kafka 就是利用分段 + 索引的方式来解决查找效率的问题。</p><h6 id="（2）Message-结构"><a href="#（2）Message-结构" class="headerlink" title="（2）Message 结构"></a>（2）Message 结构</h6><p>上面说到 log 文件就实际是存储 message 的地方，我们在 producer 往 kafka 写入的也是一条一条的 message，那存储在 log 中的 message 是什么样子的呢？消息主要包含消息体、消息大小、offset、压缩类型…… 等等！我们重点需要知道的是下面三个：</p><ul><li><strong>offset</strong>：offset 是一个占 8byte 的有序 id 号，它可以唯一确定每条消息在 parition 内的位置！</li><li><strong>消息大小</strong>：消息大小占用 4byte，用于描述消息的大小。</li><li><strong>消息体</strong>：消息体存放的是实际的消息数据（被压缩过），占用的空间根据具体的消息而不一样。</li></ul><h6 id="（3）存储策略"><a href="#（3）存储策略" class="headerlink" title="（3）存储策略"></a>（3）存储策略</h6><p>无论消息是否被消费，kafka 都会保存所有的消息。那对于旧数据有什么删除策略呢？</p><ul><li>基于时间，默认配置是 168 小时（7 天）。</li><li>基于大小，默认配置是 1073741824。</li></ul><p>需要注意的是，kafka 读取特定消息的时间复杂度是 O(1)，所以这里删除过期的文件并不会提高 kafka 的性能！</p><h5 id="（3）消费数据"><a href="#（3）消费数据" class="headerlink" title="（3）消费数据"></a>（3）消费数据</h5><p>消息存储在 log 文件后，消费者就可以进行消费了。在讲消息队列通信的两种模式的时候讲到过点对点模式和发布订阅模式。Kafka 采用的是发布订阅模式，消费者主动的去 kafka 集群拉取消息，与 producer 相同的是，消费者在拉取消息的时候也是找 <strong>leader</strong> 去拉取。</p><p><img src="https://cdn.jsdelivr.net/gh/cgshao02/BLOG_images/img/481a974a70b23c51494c8209b15b78f5.png" alt=""></p><p>图示是消费者组内的消费者小于 partition 数量的情况，所以会出现某个消费者消费多个 partition 数据的情况，消费的速度也就不及只处理一个 partition 的消费者的处理速度！如果是消费者组的消费者多于 partition 的数量，那会不会出现多个消费者消费同一个 partition 的数据呢？上面已经提到过不会出现这种情况！多出来的消费者不消费任何 partition 的数据。所以在实际的应用中，</p><p><u><strong>建议消费者组的 consumer 的数量与 partition 的数量一致</strong>！</u></p><p>在保存数据的小节里面，我们聊到了 partition 划分为多组 segment，每个 segment 又包含. log、.index、.timeindex 文件，存放的每条 message 包含 offset、消息大小、消息体…… 我们多次提到 segment 和 offset，查找消息的时候是怎么利用 segment+offset 配合查找的呢？假如现在需要查找一个 offset 为 368801 的 message 是什么样的过程呢？我们先看看下面的图：</p><p><img src="https://cdn.jsdelivr.net/gh/cgshao02/BLOG_images/img/9538b991029028098618a677fc88e0f0.png" alt=""></p><ol><li>先找到 offset 的 368801message 所在的 segment 文件（利用二分法查找），这里找到的就是在第二个 segment 文件。</li><li>打开找到的 segment 中的. index 文件（也就是 368796.index 文件，该文件起始偏移量为 368796+1，我们要查找的 offset 为 368801 的 message 在该 index 内的偏移量为 368796+5=368801，所以这里要查找的相对 offset 为 5）。由于该文件采用的是稀疏索引的方式存储着相对 offset 及对应 message 物理偏移量的关系，所以直接找相对 offset 为 5 的索引找不到，这里同样利用二分法查找相对 offset 小于或者等于指定的相对 offset 的索引条目中最大的那个相对 offset，所以找到的是相对 offset 为 4 的这个索引。</li><li>根据找到的相对 offset 为 4 的索引确定 message 存储的物理偏移位置为 256。打开数据文件，从位置为 256 的那个地方开始顺序扫描直到找到 offset 为 368801 的那条 Message。</li></ol><p>这套机制是建立在 offset 为有序的基础上，利用 segment + 有序 offset + 稀疏索引 + 二分查找 + 顺序查找等多种手段来高效的查找数据！至此，消费者就能拿到需要处理的数据进行处理了。那每个消费者又是怎么记录自己消费的位置呢？在早期的版本中，消费者将消费到的 offset 维护 zookeeper 中，consumer 每间隔一段时间上报一次，这里容易导致重复消费，且性能不好！在新的版本中消费者消费到的 offset 已经直接维护在 kafk 集群的__consumer_offsets 这个 topic 中！</p>]]></content>
      
      
      <categories>
          
          <category> KafKa </category>
          
      </categories>
      
      
        <tags>
            
            <tag> KafKa </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>KafKa实战问题</title>
      <link href="/KafKa/KafKa%E5%AE%9E%E6%88%98%E9%97%AE%E9%A2%98/"/>
      <url>/KafKa/KafKa%E5%AE%9E%E6%88%98%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="消息积压"><a href="#消息积压" class="headerlink" title="消息积压"></a>消息积压</h1><p>2024/9/23</p><p>消费者 逻辑 发生NPE导致—》 消费者不断重试消费—-》发生消息积压—-〉存在有的消息一直得不到消费</p><p>修改</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">consume.exception.retry.count = 1 //表示失败后 重试消费1次</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/cgshao02/BLOG_images/main/image-20240923140747749.png?token=A5BZ7JLVJDUYNCL5PKYCQY3G6EDAK" alt=""></p><h2 id="二、MQ“避坑”"><a href="#二、MQ“避坑”" class="headerlink" title="二、MQ“避坑”"></a>二、MQ“避坑”</h2><div class="table-container"><table><thead><tr><th>问题分类</th><th>消息积压</th></tr></thead><tbody><tr><td>相关描述</td><td>在使用MQ的过程中由于种种原因导致消息消费不及时造成消息积压</td></tr><tr><td>相关CASE</td><td></td></tr><tr><td>原因</td><td>1、消费流程卡死<br />2、 消息消费耗时过长  <br />3、消费组客户端启动失败 <br />4、消费线程过少，消费能力不够。 <br />5、客户端在消费失败后设置reture CONSUME_FAILURE，一旦不能恢复会导致一直重试</td></tr><tr><td>最佳实践</td><td>1、消费逻辑的业务处理尽量时间不要太长，如果存在长耗时逻辑尽量异步处理<br />2、不要过多和外系统进行交互，避免其他服务问题导致消费能力下降<br />3、消费线程要对异常进行分类处理，不要发生异常轻易终止或者关闭消费节点的注册<br />4、消息积压后，通过shovel可以应急处理，防止消息丢失<br />5、对与单Partition消息消费在不需要保证有序的情况下开启并行消费<br />6、发现问题及时扩容Partition并扩容消费者机器（注意消费者组的数量 和 Partition数量的权衡）<br />7、优化消费逻辑，能异步处理的尽量异步处理<br />8、消费失败不要使用CONSUME_FAILURE（导致消费重试）,可以使用RECONSUME_LATER，最后做好备份逻辑</td></tr></tbody></table></div><div class="table-container"><table><thead><tr><th>问题分类</th><th>消息丢失</th></tr></thead><tbody><tr><td>相关描述</td><td>在MQ使用过程由于MQ系统故障或者使用不当造成消息丢失</td></tr><tr><td>相关CASE</td><td></td></tr><tr><td>原因</td><td>1、mafka partition leader选举策略问题造成消息丢失。<br />2、 数据可靠性级别未设置为ack=-1。 <br />3、在机器重启过程时，异步发送消息还没处理完客户端已经被销毁。 <br />4、消息过大造成发送失败 消息发送失败没有及时关注发送结果。<br />5、 集群机器大面积宕机 部分业务存在超时丢弃消息逻辑</td></tr><tr><td>最佳实践</td><td>1、业务消费未执行成功不要返回消费成功。 <br />2、程序退出先关闭Consumer和Producer。 <br />3、如果对消息丢失0容忍可设置客户端 ack=-1。 <br />4、做好集群容灾处理，针对mafka尽量保证partition均匀分布在所有Broker中。 <br />5、不要发送超过1M以上消息</td></tr></tbody></table></div><div class="table-container"><table><thead><tr><th>问题分类</th><th>重复消费</th></tr></thead><tbody><tr><td>相关描述</td><td>在使用MQ过程中我们经常会遇到消息被重复消费问题，如果不能准确处理会导致线上问题</td></tr><tr><td>相关CASE</td><td></td></tr><tr><td>原因</td><td>1、绝大部分消息中间件均不能保证消息只被消费一次。 <br />2、生产者重复生产消息。</td></tr><tr><td>最佳实践</td><td>消息消费需要严格幂等控制，实现幂等的方式有很多，有依赖分布式锁将并行改成串行的、<br />也有依赖数据库的事务的、也有依赖与数据库记录的状态之间流转的状态机的；</td></tr></tbody></table></div><div class="table-container"><table><thead><tr><th>问题分类</th><th>消息发送失败</th></tr></thead><tbody><tr><td>相关描述</td><td>在使用MQ过程中会遇到使用不规范或者系统故障导致消息发送失败</td></tr><tr><td>相关CASE</td><td></td></tr><tr><td>原因</td><td>1、客户端是使用不规范，重复创建实例，造成大量系统资源消耗。<br />2、 系统异常未能及时监控流量，没有限流、切流预案。 <br />3、未处理发送结果</td></tr><tr><td>最佳实践</td><td>1、按照规范创建客户端，可采用Spring bean配置创建，保证一个消费组或生产者只有一个实例对象。<br />2、 关注发送结果。<br />3、 构建有效的流量监控应急预案。</td></tr></tbody></table></div>]]></content>
      
      
      <categories>
          
          <category> KafKa </category>
          
      </categories>
      
      
        <tags>
            
            <tag> KafKa </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库慢查询</title>
      <link href="/MySQL/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%85%A2%E6%9F%A5%E8%AF%A2/"/>
      <url>/MySQL/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%85%A2%E6%9F%A5%E8%AF%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="一、遇到的慢查询问题"><a href="#一、遇到的慢查询问题" class="headerlink" title="一、遇到的慢查询问题"></a>一、遇到的慢查询问题</h2><h3 id="1、表的索引区分度小导致的满查询"><a href="#1、表的索引区分度小导致的满查询" class="headerlink" title="1、表的索引区分度小导致的满查询"></a>1、表的索引区分度小导致的满查询</h3><p>为什么会命中不同的索引？</p><blockquote><p>索引的选择是优化器的工作，mysql的优化器选择索引时会极大的依赖“统计信息”。但是本质原因是原来的索引区分度很差</p></blockquote><h4 id="统计信息又是什么时候执行的？"><a href="#统计信息又是什么时候执行的？" class="headerlink" title="统计信息又是什么时候执行的？"></a>统计信息又是什么时候执行的？</h4><p>统计信息更新分为手动更新与自动更新。</p><p><strong>手动更新</strong></p><ol><li>ANALYZE table UPDATE HISTOGRAM ON <col_name> WITH <N> BUCKETS //更新某个表的某个列的直方图</li><li>ANALYZE table DROP HISTOGRAM ON col_name //删除某个表的直方图</li><li>ANALYZE table <table_name> // 更新某个表中索引各个字段的cardinality</li></ol><p><strong>自动更新：</strong></p><ol><li>增删索引，加列， 清空表等涉及数据修改的DDL时；</li><li>后台线程发现表更新的记录超过表记录总数的1/10时。</li></ol><h4 id="有触发过统计数据的日志吗？"><a href="#有触发过统计数据的日志吗？" class="headerlink" title="有触发过统计数据的日志吗？"></a>有触发过统计数据的日志吗？</h4><p>这是mysql的系统自发的行为，只能查看到最后一次更新的记录，没有历史日志。</p><p>DBA执行了analyze table后数据被覆盖了，忘记对analyze table命令前最后一次统计信息进行查看。</p><h4 id="这类满查询的注意事项"><a href="#这类满查询的注意事项" class="headerlink" title="这类满查询的注意事项"></a>这类满查询的注意事项</h4><p>（1）判断索引区分度的方法</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="keyword">distinct</span> <span class="keyword">column</span>) <span class="operator">/</span><span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>)</span><br><span class="line"><span class="comment">-- 索引区分度要大于70% --</span></span><br></pre></td></tr></table></figure><p>（2）设置降级策略、设置限流</p><p>（3）添加系统告警</p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> 后端开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java8新特性：Stream流</title>
      <link href="/Java%E5%9F%BA%E7%A1%80/Java8%E6%96%B0%E7%89%B9%E6%80%A7%EF%BC%9AStream%E6%B5%81/"/>
      <url>/Java%E5%9F%BA%E7%A1%80/Java8%E6%96%B0%E7%89%B9%E6%80%A7%EF%BC%9AStream%E6%B5%81/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在 java 中，涉及到对数组、集合等集合类元素的操作时，通常我们使用的是循环的方式进行逐个遍历处理，或者使用 stream 流的方式进行处理。</p><h3 id="什么是-Stream？"><a href="#什么是-Stream？" class="headerlink" title="什么是 Stream？"></a>什么是 Stream？</h3><p>Stream（流）是一个来自数据源的元素队列并支持聚合操作,流在管道中传输， 并且可以在管道的节点上进行处理， 比如筛选， 排序，聚合等。 Stream（流）的组成包含:元素、数据源、聚合操作、内部迭代、Pipelining等。</p><h3 id="创建-Stream-流"><a href="#创建-Stream-流" class="headerlink" title="创建 Stream 流"></a>创建 Stream 流</h3><p>1）stream()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;String&gt; stream = stringList.stream();</span><br></pre></td></tr></table></figure><p>2）parallelStream()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;String&gt; stringStream = stringList.parallelStream();</span><br></pre></td></tr></table></figure><h3 id="Stream-流常用操作"><a href="#Stream-流常用操作" class="headerlink" title="Stream 流常用操作"></a>Stream 流常用操作</h3><p>1）forEach </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stringList.forEach(System.out::println);</span><br></pre></td></tr></table></figure><p>2）map</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stringList.stream().map(i-&gt;i.equals(<span class="string">&quot;juejin&quot;</span>));</span><br></pre></td></tr></table></figure><p>3）filter</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stringList.stream().filter(i-&gt;i.equals(<span class="string">&quot;juejin&quot;</span>));</span><br></pre></td></tr></table></figure><p>4）limit</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">integerList.stream().limit(<span class="number">3</span>);</span><br></pre></td></tr></table></figure><p>5）skip</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">integerList.stream().skip(<span class="number">5</span>).limit(<span class="number">3</span>);</span><br></pre></td></tr></table></figure><p>6）distinct</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">integerList.stream().distinct().collect(Collectors.toList());</span><br></pre></td></tr></table></figure><p>7）sorted</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">integerList.stream().sorted();</span><br></pre></td></tr></table></figure><p>8）sorted(Comparator com)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">integerList.stream().sorted(Comparator.comparing(Integer::intValue));</span><br></pre></td></tr></table></figure><p>9）Collectors 收集器</p><p><img src="https://pic.yupi.icu/5563/202401242026474.png" alt=""></p><ul><li>恒等处理 Collectors</li></ul><p>所谓<strong>恒等处理</strong>，指的就是Stream的元素在经过Collector函数处理前后完全不变，例如toList()操作，只是最终将结果从Stream中取出放入到List对象中，并没有对元素本身做任何的更改处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">list.stream().collect(Collectors.toList());</span><br><span class="line">list.stream().collect(Collectors.toSet());</span><br><span class="line">list.stream().collect(Collectors.toCollection());</span><br></pre></td></tr></table></figure><ul><li>归约汇总 Collectors</li></ul><p>对于<strong>归约汇总</strong>类的操作，Stream流中的元素逐个遍历，进入到Collector处理函数中，然后会与上一个元素的处理结果进行合并处理，并得到一个新的结果，以此类推，直到遍历完成后，输出最终的结果</p><div class="table-container"><table><thead><tr><th>counting</th><th>统计流中的元素个数</th></tr></thead><tbody><tr><td>summingInt</td><td>计算流中指定int字段的累加总和。针对不同类型的数字类型，有不同的方法，比如summingDouble等</td></tr><tr><td>averagingInt</td><td>计算流中指定int字段的平均值。针对不同类型的数字类型，有不同的方法，比如averagingLong等</td></tr><tr><td>joining</td><td>将流中所有元素（或者元素的指定字段）字符串值进行拼接，可以指定拼接连接符，或者首尾拼接字符</td></tr><tr><td>maxBy</td><td>根据给定的比较器，选择出值最大的元素</td></tr><tr><td>minBy</td><td>根据给定的比较器，选择出值最小的元素</td></tr></tbody></table></div><ul><li><p>分组分区 Collectors</p></li><li><ul><li>仅仅是做一个常规的数据分组操作时，可以仅传入一个分组函数即可</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">groupBySubCompany</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 按照子公司维度将员工分组</span></span><br><span class="line">    Map&lt;String, List&lt;Employee&gt;&gt; resultMap =</span><br><span class="line">            getAllEmployees().stream()</span><br><span class="line">                    .collect(Collectors.groupingBy(Employee::getSubCompany));</span><br><span class="line">    System.out.println(resultMap);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><ul><li>如果不仅需要分组，还需要对分组后的数据进行处理的时候，则需要同时给定分组函数以及值收集器</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">groupAndCaculate</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 按照子公司分组，并统计每个子公司的员工数</span></span><br><span class="line">    Map&lt;String, Long&gt; resultMap = getAllEmployees().stream()</span><br><span class="line">            .collect(Collectors.groupingBy(Employee::getSubCompany,</span><br><span class="line">                    Collectors.counting()));</span><br><span class="line">    System.out.println(resultMap);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>简而言之，Stream API 提供了一种高效且易于使用的处理数据的方式。让程序员写出高效率、干净、简洁的代码。</p>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
